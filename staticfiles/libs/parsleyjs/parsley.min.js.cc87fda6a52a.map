{
    "version": 3,
    "sources": ["parsley.min.js", "parsley.js", "src/parsley/pubsub.js", "s
        rc / vendor / inputevent.js ","
        src / parsley / utils.js ","
        src / parsley / defaults.js ","
        src / p
        arsley / base.js ","
        src / parsley / validator.js ","
        src / parsley / validator_registry.js ","
        src / parsley / ui.js ","
        src / parsley / form.js ","
        src / parsley / constraint.js ","
        src / parsle
        y / field.js ","
        src / parsley / multiple.js ","
        src / parsley / factory.js ","
        src / parsley / main
        .js ","
        src / parsley / remote.js ","
        src / i18n / en.js ","
        src / parsley.js "],"
        names ":["
        _toCon
        sumableArray ","
        arr ","
        Array ","
        isArray ","
        i ","
        arr2 ","
        length ","
        from ","
        _slice ","
        proto
        type ","
        slice ","
        _slicedToArray ","
        sliceIterator ","
        _arr ","
        _n ","
        _d ","
        _e ","
        undefined ", "_s", "_i", "Symbol", "iterator", "next", "done", "push", "value", "err", "Object", "Type
        Error ","
        _extends ","
        assign ","
        target ","
        arguments ","
        source ","
        key ","
        hasOwnProperty ",
        "call", "global", "factory", "exports", "module", "require", "define", "amd", "parsley",
        "jQuery", "this", "$", "adapt", "fn", "context", "parsleyAdaptedCallback", "args", "unsh
        ift ","
        apply ","
        o ","
        eventName ","
        name ","
        lastIndexOf ","
        eventPrefix ","
        substr ","
        InputE
        vent ","
        _this14 ","
        globals ","
        window ","
        isNativeEvent ","
        evt ","
        originalEvent ","
        isTrus
        ted ","
        fakeInputEvent ","
        trigger ","
        misbehaves ","
        behavesOk ","
        document ","
        on ","
        data ",
        "selector", "off", "install", "inputEventPatched", "uninstall", "globalID", "pastWarni
        ngs ","
        Utils ","
        attr ","
        element ","
        namespace ","
        obj ","
        attribute ","
        attributes ","
        regex ", "RegExp", "specified", "test", "camelize", "deserializeValue", "checkAttr", "_checkAt
        tr ","
        hasAttribute ","
        setAttr ","
        setAttribute ","
        dasherize ","
        String ","
        getType ","
        getA
        ttribute ","
        generateID ","
        num ","
        isNaN ","
        Number ","
        JSON ","
        parse ","
        e ","
        str ","
        replace ", "match", "chr", "toUpperCase", "toLowerCase", "warn", "_window$console", "console", "w
        arnOnce ","
        msg ","
        _resetWarnings ","
        trimString ","
        string ","
        date ","
        parsed ","
        _parsed$m
        ap ","
        map ","
        x ","
        parseInt ","
        _parsed$map2 ","
        year ","
        month ","
        day ","
        Date ","
        getFullYear ","
        getMonth ","
        getDate ","
        _string ","
        integer ","
        number ","
        parseFloat ","
        boolean ","
        obje
        ct ","
        regexp ","
        _regexp ","
        flags ","
        parseRequirement ","
        requirementType ","
        converter ",
        "converted", "namespaceEvents", "events", "split", "join", "difference", "array", "remo
        ve ","
        result ","
        each ","
        _ ","
        elem ","
        indexOf ","
        all ","
        promises ","
        when ","
        concat ","
        objec
        tCreate ","
        create ","
        Error ","
        _SubmitSelector ","
        Defaults ","
        inputs ","
        excluded ","
        prio
        rityEnabled ","
        multiple ","
        group ","
        uiEnabled ","
        validationThreshold ","
        focus ","
        trigg
        erAfterFailure ","
        errorClass ","
        successClass ","
        classHandler ","
        Field ","
        errorsContai
        ner ","
        errorsWrapper ","
        errorTemplate ","
        Base ","
        __id__ ","
        asyncSupport ","
        _pipeAccord
        ingToValidationResult ","
        _this ","
        pipe ","
        r ","
        Deferred ","
        validationResult ","
        reject ", "resolve", "promise", "actualizeOptions", "options", "domOptions", "parent", "_resetO
        ptions ","
        initOptions ","
        _listeners ","
        queue ","
        subscribe ","
        listenTo ","
        splice ","
        unsu
        bscribe ","
        unsubscribeTo ","
        extraArg ","
        asyncIsValid ","
        force ","
        whenValid ","
        _findRel
        ated ","
        querySelectorAll ","
        $element ","
        convertArrayRequirement ","
        m ","
        values ","
        conv
        ertExtraOptionRequirement ","
        requirementSpec ","
        extraOptionReader ","
        main ","
        extra ",
        "Validator", "spec", "extend", "validate", "requirementFirstArg", "validateMultiple",
        "instance", "validateDate", "_isDateInput", "validateNumber", "validateString", "pars
        eRequirements ","
        requirements ","
        type ","
        isPlainObject ","
        priority ","
        ValidatorRegist
        ry ","
        validators ","
        catalog ","
        __class__ ","
        locale ","
        init ","
        typeTesters ","
        email ","
        di
        gits ","
        alphanum ","
        url ","
        range ","
        decimalPlaces ","
        Math ","
        max ","
        ValidatorRegistry__
        parseArguments ","
        ValidatorRegistry__operatorToValidator ","
        operator ","
        _len ","
        requ
        irementsAndInput ","
        _key ","
        pop ","
        ValidatorRegistry__comparisonOperator ","
        addValid
        ator ","
        Parsley ","
        setLocale ","
        addCatalog ","
        messages ","
        set ","
        addMessage ","
        message ", "addMessages", "nameMessageObject", "arg1", "arg2", "_setValidator", "hasValidator",
        "updateValidator", "removeValidator", "validator", "getErrorMessage", "constraint", "
        typeMessages ","
        formatMessage ","
        defaultMessage ","
        en ","
        parameters ","
        notblank ","
        req
        uired ","
        _ref ","
        _ref$step ","
        step ","
        _ref$base ","
        base ","
        tester ","
        nb ","
        decimals ","
        to
        Int ","
        f ","
        round ","
        pow ","
        ","
        pattern ","
        minlength ","
        requirement ","
        maxlength ","
        min ",
        "mincheck", "maxcheck", "check", "equalto", "refOrValue", "$reference", "val", "UI", "di
        ffResults ","
        newResult ","
        oldResult ","
        deep ","
        added ","
        kept ","
        found ","
        j ","
        assert ","
        r
        emoved ","
        Form ","
        _actualizeTriggers ","
        _this2 ","
        onSubmitValidate ","
        onSubmitButton ", "_focusedField", "fields", "field", "noFocus", "_destroyUI", "_reflowUI", "_buildUI",
        "_ui", "diff", "lastValidationResult", "_manageStatusClass", "_manageErrorsMessages", "_failedOnce", "getErrorsMessages", "errorMessage", "_getErrorMessage", "addError",
        "_ref2", "_ref2$updateClass", "updateClass", "_addError", "_errorClass", "updateError
        ","
        _ref3 ","
        _ref3$updateClass ","
        _updateError ","
        removeError ","
        _ref4 ","
        _ref4$update
        Class ","
        _removeError ","
        hasConstraints ","
        needsValidation ","
        _successClass ","
        _reset
        Class ","
        errorsMessagesDisabled ","
        _insertErrorWrapper ","
        $errorsWrapper ","
        find ","
        a
        ppend ","
        addClass ","
        html ","
        removeClass ","
        _ref5 ","
        _ref6 ","
        customConstraintErrorMes
        sage ","
        $errorClassHandler ","
        _manageClassHandler ","
        errorsWrapperId ","
        validationIn
        formationVisible ","
        $handlerFunction ","
        $handler ","
        _inputHolder ","
        nodeName ","
        $erro
        rsContainer ","
        after ","
        _this3 ","
        $toBind ","
        _validateIfNeeded ","
        event ","
        _this4 ","
        ge
        tValue ","
        debounce ","
        clearTimeout ","
        _debounced ","
        setTimeout ","
        _resetUI ","
        children ","
        Form__statusMapping ","
        pending ","
        resolved ","
        rejected ","
        _this5 ","
        submitSource ",
        "_submitSource", "prop", "_remoteCache", "whenValidate", "state", "_trigger", "stopImm
        ediatePropagation ","
        preventDefault ","
        _submit ","
        currentTarget ","
        $synthetic ","
        appe
        ndTo ","
        Event ","
        _arguments ","
        _Utils$all$done$fail$always ","
        _this6 ","
        _ref7 ","
        submi
        tEvent ","
        _refreshFields ","
        _withoutReactualizingFormOptions ","
        fail ","
        always ","
        isV
        alid ","
        _arguments2 ","
        _this7 ","
        _ref8 ","
        refresh ","
        reset ","
        destroy ","
        removeData ","
        _
        bindFields ","
        _this8 ","
        oldFields ","
        fieldsMappedById ","
        not ","
        fieldInstance ","
        Facto
        ry ","
        uniqueId ","
        oldActualizeOptions ","
        Constraint ","
        parsleyField ","
        isDomConstrain
        t ","
        validatorSpec ","
        _validatorRegistry ","
        _parseRequirements ","
        capitalize ","
        cap ",
        "_validator", "requirementList", "_this9", "parsleyFormInstance", "constraints", "con
        straintsByName ","
        _bindConstraints ","
        parsley_field__statusMapping ","
        _whenValid$al
        ways$done$fail$always ","
        _this10 ","
        _ref9 ","
        _isInGroup ","
        _refreshed ","
        _isRequired ", "validateIfEmpty", "inArray", "_arguments3", "_this11", "_ref10", "_ref10$force", "gr
        oupedConstraints ","
        _getGroupedConstraints ","
        _validateConstraint ","
        _this12 ","
        _han
        dleWhitespace ","
        _refreshConstraints ","
        refreshConstraints ","
        addConstraint ","
        remov
        eConstraint ","
        updateConstraint ","
        _bindHtml5Constraints ","
        trimValue ","
        whitespace ", "c", "index", "p", "sort", "a", "b", "parsley_field", "Multiple", "addElement", "$elemen
        ts ","
        fieldConstraints ","
        has ","
        filter ","
        _init ","
        savedparsleyFormInstance ","
        __vers
        ion__ ","
        is ","
        bind ","
        isMultiple ","
        handleMultiple ","
        parsleyMultipleInstance ","
        _thi
        s13 ","
        input ","
        $previouslyRelated ","
        get ","
        doNotStore ","
        parsleyInstance ","
        ParsleyE
        xtend ","
        vernums ","
        jquery ","
        forEach ","
        version ","
        psly ","
        instances ","
        ParsleyConfig ", "ParsleyUtils", "registry", "i18n", "ParsleyValidator", "method", "_window$Parsley",
        "ParsleyUI", "doNotUpdateClass", "autoBind", "deprecated", "listen", "callback", "unsu
        bscribeAll ","
        emit ","
        _instance ","
        instanceGiven ","
        asyncValidators ","
        default ","
        xhr ", "status", "reverse", "addAsyncValidator", "ajaxOptions", "csr", "encodeURIComponent", "remoteOptions", "param", "ajax", "handleXhr", "then", "inputevent"
    ],
    "mappings": ";;;;;;;;AAkBA,
    QAASA,
    oBAAmBC,
    GAAO,
    GAAIC,
    MAAMC,
    QAAQF,
    GAAM,
    CAAE,
    IAAK,
    GAAIG,
    GAAI,
    EAAGC,
    EAAOH,
    MAAMD,
    EAAIK,
    QAASF,
    EAAIH,
    EAAIK,
    OAAQF,
    IAAKC,
    EAAKD,
    GAAKH,
    EAAIG,
    EAAI,
    OAAOC,
    GAA
    e,
    MAAOH,
    OAAMK,
    KAAKN,
    GANtL,
    GAAIO,
    QAASN,
    MAAMO,
    UAAUC,
    MAEzBC,
    eAAiB,
    WAAe,
    QAASC,
    GAAcX,
    EAAKG,
    GAAK,
    GAAIS,
    MAAeC,
    GAAK,
    EAAUC,
    GAAK,
    EAAWC,
    EAAKC,
    MAAW,
    KAAM,
    IAAK,
    GAAiCC,
    GAA7BC,
    EAAKlB,
    EAAImB,
    OAAOC,
    cAAmBP,
    GAAMI,
    EAAKC,
    EAAGG,
    QAAQC,
    QAAoBV,
    EAAKW,
    KAAKN,
    EAAGO,
    QAAY
    rB,
    GAAKS,
    EAAKP,
    SAAWF,
    GAA3DU,
    GAAK,
    IAAoE,
    MAAOY,
    GAAOX,
    GAAK,
    EAAMC,
    EAAKU,
    EAAO,
    QAAU,
    KA
    AWZ,
    GAAMK,
    EAAG,
    WAAWA,
    EAAG,
    YAAe,
    QAAU,
    GAAIJ,
    EAAI,
    KAAMC,
    IAAQ,
    MAAOH,
    GAAQ,
    MAAO,
    UAAUZ,
    EAAKG,
    GAAK,
    GAAIF,
    MAAMC,
    QAAQF,
    GAAQ,
    MAAOA,
    EAAY,
    IAAImB,
    OAAOC,
    WAAYM,
    QAAO1B,
    GAAQ,
    MAAO
    W,
    GAAcX,
    EAAKG,
    EAAa,
    MAAM,
    IAAIwB,
    WAAU,
    4 DAEnlBC,
    SAAWF,
    OAAOG,
    QAAU,
    SAAUC,
    GAAU,
    IAAK,
    GA
    AI3B,
    GAAI,
    EAAGA,
    EAAI4B,
    UAAU1B,
    OAAQF,
    IAAK,
    CAAE,
    GAAI6B,
    GAASD,
    UAAU5B,
    EAAI,
    KAAK,
    GAAI
    8 B,
    KAAOD,
    GAAcN,
    OAAOlB,
    UAAU0B,
    eAAeC,
    KAAKH,
    EAAQC,
    KAAQH,
    EAAOG,
    GAAOD,
    EAAOC,
    IAAY,
    MAAO
    H,
    KChBvP,
    SAAWM,
    EAAQC,
    GACE,
    gBAAZC,
    UAA0C,
    mBAAXC,
    QAAyBA,
    OAAOD,
    QAAUD,
    EAAQG,
    QAAQ,
    WAC9
    E,
    kBAAXC,
    SAAyBA,
    OAAOC,
    IAAMD,
    QAAQ,
    UAAWJ,
    GAChED,
    EAAOO,
    QAAUN,
    EAAQD,
    EAAOQ,
    SAChCC,
    KAA
    M,
    SAAUC,
    GAAK,
    YCOvB,
    SAASC,
    GAAMC,
    EAAIC,
    GASjB,
    MAPKD,
    GAAGE,
    yBACNF,
    EAAGE,
    uBAAyB,
    WAC1B,
    GAAIC,
    GAAOlD,
    MAAMO,
    UAAUC,
    MAAM0B,
    KAAKJ,
    UAAW,
    EACjDoB,
    GAAKC,
    QAAQP,
    MACbG,
    EAAGK,
    MAAM
    J,
    GAAWK,
    EAAGH,
    KAGpBH,
    EAAGE,
    uBAKZ,
    QAASK,
    GAAUC,
    GACjB,
    MAAyC,
    KAArCA,
    EAAKC,
    YAAYC,
    EAAa,
    GACzBF,
    EAAKG,
    OAAOD,
    EAAYrD,
    QAC1BmD;;;;;;;AClBT,
    QAASI,
    KHk3EL,
    GAAIC,
    GAAUhB,
    KGj3EZi
    B,
    EAAUC,
    QAAU3B,
    MAIxBR,
    UAAciB,
    MAGZmB,
    cAAe,
    SAAAC,
    GACb,
    MAAOA,
    GAAIC,
    eAAiBD,
    EAAIC,
    cAA
    cC,
    aAAc,
    GAG9DC,
    eAAgB,
    SAAAH,
    GACVJ,
    EAAKG,
    cAAcC,
    IACrBnB,
    EAAEmB,
    EAAInC,
    QAAQuC,
    QAAQ,
    U
    AI1BC,
    WAAY,
    SAAAL,
    GACNJ,
    EAAKG,
    cAAcC,
    KACrBJ,
    EAAKU,
    UAAUN,
    GACfnB,
    EAAE0B,
    UACCC,
    GAAG,
    o
    BAAqBR,
    EAAIS,
    KAAKC,
    SAAUd,
    EAAKO,
    gBACnDP,
    EAAKO,
    eAAeH,
    KAIxBM,
    UAAW,
    SAAAN,
    GACLJ,
    EAAKG,
    cAAcC,
    IACrBnB,
    EAAE0B,
    UACCI,
    IAAI,
    mBAAoBX,
    EAAIS,
    KAAKC,
    SAAUd,
    EAAKU,
    WAChDK,
    IAAI,
    oBA
    AqBX,
    EAAIS,
    KAAKC,
    SAAUd,
    EAAKS,
    aAKxDO,
    QAAS,
    WACP,
    IAAIf,
    EAAQgB,
    kBAAZ,
    CAGAhB,
    EAAQgB,
    k
    BAAoB,
    OAC5B,
    KAAA,
    GHi3EMlE,
    IGj3EgB,
    SAAU,
    yBAA0B,
    sBAAuB,
    sBAAjFM,
    EAAA,
    EAAAA,
    EAAAN,
    EA
    AAP,
    OAAAa,
    IAAwG,
    CAAnG,
    GAAIyD,
    GAAA / D,
    EAAAM,
    EACP4B,
    GAAE0B,
    UACCC,
    GAAG,
    mBAAoBE,
    GAAWA,
    SAAAA,
    GAAWd,
    EAAKU,
    WAClDE,
    GAAG,
    oBAAqBE,
    GAAWA,
    SAAAA,
    GAAWd,
    EAAKS,
    eAI1DS,
    UAAW,
    iBACF
    jB,
    GAAQgB,
    kBACfhC,
    EAAE0B,
    UAAUI,
    IAAI,
    kBC1DtB,
    GAAII,
    GAAW,
    EACXC,
    KAEAC,
    GAGFC,
    KAAM,
    SA
    AUC,
    EAASC,
    EAAWC,
    GAClC,
    GAAInF,
    GACAoF,
    EACAC,
    EACAC,
    EAAQ,
    GAAIC,
    QAAO,
    IAAML,
    EAAW,
    IAExC,
    IAAI,
    mBAAuBC,
    GACzBA,
    SAGA,
    KAAKnF,
    IAAKmF,
    GACJA,
    EAAIpD,
    eAAe / B,
    UACdmF,
    GAAInF,
    EAIjB,
    KAAKiF,
    EACH,
    MAAOE,
    EAGT,
    KADAE,
    EAAaJ,
    EAAQI,
    WAChBrF,
    EAAIqF,
    EAAWnF,
    OAAQF,
    KAC1BoF,
    EAA
    YC,
    EAAWrF,
    GAEnBoF,
    GAAaA,
    EAAUI,
    WAAaF,
    EAAMG,
    KAAKL,
    EAAU / B,
    QAC3D8B,
    EAAIzC,
    KAAKgD,
    SAA
    SN,
    EAAU / B,
    KAAK / C,
    MAAM4E,
    EAAUhF,
    UAAYwC,
    KAAKiD,
    iBAAiBP,
    EAAU / D,
    OAIjG,
    OAAO8D,
    IAGTS,
    U
    AAW,
    SAAUX,
    EAASC,
    EAAWW,
    GACvC,
    MAAOZ,
    GAAQa,
    aAAaZ,
    EAAYW,
    IAG1CE,
    QAAS,
    SAAUd,
    EAASC,
    EAAW
    F,
    EAAM3D,
    GAC3C4D,
    EAAQe,
    aAAatD,
    KAAKuD,
    UAAUf,
    EAAYF,
    GAAOkB,
    OAAO7E,
    KAGhE8E,
    QAAS,
    SAAS
    lB,
    GAChB,
    MAAOA,
    GAAQmB,
    aAAa,
    SAAW,
    QAGzCC,
    WAAY,
    WACV,
    MAAO,
    GAAKxB,
    KAIdc,
    iBAAkB,
    SAAUtE,
    GAC1B,
    GAAIiF,
    EAEJ,
    KACE,
    MAAOjF,
    GACI,
    QAATA,
    GACU,
    SAATA,
    IACQ,
    QAATA,
    EAAkB,
    KACjBkF,
    MA
    AMD,
    EAAME,
    OAAOnF,
    IACpB,
    UAAUoE,
    KAAKpE,
    GAASoF,
    KAAKC,
    MAAMrF,
    GACnCA,
    EAF8BiF,
    GAG5BjF,
    EACJ,
    MAAOsF,
    GAAK,
    MAAOtF,
    KAIvBqE,
    SAAU,
    SAAUkB,
    GAClB,
    MAAOA,
    GAAIC,
    QAAQ,
    UAAW,
    SAAUC,
    EA
    AOC,
    GAC7C,
    MAAOA,
    GAAMA,
    EAAIC,
    cAAgB,
    MAKrCf,
    UAAW,
    SAAUW,
    GACnB,
    MAAOA,
    GAAIC,
    QAAQ,
    MAAO,
    KACvBA,
    QAAQ,
    wBAAyB,
    SACjCA,
    QAAQ,
    oBAAqB,
    SAC7BA,
    QAAQ,
    KAAM,
    KACdI,
    eAGLC,
    KAAM,
    WJWF,
    GAA
    IC,
    EIVFvD,
    QAAOwD,
    SAAW,
    kBAAsBxD,
    QAAOwD,
    QAAQF,
    OACzDC,
    EAAAvD,
    OAAOwD,
    SAAQF,
    KAAAhE,
    MA
    AAiE,
    EAAQvF,
    YAG3ByF,
    SAAU,
    SAASC,
    GACZxC,
    EAAawC,
    KAChBxC,
    EAAawC,
    IAAO,
    EACpB5E,
    KAAKwE,
    KAAAhE,
    MAALR,
    KAAad,
    aAIjB2F,
    eAAgB,
    WACdzC,
    MAGF0C,
    WAAY,
    SAASC,
    GACnB,
    MAAOA,
    GAAOZ,
    QAAQ,
    aAAc,
    KAGtCH,
    OACEgB,
    KAAM,
    QAAAA,
    GAASD,
    GACb,
    GAAIE,
    GAASF,
    EAAOX,
    MAAM,
    2 BAC1B,
    KAAKa,
    EA
    CH,
    MAAO,
    KJYP,
    IAAIC,
    GIXsBD,
    EAAOE,
    IAAI,
    SAAAC,
    GJYnC,
    MIZwCC,
    UAASD,
    EAAG,
    MJelDE,
    EAAezH,
    eAAeqH,
    EAAa,
    GIfzCK,
    GAAHD,
    EAAA,
    GAAGA,
    EAAA,
    IAAME,
    EAAAF,
    EAAA,
    GAAOG,
    EAAAH,
    EAAA,
    GACj
    BN,
    EAAO,
    GAAIU,
    MAAKH,
    EAAMC,
    EAAQ,
    EAAGC,
    EACrC,
    OAAIT,
    GAAKW,
    gBAAkBJ,
    GAAQP,
    EAAKY,
    WAAa,
    IAAMJ,
    GAASR,
    EAAKa,
    YAAcJ,
    EAC9E,
    KACFT,
    GAETD,
    OAAQ,
    SAASe,
    GACf,
    MAAOA,
    IAETC,
    QAAS,
    SAASh
    B,
    GAChB,
    MAAIlB,
    OAAMkB,
    GACD,
    KACFM,
    SAASN,
    EAAQ,
    KAE1BiB,
    OAAQ,
    SAASjB,
    GACf,
    GAAIlB,
    MAAM
    kB,
    GACR,
    KAAM,
    KACR,
    OAAOkB,
    YAAWlB,
    IAEpBmB,
    UAAW,
    SAAkBnB,
    GAC3B,
    OAAS,
    iBAAiBhC,
    KAAKgC,
    IAEjCoB,
    OAAQ,
    SAASpB,
    GACf,
    MAAO1C,
    GAAMY,
    iBAAiB8B,
    IAEhCqB,
    OAAQ,
    SAASC,
    GACf,
    GAAIC,
    GAA
    Q,
    EAcZ,
    OAXI,
    sBAAsBvD,
    KAAKsD,
    IAG7BC,
    EAAQD,
    EAAOlC,
    QAAQ,
    iBAAkB,
    MAGzCkC,
    EAASA,
    EAAOlC,
    QAAQ,
    GAAItB,
    QAAO,
    WAAayD,
    EAAQ,
    KAAM,
    OAG9DD,
    EAAS,
    IAAMA,
    EAAS,
    IAEnB,
    GAAIxD,
    QAAOwD,
    EA
    AQC,
    KAI9BC,
    iBAAkB,
    SAASC,
    EAAiBzB,
    GAC1C,
    GAAI0B,
    GAAYzG,
    KAAKgE,
    MAAMwC,
    GAAmB,
    SAC9C,
    KA
    AKC,
    EACH,
    KAAM,
    uCAAyCD,
    EAAkB,
    GACnE,
    IAAIE,
    GAAYD,
    EAAU1B,
    EAC1B,
    IAAkB,
    OAAd2B,
    EACF,
    KAA
    A,
    wBAA8BF,
    EAAA,
    MAAqBzB,
    EAAA,
    GACrD,
    OAAO2B,
    IAGTC,
    gBAAiB,
    SAASC,
    EAAQpE,
    GAEhC,
    MADAoE,
    GAAS5G,
    KAAK8E,
    WAAW8B,
    GAAU,
    IAAIC,
    MAAM,
    OACxCD,
    EAAO,
    GAEL3G,
    EAAEkF,
    IAAIyB,
    EAAQ,
    SAAAx
    F,
    GJgBjB,
    MIhB2BA,
    GAAA,
    IAAOoB,
    IAAasE,
    KAAK,
    KAD / C,
    IAIXC,
    WAAY,
    SAASC,
    EAAOC,
    GAE1B,
    GAAI
    C,
    KAKJ,
    OAJAjH,
    GAAEkH,
    KAAKH,
    EAAO,
    SAACI,
    EAAGC,
    GACZJ,
    EAAOK,
    QAAQD,
    QACjBH,
    EAAOxI,
    KAAK
    2 I,
    KAETH,
    GAITK,
    IAAK,
    SAASC,
    GAEZ,
    MAAOvH,
    GAAEwH,
    KAAAjH,
    MAAFP,
    EAAA / C,
    mBAAUsK,
    GAAAE,
    Q
    AAU,
    GAAI,
    OAIjCC,
    aAAc9I,
    OAAO + I,
    QAAU,
    WAC7B,
    GAAI / I,
    GAAS,
    YACb,
    OAAO,
    UAAUlB,
    GACf,
    GAAIu
    B,
    UAAU1B,
    OAAS,
    EACrB,
    KAAMqK,
    OAAM,
    gCAEd,
    IAAwB,
    gBAAblK,
    GACT,
    KAAMmB,
    WAAU,
    6 BAElBD,
    GAA
    OlB,
    UAAYA,
    CACnB,
    IAAIuJ,
    GAAS,
    GAAIrI,
    EAEjB,
    OADAA,
    GAAOlB,
    UAAY,
    KACZuJ,
    MAIXY,
    gBAAiB,
    u
    CCzMfC,
    GAIFvF,
    UAAW,
    gBAGXwF,
    OAAQ,
    0B AGRC,
    SAAU,
    gFAGVC,
    iBAAiB,
    EAKjBC,
    SAAU,
    KAGVC,
    MAAO,
    KAIPC,
    WAAW,
    EAGXC,
    oBAAqB,
    EAGrBC,
    MAAO,
    QAGP / G,
    SAAS,
    EAGTgH,
    oBAAqB,
    QAGrBC,
    WAAY,
    gBAGZ
    C,
    aAAc,
    kBAIdC,
    aAAc,
    SAAUC,
    KAIxBC,
    gBAAiB,
    SAAUD,
    KAG3BE,
    cAAe,
    wCAGfC,
    cAAe,
    aC3DbC,
    EAAO,
    WACThJ,
    KAAKiJ,
    OAAS5G,
    EAAMsB,
    aAGtBqF,
    GAAKrL,
    WACHuL,
    cAAc,
    EAEdC,
    iCAAkC,
    WNgS9B,
    GAAI
    C,
    GAAQpJ,
    KM / RVqJ,
    EAAO,
    WACT,
    GAAIC,
    GAAIrJ,
    EAAEsJ,
    UAGV,
    QAFI,
    IAASH,
    EAAKI,
    kBAChBF,
    EAA
    EG,
    SACGH,
    EAAEI,
    UAAUC,
    UAErB,
    QAAQN,
    EAAMA,
    IAGhBO,
    iBAAkB,
    WAIhB,
    MAHAvH,
    GAAMC,
    KAAKtC,
    K
    AAKuC,
    QAASvC,
    KAAK6J,
    QAAQrH,
    UAAWxC,
    KAAK8J,
    YAClD9J,
    KAAK + J,
    QAAU / J,
    KAAK + J,
    OAAOH,
    kBAC
    7 B5J,
    KAAK + J,
    OAAOH,
    mBACP5J,
    MAGTgK,
    cAAe,
    SAAUC,
    GACvBjK,
    KAAK8J,
    WAAazH,
    EAAMsF,
    aAAa3H,
    KAAK + J,
    OAAOF,
    SACjD7J,
    KAAK6J,
    QAAUxH,
    EAAMsF,
    aAAa3H,
    KAAK8J,
    WAEvC,
    KAAK,
    GAAIxM,
    KAAK2M,
    GACRA,
    EAAY5K,
    eAAe / B,
    KAC7B0C,
    KAAK6J,
    QAAQvM,
    GAAK2M,
    EAAY3M,
    GAElC0C,
    MAAK4J,
    oBAGPM,
    W
    AAY,
    KAMZtI,
    GAAI,
    SAAUjB,
    EAAMR,
    GAClBH,
    KAAKkK,
    WAAalK,
    KAAKkK,
    cACvB,
    IAAIC,
    GAAQnK,
    KAAK
    kK,
    WAAWvJ,
    GAAQX,
    KAAKkK,
    WAAWvJ,
    MAGpD,
    OAFAwJ,
    GAAMzL,
    KAAKyB,
    GAEJH,
    MAIToK,
    UAAW,
    SAASz
    J,
    EAAMR,
    GACxBF,
    EAAEoK,
    SAASrK,
    KAAMW,
    EAAK4D,
    cAAepE,
    IAIvC4B,
    IAAK,
    SAAUpB,
    EAAMR,
    GACnB,
    GAAIgK,
    GAAQnK,
    KAAKkK,
    YAAclK,
    KAAKkK,
    WAAWvJ,
    EAC / C,
    IAAIwJ,
    EACF,
    GAAKhK,
    EAGH,
    IAAK,
    GA
    AI7C,
    GAAI6M,
    EAAM3M,
    OAAQF,
    KACrB6M,
    EAAM7M,
    KAAO6C,
    GACfgK,
    EAAMG,
    OAAOhN,
    EAAG,
    cAJb0C,
    M
    AAKkK,
    WAAWvJ,
    EAO3B,
    OAAOX,
    OAITuK,
    YAAa,
    SAAS5J,
    EAAMR,
    GAC1BF,
    EAAEuK,
    cAAcxK,
    KAAMW,
    EAA
    K4D,
    gBAM7B / C,
    QAAS,
    SAAUb,
    EAAM1B,
    EAAQwL,
    GAC / BxL,
    EAASA,
    GAAUe,
    IACnB,
    IACIkH,
    GADAiD,
    EA
    AQnK,
    KAAKkK,
    YAAclK,
    KAAKkK,
    WAAWvJ,
    EAG / C,
    IAAIwJ,
    EACF,
    IAAK,
    GAAI7M,
    GAAI6M,
    EAAM3M,
    OAA
    QF,
    KAEzB,
    GADA4J,
    EAASiD,
    EAAM7M,
    GAAGgC,
    KAAKL,
    EAAQA,
    EAAQwL,
    GACnCvD,
    KAAW,
    EAAO,
    MAAOA,
    EAGjC,
    QAAIlH,
    KAAK + J,
    QACA / J,
    KAAK + J,
    OAAOvI,
    QAAQb,
    EAAM1B,
    EAAQwL,
    IAK7CC,
    aAAc,
    SAAUtC,
    EAAOuC,
    GAE7B,
    MADAtI,
    GAAMsC,
    SAAS,
    4 DACR3E,
    KAAK4K,
    WAAWxC,
    MAAAA,
    EAAOuC,
    MAAAA,
    KAGhCE,
    aAAc,
    WACZ,
    MAAO7K,
    MAAK6J,
    QAAQ1B,
    SAClBlI,
    EAAED,
    KAAK + J,
    OAAOxH,
    QAAQuI,
    iBAAA,
    IAAqB9K,
    KAAK6J,
    QAAQrH,
    UAAA,
    aAAsBxC,
    KAAK6J,
    QAAQ1B,
    SAAA,
    OAC3FnI,
    KAAK + K,
    UCtGX,
    IAAIC,
    GAA0B,
    S
    AASjG,
    EAAQvH,
    GAC7C,
    GAAIyN,
    GAAIlG,
    EAAOX,
    MAAM,
    mBACrB,
    KAAK6G,
    EACH,
    KAAM,
    iCAAmClG,
    EAA
    S,
    GACpD,
    IAAImG,
    GAASD,
    EAAE,
    GAAGpE,
    MAAM,
    KAAK1B,
    IAAI9C,
    EAAMyC,
    WACvC,
    IAAIoG,
    EAAO1N,
    S
    AAWA,
    EACpB,
    KAAM,
    mBAAqB0N,
    EAAO1N,
    OAAS,
    gBAAkBA,
    EAAS,
    aACxE,
    OAAO0N,
    IAGLC,
    EAAgC,
    SAASC,
    EAAiBrG,
    EAAQsG,
    GACpE,
    GAAIC,
    GAAO,
    KACPC,
    IACJ,
    KAAK,
    GAAInM,
    KAAOgM,
    GACd,
    GAAIhM,
    EAAK,
    CACP,
    GAAIT,
    GAAQ0M,
    EAAkBjM,
    EAC1B,
    iBAAoBT,
    KACtBA,
    EAAQ0D,
    EAAMkE,
    iBAAiB6E,
    EAAgBhM,
    GA
    AMT,
    IACvD4M,
    EAAMnM,
    GAAOT,
    MAEb2M,
    GAAOjJ,
    EAAMkE,
    iBAAiB6E,
    EAAgBhM,
    GAAM2F,
    EAGxD,
    QAAQ
    uG,
    EAAMC,
    IAKZC,
    EAAY,
    SAASC,
    GACvBxL,
    EAAEyL,
    QAAO,
    EAAM1L,
    KAAMyL,
    GAGvBD,
    GAAU7N,
    WAERgO,
    SAAU,
    SAAShN,
    EAAOiN,
    GACxB,
    GAAI5L,
    KAAKG,
    GAIP,
    MAFIjB,
    WAAU1B,
    OAAS,
    IACrBoO,
    KAAyBhO,
    M
    AAM0B,
    KAAKJ,
    UAAW,
    OAC1Cc,
    KAAKG,
    GAAGxB,
    EAAOiN,
    EAGxB,
    IAAIxO,
    MAAMC,
    QAAQsB,
    GAAQ,
    CACxB,
    IAAKqB,
    KAAK6L,
    iBACR,
    KAAM,
    cAAgB7L,
    KAAKW,
    KAAO,
    mCACpC,
    OAAOX,
    MAAK6L,
    iBAAArL,
    MAALR,
    K
    AAyBd,
    WAEhC,
    GAAI4M,
    GAAW5M,
    UAAUA,
    UAAU1B,
    OAAS,
    EAC5C,
    IAAIwC,
    KAAK + L,
    cAAgBD,
    EAASE,
    eAE
    hC,
    MADA9M,
    WAAU,
    GAAKmD,
    EAAM2B,
    MAAMgB,
    KAAK9F,
    UAAU,
    IACrB,
    OAAjBA,
    UAAU,
    IAEPc,
    KAAK + L,
    a
    AAAvL,
    MAALR,
    KAAqBd,
    UAE9B,
    IAAIc,
    KAAKiM,
    eACP,
    OAAIpI,
    MAAMlF,
    KAEVO,
    UAAU,
    GAAK + G,
    WAAW /
    G,
    UAAU,
    IAC7Bc,
    KAAKiM,
    eAAAzL,
    MAALR,
    KAAuBd,
    WAEhC,
    IAAIc,
    KAAKkM,
    eACP,
    MAAOlM,
    MAAKkM,
    e
    AAA1L,
    MAALR,
    KAAuBd,
    UAEhC,
    MAAM,
    cAAgBc,
    KAAKW,
    KAAO,
    kCAMtCwL,
    kBAAmB,
    SAASC,
    EAAcf,
    GACx
    C,
    GAAI,
    gBAAoBe,
    GAGtB,
    MAAOhP,
    OAAMC,
    QAAQ + O,
    GAAgBA,
    GAAgBA,
    EAEvD,
    IAAIC,
    GAAOrM,
    KAAKwG,
    eAChB,
    IAAIpJ,
    MAAMC,
    QAAQgP,
    GAAO,
    CAEvB,
    IAAK,
    GADDnB,
    GAASF,
    EAAwBoB,
    EAAcC,
    EAAK7O,
    QAC /
    CF,
    EAAI,
    EAAGA,
    EAAI4N,
    EAAO1N,
    OAAQF,
    IACjC4N,
    EAAO5N,
    GAAK + E,
    EAAMkE,
    iBAAiB8F,
    EAAK / O,
    GAAI4N,
    EAAO5N,
    GACrD,
    OAAO4N,
    GACF,
    MAAIjL,
    GAAEqM,
    cAAcD,
    GAClBlB,
    EAA8BkB,
    EAAMD,
    EAAcf,
    IAEjDhJ,
    EAAMkE,
    iBAAiB8F,
    EAAMD,
    KAIzC5F,
    gBAAiB,
    SAEjB + F,
    SAAU,
    ECxFZ,
    IAAIC,
    GAAoB,
    SAAU
    C,
    EAAYC,
    GAC5C1M,
    KAAK2M,
    UAAY,
    oBAGjB3M,
    KAAK4M,
    OAAS,
    KAEd5M,
    KAAK6M,
    KAAKJ,
    MAAkBC,
    QAG1
    BI,
    GACFC,
    MAAO,
    o4BAGP / G,
    OAAQ,
    +BAERD,
    QAAS,
    UAETiH,
    OAAQ,
    QAERC,
    SAAU,
    SAEVjI,
    MACEjC,
    KAA
    M,
    SAAApE,
    GR2dF,
    MQ3duC,
    QAA5B0D,
    EAAM2B,
    MAAMgB,
    KAAKrG,
    KAGlCuO,
    IAAK,
    GAAIrK,
    QACL,
    qWA +
    BK,
    KAGXiK,
    GAAYK,
    MAAQL,
    EAAY9G,
    MAGhC,
    IAAIoH,
    GAAgB,
    SAAAxJ,
    GAClB,
    GAAIQ,
    IAAS,
    GAAKR,
    GA
    AKQ,
    MAAM,
    mCAC7B,
    OAAKA,
    GACEiJ,
    KAAKC,
    IACP,
    GAEClJ,
    EAAM,
    GAAKA,
    EAAM,
    GAAG5G,
    OAAS,
    IAE7B
    4 G,
    EAAM,
    IAAMA,
    EAAM,
    GAAK,
    IANR,
    GAtEvBmJ,
    EAgFqB,
    SAAClB,
    EAAM / L,
    GRsdxB,
    MQtdiCA,
    GAAK6E,
    IAAI9C,
    EAAM2B,
    MAAMqI,
    KAhF1DmB,
    EAkF0B,
    SAACnB,
    EAAMoB,
    GAC / B,
    MAAO,
    UAAC9O,
    GRwdJ,
    IAAK,
    GAAI + O,
    GAAOxO,
    UAAU1B,
    OQxdZmQ,
    EAAAvQ,
    MAAAsQ,
    EAAA,
    EAAAA,
    EAAA,
    EAAA,
    GAAAE,
    EAAA,
    EAAA
    A,
    EAAAF,
    EAAAE,
    IAAAD,
    EAAAC,
    EAAA,
    GAAA1O,
    UAAA0O,
    EAEhB,
    OADAD,
    GAAqBE,
    MACdJ,
    EAAAjN,
    MAA
    ArC,
    QAASQ,
    GAAA + I,
    OAAAxK,
    mBArFpBqQ,
    EAqF6ClB,
    EAAMsB,
    QArFnDG,
    EAyFyB,
    SAAAL,
    GR4drB,
    OQ
    3 dF1B,
    aA1FFyB,
    EA0FoC,
    OAAQC,
    GAC1CxB,
    eA3FFuB,
    EA2FsC,
    SAAUC,
    GAC9CjH,
    gBAAiBiH,
    EAASjQ,
    QAAU,
    EAAI,
    UAAY,
    SAAU,
    UAC9D + O,
    SAAU,
    IAGZC,
    GAAkB7O,
    WAChBkP,
    KAAM,
    SAAUJ,
    EAAYC,
    GAC1B1M,
    KAAK0M,
    QAAUA,
    EAEf1M,
    KAAKyM,
    WAAa1N,
    YAAkBiB,
    KAAKyM,
    WAEzC,
    KAAK,
    GAAI9L,
    KAAQ8L,
    GACfzM,
    KAAK + N,
    aAAapN,
    EAAM8L,
    EAAW9L,
    GAAMR,
    GAAIsM,
    EAAW9L,
    GAAM4L,
    SAEhErL,
    QAAO8M,
    QAAQxM,
    QA
    AQ,
    2 BAIzByM,
    UAAW,
    SAAUrB,
    GACnB,
    GAAI,
    mBAAuB5M,
    MAAK0M,
    QAAQE,
    GACtC,
    KAAM,
    IAAI / E,
    OAAM +
    E,
    EAAS,
    mCAI3B,
    OAFA5M,
    MAAK4M,
    OAASA,
    EAEP5M,
    MAITkO,
    WAAY,
    SAAUtB,
    EAAQuB,
    EAAUC,
    GAItC,
    M
    AHI,
    gBAAoBD,
    KACtBnO,
    KAAK0M,
    QAAQE,
    GAAUuB,
    IAErB,
    IAASC,
    EACJpO,
    KAAKiO,
    UAAUrB,
    GAEjB5M,
    MAITqO,
    WAAY,
    SAAUzB,
    EAAQjM,
    EAAM2N,
    GAMlC,
    MALI,
    mBAAuBtO,
    MAAK0M,
    QAAQE,
    KACtC5M,
    KAAK0
    M,
    QAAQE,
    OAEf5M,
    KAAK0M,
    QAAQE,
    GAAQjM,
    GAAQ2N,
    EAEtBtO,
    MAITuO,
    YAAa,
    SAAU3B,
    EAAQ4B,
    GAC7
    B,
    IAAK,
    GAAI7N,
    KAAQ6N,
    GACfxO,
    KAAKqO,
    WAAWzB,
    EAAQjM,
    EAAM6N,
    EAAkB7N,
    GAElD,
    OAAOX,
    OAiB
    T + N,
    aAAc,
    SAAUpN,
    EAAM8N,
    EAAMC,
    GAClC,
    GAAI1O,
    KAAKyM,
    WAAW9L,
    GAClB0B,
    EAAMmC,
    KAAK,
    cAAg
    B7D,
    EAAO,
    6 BAC / B,
    IAAIoH,
    EAAS1I,
    eAAesB,
    GAE / B,
    WADA0B,
    GAAMmC,
    KAAK,
    IAAM7D,
    EAAO,
    +DAG1B,
    OAAOX,
    MAAK2O,
    cAAAnO,
    MAALR,
    KAAsBd,
    YAG / B0P,
    aAAc,
    SAAUjO,
    GACtB,
    QAASX,
    KAAKyM,
    WAAW9L,
    IAG3BkO,
    gBAAiB,
    SAAUlO,
    EAAM8N,
    EAAMC,
    GACrC,
    MAAK1O,
    MAAKyM,
    WAAW9L,
    GAIdX,
    KAAK2O,
    cAAAn
    O,
    MAALR,
    KAAsBd,
    YAH3BmD,
    EAAMmC,
    KAAK,
    cAAgB7D,
    EAAO,
    6 BAC3BX,
    KAAK + N,
    aAAAvN,
    MAALR,
    KAAq
    Bd,
    aAKhC4P,
    gBAAiB,
    SAAUnO,
    GAMzB,
    MALKX,
    MAAKyM,
    WAAW9L,
    IACnB0B,
    EAAMmC,
    KAAK,
    cAAgB7D,
    E
    AAO,
    2 BAE7BX,
    MAAKyM,
    WAAW9L,
    GAEhBX,
    MAGT2O,
    cAAe,
    SAAUhO,
    EAAMoO,
    EAAWxC,
    GACpC,
    gBAAoBwC,
    KAEtBA,
    GACE5O,
    GAAI4O,
    EACJxC,
    SAAUA,
    IAGTwC,
    EAAUpD,
    WACboD,
    EAAY,
    GAAIvD,
    GAAUuD,
    IAE5B /
    O,
    KAAKyM,
    WAAW9L,
    GAAQoO,
    CAExB,
    KAAK,
    GAAInC,
    KAAUmC,
    GAAUZ,
    aAC3BnO,
    KAAKqO,
    WAAWzB,
    EAA
    QjM,
    EAAMoO,
    EAAUZ,
    SAASvB,
    GAEnD,
    OAAO5M,
    OAGTgP,
    gBAAiB,
    SAAUC,
    GACzB,
    GAAIX,
    EAGJ,
    IAAI,
    S
    AAWW,
    EAAWtO,
    KAAM,
    CAC9B,
    GAAIuO,
    GAAelP,
    KAAK0M,
    QAAQ1M,
    KAAK4M,
    QAAQqC,
    EAAWtO,
    SACxD2N,
    GAAUY,
    EAAaD,
    EAAW7C,
    kBAElCkC,
    GAAUtO,
    KAAKmP,
    cAAcnP,
    KAAK0M,
    QAAQ1M,
    KAAK4M,
    QAAQqC,
    EAA
    WtO,
    MAAOsO,
    EAAW7C,
    aAEtF,
    OAAOkC,
    IAAWtO,
    KAAK0M,
    QAAQ1M,
    KAAK4M,
    QAAQwC,
    gBAAkBpP,
    KAAK0
    M,
    QAAQ2C,
    GAAGD,
    gBAIhFD,
    cAAe,
    SAAUpK,
    EAAQuK,
    GAC / B,
    GAAI,
    gBAAoBA,
    GAAY,
    CAClC,
    IAAK,
    GAA
    IhS,
    KAAKgS,
    GACZvK,
    EAAS / E,
    KAAKmP,
    cAAcpK,
    EAAQuK,
    EAAWhS,
    GAEjD,
    OAAOyH,
    GAGT,
    MAAO,
    gBAA
    oBA,
    GAASA,
    EAAOZ,
    QAAQ,
    MAAOmL,
    GAAc,
    IAU1E7C,
    YACE8C,
    UACErD,
    eAAgB,
    SAASvN,
    GACvB,
    MAAO,
    K
    AAKoE,
    KAAKpE,
    IAEnB4N,
    SAAU,
    GAEZiD,
    UACE3D,
    iBAAkB,
    SAASX,
    GACzB,
    MAAOA,
    GAAO1N,
    OAAS,
    GAE
    zB0O,
    eAAgB,
    SAASvN,
    GACvB,
    MAAO,
    KAAKoE,
    KAAKpE,
    IAEnB4N,
    SAAU,
    KAEZF,
    MACEH,
    eAAgB,
    SAASvN,
    EAAO0N,
    GRod5B,
    GAAIoD,
    GAAOvQ,
    UAAU1B,
    QAAU,
    GAAsBW,
    SAAjBe,
    UAAU,
    MQpdeA,
    UAAA,
    GRsdzDwQ,
    EAAYD,
    EQtdmBE,
    KAAAA,
    EAAAxR,
    SAAAuR,
    EAAO,
    MAAAA,
    ERwdtCE,
    EAAYH,
    EQxdiCI,
    KAAAA,
    EAAA1R,
    SAAAyR,
    EAAO,
    EAAAA,
    EACtDE,
    EAAShD,
    EAAYT,
    EACzB,
    KAAKyD,
    EACH,
    KAAM,
    IAAIjI,
    OAAM,
    mBAAqB
    wE,
    EAAO,
    qBAE9C,
    KAAKyD,
    EAAO / M,
    KAAKpE,
    GACf,
    OAAO,
    CACT,
    IAAI,
    WAAa0N,
    IACV,
    SAAStJ,
    KAAK4
    M,
    GAAQ,
    IAAK,
    CAC9B,
    GAAII,
    GAAKjM,
    OAAOnF,
    GACZqR,
    EAAW3C,
    KAAKC,
    IAAIF,
    EAAcuC,
    GAAOvC,
    EA
    AcyC,
    GAC3D,
    IAAIzC,
    EAAc2C,
    GAAMC,
    EACtB,
    OAAO,
    CAET,
    IAAIC,
    GAAQ,
    SAAAC,
    GR0dR,
    MQ1da7C,
    MA
    AK8C,
    MAAMD,
    EAAI7C,
    KAAK + C,
    IAAI,
    GAAIJ,
    IAC7C,
    KAAKC,
    EAAMF,
    GAAME,
    EAAMJ,
    IAASI,
    EAAMN,
    IA
    AS,
    EAC7C,
    OAAO,
    EAGb,
    OAAO,
    GAETnJ,
    iBACE6J,
    GAAI,
    SACJV,
    KAAM,
    SACNE,
    KAAM,
    UAERtD,
    SAAU,
    KA
    EZ + D,
    SACEpE,
    eAAgB,
    SAASvN,
    EAAOyH,
    GAC9B,
    MAAOA,
    GAAOrD,
    KAAKpE,
    IAErB6H,
    gBAAiB,
    SACjB + F,
    SAAU,
    IAEZgE,
    WACErE,
    eAAgB,
    SAAUvN,
    EAAO6R,
    GAC / B,
    MAAO7R,
    GAAMnB,
    QAAUgT,
    GAEzBhK,
    gBAAi
    B,
    UACjB + F,
    SAAU,
    IAEZkE,
    WACEvE,
    eAAgB,
    SAAUvN,
    EAAO6R,
    GAC / B,
    MAAO7R,
    GAAMnB,
    QAAUgT,
    GAEz
    BhK,
    gBAAiB,
    UACjB + F,
    SAAU,
    IAEZ / O,
    QACE0O,
    eAAgB,
    SAAUvN,
    EAAO + R,
    EAAKpD,
    GACpC,
    MAAO3O,
    GA
    AMnB,
    QAAUkT,
    GAAO / R,
    EAAMnB,
    QAAU8P,
    GAEhD9G,
    iBAAkB,
    UAAW,
    WAC7B + F,
    SAAU,
    IAEZoE,
    UACE9E,
    iBAAkB,
    SAAUX,
    EAAQsF,
    GAClC,
    MAAOtF,
    GAAO1N,
    QAAUgT,
    GAE1BhK,
    gBAAiB,
    UACjB + F,
    SAAU,
    IAEZq
    E,
    UACE / E,
    iBAAkB,
    SAAUX,
    EAAQsF,
    GAClC,
    MAAOtF,
    GAAO1N,
    QAAUgT,
    GAE1BhK,
    gBAAiB,
    UACjB + F,
    S
    AAU,
    IAEZsE,
    OACEhF,
    iBAAkB,
    SAAUX,
    EAAQwF,
    EAAKpD,
    GACvC,
    MAAOpC,
    GAAO1N,
    QAAUkT,
    GAAOxF,
    E
    AAO1N,
    QAAU8P,
    GAElD9G,
    iBAAkB,
    UAAW,
    WAC7B + F,
    SAAU,
    IAEZmE,
    IAjVJ5C,
    EAiV4B,
    SAACnP,
    EAAO6
    R,
    GR2d5B,
    MQ3d4C7R,
    IAAS6R,
    IACzDlD,
    IAlVJQ,
    EAkV4B,
    SAACnP,
    EAAO6R,
    GR6d5B,
    MQ7d4C7R,
    IAA
    S6R,
    IACzDrD,
    MAnVJW,
    EAmV8B,
    SAACnP,
    EAAO + R,
    EAAKpD,
    GR + dnC,
    MQ / d2C3O,
    IAAS + R,
    GAAO / R,
    GAA
    S2O,
    IACxEwD,
    SACE5E,
    eAAgB,
    SAAUvN,
    EAAOoS,
    GAC / B,
    GAAIC,
    GAAa / Q,
    EAAE8Q,
    EACnB,
    OAAIC,
    GAA
    WxT,
    OACNmB,
    IAAUqS,
    EAAWC,
    MAErBtS,
    IAAUoS,
    GAErBxE,
    SAAU,
    MCzVhB,
    IAAI2E,
    MAEAC,
    EAAc,
    QAA
    dA,
    GAAwBC,
    EAAWC,
    EAAWC,
    GAIhD,
    IAAK,
    GAHDC,
    MACAC,
    KAEKlU,
    EAAI,
    EAAGA,
    EAAI8T,
    EAAU5T,
    OAA
    QF,
    IAAK,
    CAGzC,
    IAAK,
    GAFDmU,
    IAAQ,
    EAEHC,
    EAAI,
    EAAGA,
    EAAIL,
    EAAU7T,
    OAAQkU,
    IACpC,
    GAAIN,
    EAAU9T,
    GAAGqU,
    OAAOhR,
    OAAS0Q,
    EAAUK,
    GAAGC,
    OAAOhR,
    KAAM,
    CACzD8Q,
    GAAQ,
    CACR,
    OAGAA,
    EACF
    D,
    EAAK9S,
    KAAK0S,
    EAAU9T,
    IAEpBiU,
    EAAM7S,
    KAAK0S,
    EAAU9T,
    IAGzB,
    OACEkU,
    KAAMA,
    EACND,
    MAA
    OA,
    EACPK,
    QAAUN,
    KAAOH,
    EAAYE,
    EAAWD,
    GAAW,
    GAAMG,
    OAI7DL,
    GAAGW,
    MAEDC,
    mBAAoB,
    WTwzBhB,
    GA
    AIC,
    GAAS / R,
    ISvzBfA,
    MAAK + K,
    SAASnJ,
    GAAG,
    iBAAkB,
    SAAAR,
    GAAS2Q,
    EAAKC,
    iBAAiB5Q,
    KAClEpB,
    KAAK + K,
    SAASnJ,
    GAAG,
    gBAAiBS,
    EAAMyF,
    gBAAiB,
    SAAA1G,
    GAAS2Q,
    EAAKE,
    eAAe7Q,
    MAGlF,
    IAAUp
    B,
    KAAK6J,
    QAAQxB,
    WAG3BrI,
    KAAKuC,
    QAAQe,
    aAAa,
    aAAc,
    KAG1CiF,
    MAAO,
    WAGL,
    GAFAvI,
    KAAKkS,
    c
    AAgB,
    MAEjB,
    IAASlS,
    KAAKwJ,
    kBAAoB,
    SAAWxJ,
    KAAK6J,
    QAAQtB,
    MAC5D,
    MAAO,
    KAET,
    KAAK,
    GAAIjL,
    GAAI,
    EAAGA,
    EAAI0C,
    KAAKmS,
    OAAO3U,
    OAAQF,
    IAAK,
    CAC3C,
    GAAI8U,
    GAAQpS,
    KAAKmS,
    OAAO7U,
    EA
    CxB,
    KAAI,
    IAAS8U,
    EAAM5I,
    kBAAoB4I,
    EAAM5I,
    iBAAiBhM,
    OAAS,
    GAAK,
    mBAAuB4U,
    GAAMvI,
    QAAQwI,
    UAC / GrS,
    KAAKkS,
    cAAgBE,
    EAAMrH,
    SACvB,
    UAAY / K,
    KAAK6J,
    QAAQtB,
    OAC3B,
    MAIN,
    MAAI,
    QAASvI,
    KAAKkS,
    cACT,
    KAEFlS,
    KAAKkS,
    cAAc3J,
    SAG5B + J,
    WAAY,
    WAEVtS,
    KAAK + K,
    SAAShJ,
    IAAI,
    cAKtBmP,
    EAAGtI,
    OAED2J,
    UAAW,
    WAIT,
    GAHAvS,
    KAAKwS,
    WAGAxS,
    KAAKyS,
    IAAV,
    CAIA,
    GAAIC,
    GAAOvB,
    EAAYn
    R,
    KAAKwJ,
    iBAAkBxJ,
    KAAKyS,
    IAAIE,
    qBAGvD3S,
    MAAKyS,
    IAAIE,
    qBAAuB3S,
    KAAKwJ,
    iBAGrCxJ,
    KA
    AK4S,
    qBAGL5S,
    KAAK6S,
    sBAAsBH,
    GAG3B1S,
    KAAK8R,
    sBAGAY,
    EAAKlB,
    KAAKhU,
    SAAUkV,
    EAAKnB,
    MA
    AM / T,
    QAAYwC,
    KAAK8S,
    cACnD9S,
    KAAK8S,
    aAAc,
    EACnB9S,
    KAAK8R,
    wBAKTiB,
    kBAAmB,
    WAEjB,
    IAAI,
    IAAS / S,
    KAAKwJ,
    iBAChB,
    QAIF,
    KAAK,
    GAFD2E,
    MAEK7Q,
    EAAI,
    EAAGA,
    EAAI0C,
    KAAKwJ,
    iBAAiBhM,
    O
    AAQF,
    IAChD6Q,
    EAASzP,
    KAAKsB,
    KAAKwJ,
    iBAAiBlM,
    GAAG0V,
    cACtChT,
    KAAKiT,
    iBAAiBjT,
    KAAKwJ,
    iBAAiBlM,
    GAAGqU,
    QAElD,
    OAAOxD,
    IAIT + E,
    SAAU,
    SAAUvS,
    GTszBhB,
    GAAIwS,
    GAAQjU,
    UAAU1B,
    QA
    AU,
    GAAsBW,
    SAAjBe,
    UAAU,
    MStzBeA,
    UAAA,
    GAAvCoP,
    EAAA6E,
    EAAA7E,
    QAASqD,
    EAAAwB,
    EAAAxB,
    OT
    0 zB5ByB,
    EAAoBD,
    ES1zBgBE,
    YAAAA,
    EAAAlV,
    SAAAiV,
    GAAcA,
    CACxDpT,
    MAAKwS,
    WACLxS,
    KAAKsT,
    U
    AAU3S,
    GAAO2N,
    QAAAA,
    EAASqD,
    OAAAA,
    IAE3B0B,
    GACFrT,
    KAAKuT,
    eAITC,
    YAAa,
    SAAU7S,
    GT4zBnB,
    GAAI8S,
    GAAQvU,
    UAAU1B,
    QAAU,
    GAAsBW,
    SAAjBe,
    UAAU,
    MS5zBkBA,
    UAAA,
    GAAvCoP,
    EAAAmF,
    EAAAnF,
    QAASqD,
    EAAA8B,
    EAAA9B,
    OTg0B / B + B,
    EAAoBD,
    ESh0BmBJ,
    YAAAA,
    EAAAlV,
    SAAAuV,
    GAAcA,
    CAC3D1
    T,
    MAAKwS,
    WACLxS,
    KAAK2T,
    aAAahT,
    GAAO2N,
    QAAAA,
    EAASqD,
    OAAAA,
    IAE9B0B,
    GACFrT,
    KAAKuT,
    eA
    ITK,
    YAAa,
    SAAUjT,
    GTk0BnB,
    GAAIkT,
    GAAQ3U,
    UAAU1B,
    QAAU,
    GAAsBW,
    SAAjBe,
    UAAU,
    MSl0BCA,
    UAA
    A,
    GTo0B5C4U,
    EAAoBD,
    ESp0BER,
    YAAAA,
    EAAAlV,
    SAAA2V,
    GAAcA,
    CAC1C9T,
    MAAKwS,
    WACLxS,
    KAAK +
    T,
    aAAapT,
    GAId0S,
    GACFrT,
    KAAK4S,
    sBAGTA,
    mBAAoB,
    WACd5S,
    KAAKgU,
    kBAAoBhU,
    KAAKiU,
    oBAAqB,
    IAASjU,
    KAAKwJ,
    iBACnExJ,
    KAAKkU,
    gBACElU,
    KAAKwJ,
    iBAAiBhM,
    OAAS,
    EACtCwC,
    KAAKuT,
    cAELv
    T,
    KAAKmU,
    eAGTtB,
    sBAAuB,
    SAAUH,
    GAC / B,
    GAAI,
    mBAAuB1S,
    MAAK6J,
    QAAQuK,
    uBAAxC,
    CAIA,
    GAAI,
    mBAAuBpU,
    MAAK6J,
    QAAQmJ,
    aACtC,
    MAAKN,
    GAAKnB,
    MAAM / T,
    QAAUkV,
    EAAKlB,
    KAAKhU,
    QAClCwC,
    KA
    AKqU,
    sBAED,
    IAAMrU,
    KAAKyS,
    IAAI6B,
    eAAeC,
    KAAK,
    iCAAiC / W,
    QACtEwC,
    KAAKyS,
    IAAI6B,
    eACNE,
    OACCvU,
    EAAED,
    KAAK6J,
    QAAQd,
    eACd0L,
    SAAS,
    iCAGTzU,
    KAAKyS,
    IAAI6B,
    eACbG,
    SAAS,
    UACTF,
    KAA
    K,
    iCACLG,
    KAAK1U,
    KAAK6J,
    QAAQmJ,
    eAGhBhT,
    KAAKyS,
    IAAI6B,
    eACbK,
    YAAY,
    UACZJ,
    KAAK,
    iCACLt
    N,
    QAIL,
    KAAK,
    GAAI3J,
    GAAI,
    EAAGA,
    EAAIoV,
    EAAKd,
    QAAQpU,
    OAAQF,
    IACvC0C,
    KAAK + T,
    aAAarB,
    EA
    AKd,
    QAAQtU,
    GAAGqU,
    OAAOhR,
    KAE3C,
    KAAKrD,
    EAAI,
    EAAGA,
    EAAIoV,
    EAAKnB,
    MAAM / T,
    OAAQF,
    IACj
    C0C,
    KAAKsT,
    UAAUZ,
    EAAKnB,
    MAAMjU,
    GAAGqU,
    OAAOhR,
    MAAO2N,
    QAASoE,
    EAAKnB,
    MAAMjU,
    GAAG0V,
    aAAcrB,
    OAAQe,
    EAAKnB,
    MAAMjU,
    GAAGqU,
    QAExG,
    KAAKrU,
    EAAI,
    EAAGA,
    EAAIoV,
    EAAKlB,
    KAAKhU,
    O
    AAQF,
    IAChC0C,
    KAAK2T,
    aAAajB,
    EAAKlB,
    KAAKlU,
    GAAGqU,
    OAAOhR,
    MAAO2N,
    QAASoE,
    EAAKlB,
    KAAK
    lU,
    GAAG0V,
    aAAcrB,
    OAAQe,
    EAAKlB,
    KAAKlU,
    GAAGqU,
    WAI1G2B,
    UAAW,
    SAAU3S,
    EAAMiU,
    GTizBvB,
    G
    SjzBwBtG,
    GAADsG,
    EAACtG,
    QAASqD,
    EAAViD,
    EAAUjD,
    MACnC3R,
    MAAKqU,
    sBACLrU,
    KAAKyS,
    IAAI6B,
    eACNG,
    SAAS,
    UACTD,
    OACCvU,
    EAAED,
    KAAK6J,
    QAAQd,
    eACd0L,
    SAAS,
    WAAa9T,
    GACtB + T,
    KAAKpG,
    GA
    AWtO,
    KAAKiT,
    iBAAiBtB,
    MAI7CgC,
    aAAc,
    SAAUhT,
    EAAMkU,
    GT8yB1B,
    GS9yB2BvG,
    GAADuG,
    EAACvG,
    QAASqD,
    EAAVkD,
    EAAUlD,
    MACtC3R,
    MAAKyS,
    IAAI6B,
    eACNG,
    SAAS,
    UACTF,
    KAAK,
    YAAc5T,
    GACnB + T,
    KAAKpG,
    GAAWtO,
    KAAKiT,
    iBAAiBtB,
    KAG3CoC,
    aAAc,
    SAAUpT,
    GACtBX,
    KAAKyS,
    IAAI6B,
    eACNK,
    YAA
    Y,
    UACZJ,
    KAAK,
    YAAc5T,
    GACnBsG,
    UAGLgM,
    iBAAkB,
    SAAUhE,
    GAC1B,
    GAAI6F,
    GAA + B7F,
    EAAWtO,
    KAA
    O,
    SAErD,
    OAAI,
    mBAAuBX,
    MAAK6J,
    QAAQiL,
    GAC / B5T,
    OAAO8M,
    QAAQmB,
    cAAcnP,
    KAAK6J,
    QAAQiL,
    GA
    A + B7F,
    EAAW7C,
    cAEtFlL,
    OAAO8M,
    QAAQgB,
    gBAAgBC,
    IAGxCuD,
    SAAU,
    WAER,
    IAAIxS,
    KAAKyS,
    MAAO,
    IAAUzS,
    KAAK6J,
    QAAQxB,
    UAAvC,
    CAGA,
    GAAIoK,
    KAGJzS,
    MAAKuC,
    QAAQe,
    aAAatD,
    KAAK6J,
    QAAQrH,
    UAAY,
    KAAMxC,
    KAAKiJ,
    QAI9DwJ,
    EAAIsC,
    mBAAqB / U,
    KAAKgV,
    sBAG9BvC,
    EAAIwC,
    gBAAkB,
    eAAiBjV,
    KAAK6J,
    QAAQ1B,
    SAAW,
    YAAcnI,
    KAAK6J,
    QAAQ1B,
    SAAWnI,
    KAAKiJ,
    QAC1GwJ,
    EAAI6B,
    eAAiBrU,
    EA
    AED,
    KAAK6J,
    QAAQf,
    eAAexG,
    KAAK,
    KAAMmQ,
    EAAIwC,
    iBAGlExC,
    EAAIE,
    wBACJF,
    EAAIyC,
    8 BAA + B,
    E
    AGnClV,
    KAAKyS,
    IAAMA,
    IAIbuC,
    oBAAqB,
    WAEnB,
    GAAI,
    gBAAoBhV,
    MAAK6J,
    QAAQlB,
    cAAgB1I,
    EAAE
    D,
    KAAK6J,
    QAAQlB,
    cAAcnL,
    OAChF,
    MAAOyC,
    GAAED,
    KAAK6J,
    QAAQlB,
    aAGxB,
    IAAIwM,
    GAAmBnV,
    KAA
    K6J,
    QAAQlB,
    YAMpC,
    IAHI,
    gBAAoB3I,
    MAAK6J,
    QAAQlB,
    cAAgB,
    kBAAsBzH,
    QAAOlB,
    KAAK6J,
    QAAQlB,
    gBAC7FwM,
    EAAmBjU,
    OAAOlB,
    KAAK6J,
    QAAQlB,
    eAErC,
    kBAAsBwM,
    GAAkB,
    CAC1C,
    GAAIC,
    GAAWD,
    EA
    AiB7V,
    KAAKU,
    KAAMA,
    KAG3C,
    IAAI,
    mBAAuBoV,
    IAAYA,
    EAAS5X,
    OAC9C,
    MAAO4X,
    OACJ,
    CAAA,
    GAAI,
    g
    BAAoBD,
    IAAoBA,
    YAA4BpV,
    SAAUoV,
    EAAiB3X,
    OACxG,
    MAAO2X,
    EACEA,
    IACT9S,
    EAAMmC,
    KAAK,
    sBAAw
    B2Q,
    EAAmB,
    uDAGxD,
    MAAOnV,
    MAAKqV,
    gBAGdA,
    aAAc,
    WAEZ,
    MAAKrV,
    MAAK6J,
    QAAQ1B,
    UAAsC,
    WAA1B
    nI,
    KAAKuC,
    QAAQ + S,
    SAIpCtV,
    KAAK + K,
    SAAShB,
    SAHZ / J,
    KAAK + K,
    UAMhBsJ,
    oBAAqB,
    WACnB,
    GAAIkB,
    GAAmBvV,
    KAAK6J,
    QAAQhB,
    eAGpC,
    IAAI,
    IAAM7I,
    KAAKyS,
    IAAI6B,
    eAAevK,
    SAASvM,
    OACzC,
    MAAOw
    C,
    MAAKyS,
    IAAI6B,
    eAAevK,
    QAEjC,
    IAAI,
    gBAAoBwL,
    GAAkB,
    CACxC,
    GAAItV,
    EAAEsV,
    GAAkB / X,
    OAC
    tB,
    MAAOyC,
    GAAEsV,
    GAAkBf,
    OAAOxU,
    KAAKyS,
    IAAI6B,
    eACpC,
    mBAAsBpT,
    QAAOqU,
    GACpCA,
    EAAmBr
    U,
    OAAOqU,
    GAE1BlT,
    EAAMmC,
    KAAK,
    yBAA2B + Q,
    EAAmB,
    uDAM7D,
    MAHI,
    kBAAsBA,
    KACxBA,
    EAAmBA,
    EA
    AiBjW,
    KAAKU,
    KAAMA,
    OAE7C,
    gBAAoBuV,
    IAAoBA,
    EAAiB / X,
    OACpD + X,
    EAAiBf,
    OAAOxU,
    KAAKyS,
    IAA
    I6B,
    gBAEnCtU,
    KAAKqV,
    eAAeG,
    MAAMxV,
    KAAKyS,
    IAAI6B,
    iBAG5CxC,
    mBAAoB,
    WT6xBhB,
    GS3xBEtQ,
    GT2xBEiU,
    EAASzV,
    KS5xBX0V,
    EAAU1V,
    KAAK6K,
    cAInB6K,
    GAAQ3T,
    IAAI,
    YACR / B,
    KAAK8S,
    YACP4C,
    EAAQ9T,
    GAAGS,
    EAAMsE,
    gBAAgB3G,
    KAAK6J,
    QAAQrB,
    oBAAqB,
    WAAY,
    WAC7EiN,
    EAAKE,
    uBAEAnU,
    EAA
    Ua,
    EAAMsE,
    gBAAgB3G,
    KAAK6J,
    QAAQrI,
    QAAS,
    aAC7DkU,
    EAAQ9T,
    GAAGJ,
    EAAS,
    SAAAoU,
    GAClBH,
    EA
    AKE,
    kBAAkBC,
    MAK7BD,
    kBAAmB,
    SAAUC,
    GT6xBzB,
    GAAIC,
    GAAS7V,
    ISzxBX4V,
    IAAS,
    YAAY7S,
    KAAK6S,
    EAAMvJ,
    SAC5BrM,
    KAAKyS,
    MAAOzS,
    KAAKyS,
    IAAIyC,
    +BAAiClV,
    KAAK8V,
    WAAWtY,
    QAAUwC,
    KAAK6J,
    QAAQvB,
    sBAGjGtI,
    KAAK6J,
    QAAQkM,
    UACf7U,
    OAAO8U,
    aAAahW,
    KAAKiW,
    YACzBjW,
    KAAKiW,
    WAAa / U,
    OAAOgV,
    WAAW,
    WT6xBhC,
    MS7xBsCL,
    GAAKlK,
    YAAY3L,
    KAAK6J,
    QAAQkM,
    WAExE / V,
    KAAK2L,
    aAGTwK,
    SAAU,
    WAERnW,
    KAAK8S,
    aAAc,
    EACnB9S,
    KAAK8R,
    qBAGD,
    mBAAuB9R,
    MAAKyS,
    MAIhCzS,
    KAAKyS,
    IAAI
    6 B,
    eACNK,
    YAAY,
    UACZyB,
    WACAnP,
    SAGHjH,
    KAAKmU,
    cAGLnU,
    KAAKyS,
    IAAIE,
    wBACT3S,
    KAAKyS,
    IAA
    IyC,
    8 BAA + B,
    IAG1C5C,
    WAAY,
    WACVtS,
    KAAKmW,
    WAED,
    mBAAuBnW,
    MAAKyS,
    KAC9BzS,
    KAAKyS,
    IAAI6B,
    eAAerN,
    eAEnBjH,
    MAAKyS,
    KAGdyB,
    cAAe,
    WACblU,
    KAAKyS,
    IAAIyC,
    8 BAA + B,
    EACxClV,
    KAAKyS,
    IA
    AIsC,
    mBAAmBJ,
    YAAY3U,
    KAAK6J,
    QAAQpB,
    YAAYgM,
    SAASzU,
    KAAK6J,
    QAAQnB,
    eAEzF6K,
    YAAa,
    WACXv
    T,
    KAAKyS,
    IAAIyC,
    8 BAA + B,
    EACxClV,
    KAAKyS,
    IAAIsC,
    mBAAmBJ,
    YAAY3U,
    KAAK6J,
    QAAQnB,
    cAAc + L,
    SAASzU,
    KAAK6J,
    QAAQpB,
    aAE3F0L,
    YAAa,
    WACXnU,
    KAAKyS,
    IAAIsC,
    mBAAmBJ,
    YAAY3U,
    KAAK6J,
    QA
    AQnB,
    cAAciM,
    YAAY3U,
    KAAK6J,
    QAAQpB,
    aCnYhG,
    IAAIoJ,
    GAAO,
    SAAUtP,
    EAASuH,
    EAAYD,
    GACxC7J,
    KAAK2M,
    UAAY,
    OAEjB3M,
    KAAKuC,
    QAAUA,
    EACfvC,
    KAAK + K,
    SAAW9K,
    EAAEsC,
    GAClBvC,
    KAAK8J,
    WAAa
    A,
    EAClB9J,
    KAAK6J,
    QAAUA,
    EACf7J,
    KAAK + J,
    OAAS7I,
    OAAO8M,
    QAErBhO,
    KAAKmS,
    UACLnS,
    KAAKwJ,
    iBAAmB,
    MAd1B6M,
    GAiBqBC,
    QAAS,
    KAAMC,
    UAAU,
    EAAMC,
    UAAU,
    EAE9D3E,
    GAAKlU,
    WACHqU,
    iBAAkB,
    S
    AAU4D,
    GVgqCxB,
    GAAIa,
    GAASzW,
    IU9pCf,
    KAAI,
    IAAS4V,
    EAAM9V,
    QAAnB,
    CAIA,
    GAAI4W,
    GAAe1W,
    KA
    AK2W,
    eAAiB3W,
    KAAK + K,
    SAASwJ,
    KAAKlS,
    EAAMyF,
    iBAAiB,
    EAGnF,
    IAFA9H,
    KAAK2W,
    cAAgB,
    KACrB3
    W,
    KAAK + K,
    SAASwJ,
    KAAK,
    oCAAoCqC,
    KAAK,
    YAAY,
    IACpEF,
    GAAgB,
    OAASA,
    EAAahT,
    aAAa,
    kBAAvD,
    CA
    GAxC,
    OAAO8M,
    QAAQ6I,
    eAEf,
    IAAIlN,
    GAAU3J,
    KAAK8W,
    cAAclB,
    MAAAA,
    GAE7B,
    cAAejM,
    EAAQoN,
    UA
    AW,
    IAAU / W,
    KAAKgX,
    SAAS,
    YAK5DpB,
    EAAMqB,
    2 BACNrB,
    EAAMsB,
    iBACF,
    YAAcvN,
    EAAQoN,
    SACxBpN,
    EAAQlL,
    KAAK,
    WAAQgY,
    EAAKU,
    QAAQT,
    SAIxCzE,
    eAAgB,
    SAAS2D,
    GACvB5V,
    KAAK2W,
    cAAgBf,
    EAAMwB,
    eAK7BD,
    QAAS,
    SAAUT,
    GACjB,
    IAAI,
    IAAU1W,
    KAAKgX,
    SAAS,
    UAA5B,
    CAGA,
    GAAIN,
    EAAc,
    CAChB,
    GAA
    IW,
    GAAarX,
    KAAK + K,
    SAASwJ,
    KAAK,
    oCAAoCqC,
    KAAK,
    YAAY,
    EACrF,
    KAAMS,
    EAAW7Z,
    SACnB6Z,
    EAAap
    X,
    EAAE,
    iEAAiEqX,
    SAAStX,
    KAAK + K,
    WAChGsM,
    EAAW / U,
    MACT3B,
    KAAM + V,
    EAAahT,
    aAAa,
    QAChC / E,
    M
    AAO + X,
    EAAahT,
    aAAa,
    WAIrC1D,
    KAAK + K,
    SAASvJ,
    QAAQzC,
    SAAckB,
    EAAEsX,
    MAAM,
    WAAYzX,
    SAAS,
    OA
    QnE6L,
    SAAU,
    SAAU9B,
    GAClB,
    GAAI3K,
    UAAU1B,
    QAAU,
    IAAMyC,
    EAAEqM,
    cAAczC,
    GAAU,
    CACtDxH,
    EAA
    MsC,
    SAAS,
    2 FVgqCb,
    IAAI6S,
    GAAa9Z,
    OAAO4B,
    KU / pCEJ,
    WAAvBkJ,
    EAAAoP,
    EAAA,
    GAAO7M,
    EAAA6M,
    EAAA,
    GAAO5B,
    EAAA4B,
    EAAA,
    EACnB3N,
    IAAWzB,
    MAAAA,
    EAAOuC,
    MAAAA,
    EAAOiL,
    MAAAA,
    GAE3B,
    MAl
    FJS,
    GAkF0BrW,
    KAAK8W,
    aAAajN,
    GAASkN,
    UAGnDD,
    aAAc,
    WVqqCV,
    GAAIW,
    GACAC,
    EAAS1X,
    KAET2X,
    E
    AAQzY,
    UAAU1B,
    QAAU,
    GAAsBW,
    SAAjBe,
    UAAU,
    MUxqCHA,
    UAAA,
    GAAvBkJ,
    EAAAuP,
    EAAAvP,
    MAAOuC,
    E
    AAAgN,
    EAAAhN,
    MAAOiL,
    EAAA + B,
    EAAA / B,
    KACrC5V,
    MAAK4X,
    YAAchC,
    EACfA,
    IACF5V,
    KAAK4X,
    YAAc
    7 Y,
    YAAkB6W,
    GAAQsB,
    eAAgB,
    WAC3D7U,
    EAAMsC,
    SAAS,
    0 GACf + S,
    EAAKlO,
    kBAAmB,
    MAG5BxJ,
    KAAKwJ,
    kBAAmB,
    EAGxBxJ,
    KAAKgX,
    SAAS,
    YAGdhX,
    KAAK6X,
    gBAEL,
    IAAIrQ,
    GAAWxH,
    KAAK8X,
    iCAAiC,
    WACn
    D,
    MAAO7X,
    GAAEkF,
    IAAIuS,
    EAAKvF,
    OAAQ,
    SAAAC,
    GV8qCtB,
    MU9qC + BA,
    GAAM0E,
    cAAcnM,
    MAAAA,
    EA
    AOvC,
    MAAAA,
    OAGhE,
    QAAOqP,
    EAAApV,
    EAAMkF,
    IAAIC,
    GACd / I,
    KAAO,
    WAAQiZ,
    EAAKV,
    SAAS,
    aAC7Be,
    KAAO,
    WACNL,
    EAAKlO,
    kBAAmB,
    EACxBkO,
    EAAKnP,
    QACLmP,
    EAAKV,
    SAAS,
    WAEfgB,
    OAAO,
    WAAQN,
    EAA
    KV,
    SAAS,
    gBAC7B3N,
    KAAA7I,
    MAAAiX,
    EAAAva,
    mBAAQ8C,
    KAAKmJ,
    sCAOlB8O,
    QAAS,
    SAAUpO,
    GACjB,
    GAAI3K,
    UAAU1B,
    QAAU,
    IAAMyC,
    EAAEqM,
    cAAczC,
    GAAU,
    CACtDxH,
    EAAMsC,
    SAAS,
    0 FVirCb,
    IAAIuT,
    GAAcxa,
    OAAO4B,
    KUhrCNJ,
    WAAhBkJ,
    EAAA8P,
    EAAA,
    GAAOvN,
    EAAAuN,
    EAAA,
    EACZrO,
    IAAWzB,
    MAAAA,
    EAAOuC,
    MAAAA,
    GAEpB,
    MA9HJ0L,
    GA8H0BrW,
    KAAK4K,
    UAAUf,
    GAASkN,
    UAMhDnM,
    UAAW,
    WVqrCP,
    GAA
    IuN,
    GAASnY,
    KAEToY,
    EAAQlZ,
    UAAU1B,
    QAAU,
    GAAsBW,
    SAAjBe,
    UAAU,
    MUvrCbA,
    UAAA,
    GAAhBkJ,
    EAA
    AgQ,
    EAAAhQ,
    MAAOuC,
    EAAAyN,
    EAAAzN,
    KAC3B3K,
    MAAK6X,
    gBAEL,
    IAAIrQ,
    GAAWxH,
    KAAK8X,
    iCAAiC,
    WACnD,
    MAAO7X,
    GAAEkF,
    IAAIgT,
    EAAKhG,
    OAAQ,
    SAAAC,
    GV4rCtB,
    MU5rC + BA,
    GAAMxH,
    WAAWxC,
    MAA
    AA,
    EAAOuC,
    MAAAA,
    OAE7D,
    OAAOtI,
    GAAMkF,
    IAAIC,
    IAGnB6Q,
    QAAS,
    WAEP,
    MADArY,
    MAAK6X,
    iBACE7
    X,
    MAITsY,
    MAAO,
    WAEL,
    IAAK,
    GAAIhb,
    GAAI,
    EAAGA,
    EAAI0C,
    KAAKmS,
    OAAO3U,
    OAAQF,
    IACtC0C,
    KAA
    KmS,
    OAAO7U,
    GAAGgb,
    OAEjBtY,
    MAAKgX,
    SAAS,
    UAIhBuB,
    QAAS,
    WAEPvY,
    KAAKsS,
    YAGL,
    KAAK,
    GAAIh
    V,
    GAAI,
    EAAGA,
    EAAI0C,
    KAAKmS,
    OAAO3U,
    OAAQF,
    IACtC0C,
    KAAKmS,
    OAAO7U,
    GAAGib,
    SAEjBvY,
    MAA
    K + K,
    SAASyN,
    WAAW,
    WACzBxY,
    KAAKgX,
    SAAS,
    YAGhBa,
    eAAgB,
    WACd,
    MAAO7X,
    MAAK4J,
    mBAAmB6O,
    eAG
    jCA,
    YAAa,
    WV4rCT,
    GAAIC,
    GAAS1Y,
    KU3rCX2Y,
    EAAY3Y,
    KAAKmS,
    MA0BrB,
    OAxBAnS,
    MAAKmS,
    UACLnS,
    KAAK4Y,
    oBAEL5Y,
    KAAK8X,
    iCAAiC,
    WACpCY,
    EAAK3N,
    SACJwJ,
    KAAKmE,
    EAAK7O,
    QAAQ7B,
    QAClB6Q,
    IAAIH,
    EAAK7O,
    QAAQ5B,
    UACjBd,
    KAAK,
    SAACC,
    EAAG7E,
    GACR,
    GAAIuW,
    GAAgB,
    GAAI5X,
    QAAO8M,
    QAA
    Q + K,
    QAAQxW,
    KAASmW,
    EAGxD,
    KAAK,
    UAAYI,
    EAAcnM,
    WAAa,
    kBAAoBmM,
    EAAcnM,
    aAAe,
    IAASmM,
    EAAcj
    P,
    QAAQ5B,
    SAAW,
    CACrI,
    GAAI + Q,
    GAAWF,
    EAAcnM,
    UAAY,
    IAAMmM,
    EAAc7P,
    MACzD,
    oBAAuByP,
    GAAKE,
    iBAAiBI,
    KAC / CN,
    EAAKE,
    iBAAiBI,
    GAAYF,
    EAClCJ,
    EAAKvG,
    OAAOzT,
    KAAKoa,
    OAKvB7Y,
    EAAEkH,
    KA
    AK9E,
    EAAM0E,
    WAAW4R,
    EAAWD,
    EAAKvG,
    QAAS,
    SAAC / K,
    EAAGgL,
    GACnDA,
    EAAMkG,
    YAGHtY,
    MAUT8X,
    i
    CAAkC,
    SAAU3X,
    GAC1C,
    GAAI8Y,
    GAAsBjZ,
    KAAK4J,
    gBAC / B5J,
    MAAK4J,
    iBAAmB,
    WAAc,
    MAAO5J,
    MAC7
    C,
    IAAIkH,
    GAAS / G,
    GAEb,
    OADAH,
    MAAK4J,
    iBAAmBqP,
    EACjB / R,
    GAMT8P,
    SAAU,
    SAAUtW,
    GAClB,
    MAAO
    V,
    MAAKwB,
    QAAQ,
    QAAUd,
    IC1NlC,
    IAAMwY,
    GAAa,
    SAASC,
    EAAcxY,
    EAAMyL,
    EAAcG,
    EAAU6M,
    GACtE,
    GA
    AMC,
    GAAgBnY,
    OAAO8M,
    QAAQsL,
    mBAAmB7M,
    WAAW9L,
    GAC7DoO,
    EAAY,
    GAAIvD,
    GAAU6N,
    EAChC9M,
    GAA
    WA,
    GAAY4M,
    EAAatP,
    QAAQlJ,
    EAAO,
    aAAeoO,
    EAAUxC,
    SAC5E6M,
    GAAmB,
    IAASA,
    EAE5Bra,
    SAAciB,
    MA
    CZ + O,
    UAAAA,
    EACApO,
    KAAAA,
    EACAyL,
    aAAAA,
    EACAG,
    SAAAA,
    EACA6M,
    gBAAAA,
    IAEFpZ,
    KAAKuZ,
    mBA
    AmBJ,
    EAAatP,
    UAGjC2P,
    EAAa,
    SAAStV,
    GAC1B,
    GAAMuV,
    GAAMvV,
    EAAI,
    GAAGI,
    aACnB,
    OAAOmV,
    GAAM
    vV,
    EAAItG,
    MAAM,
    GAGzBsb,
    GAAWvb,
    WACTgO,
    SAAU,
    SAAShN,
    EAAOmN,
    GX45CtB,
    GAAI4N,
    EW35CN,
    QA
    AOA,
    EAAA1Z,
    KAAK + O,
    WAAUpD,
    SAAAnL,
    MAAAkZ,
    GAAS / a,
    GAAA + I,
    OAAAxK,
    mBAAU8C,
    KAAK2Z,
    kBAAi
    B7N,
    MAGjEyN,
    mBAAoB,
    SAAS1P,
    GX85CzB,
    GAAI + P,
    GAAS5Z,
    IW75CfA,
    MAAK2Z,
    gBAAkB3Z,
    KAAK + O,
    U
    AAU5C,
    kBAAkBnM,
    KAAKoM,
    aAC3D,
    SAAAhN,
    GX + 5 CE,
    MW / 5 CKyK,
    GAAQ + P,
    EAAKjZ,
    KAAO6Y,
    EAAWpa,
    O
    C1B5C,
    IAAIwJ,
    GAAQ,
    SAAUwJ,
    EAAOtI,
    EAAYD,
    EAASgQ,
    GAChD7Z,
    KAAK2M,
    UAAY,
    QAEjB3M,
    KAAKuC,
    QAAU6P,
    EACfpS,
    KAAK + K,
    SAAW9K,
    EAAEmS,
    GAGd,
    mBAAuByH,
    KACzB7Z,
    KAAK + J,
    OAAS8P,
    GAGhB7Z,
    K
    AAK6J,
    QAAUA,
    EACf7J,
    KAAK8J,
    WAAaA,
    EAGlB9J,
    KAAK8Z,
    eACL9Z,
    KAAK + Z,
    qBACL / Z,
    KAAKwJ,
    kBAA
    mB,
    EAGxBxJ,
    KAAKga,
    oBAzBPC,
    GA4BqB3D,
    QAAS,
    KAAMC,
    UAAU,
    EAAMC,
    UAAU,
    EAE9D5N,
    GAAMjL,
    WAK
    JgO,
    SAAU,
    SAAU9B,
    GACd3K,
    UAAU1B,
    QAAU,
    IAAMyC,
    EAAEqM,
    cAAczC,
    KAC5CxH,
    EAAMsC,
    SAAS,
    6 FAC
    fkF,
    GAAWA,
    QAAAA,
    GAEb,
    IAAIF,
    GAAU3J,
    KAAK8W,
    aAAajN,
    EAChC,
    KAAKF,
    EACH,
    OAAO,
    CACT,
    QAAQA,
    EAAQoN,
    SACd,
    IAAK,
    UAAW,
    MAAO,
    KAAA,
    KAClB,
    WAAY,
    OAAO,
    CAAA,
    KACnB,
    WAAY,
    MAAO / W,
    MAAKwJ,
    m
    BAOjCsN,
    aAAc,
    WZk8CV,
    GAAIoD,
    GACAC,
    EAAUna,
    KAEVoa,
    EAAQlb,
    UAAU1B,
    QAAU,
    GAAsBW,
    SAAjBe,
    UAAU,
    MYr8CTA,
    UAAA,
    GAAjByL,
    EAAAyP,
    EAAAzP,
    MAAOvC,
    EAAAgS,
    EAAAhS,
    KAG9B,
    IADApI,
    KAAKqY,
    WACDjQ,
    GAAUpI,
    KAAKqa,
    WAAWjS,
    GAQ9B,
    MALApI,
    MAAKrB,
    MAAQqB,
    KAAK8V,
    WAGlB9V,
    KAAKgX,
    SA
    AS,
    aAEPkD,
    EAAAla,
    KAAK4K,
    WAAWD,
    MAAAA,
    EAAOhM,
    MAAOqB,
    KAAKrB,
    MAAO2b,
    YAAY,
    IAC1DtC,
    OAA
    O,
    WAAQmC,
    EAAK5H,
    cACpB9T,
    KAAK,
    WAAU0b,
    EAAKnD,
    SAAS,
    aAC7Be,
    KAAK,
    WAAUoC,
    EAAKnD,
    SAAS,
    W
    AC7BgB,
    OAAO,
    WAAQmC,
    EAAKnD,
    SAAS,
    gBAC7B3N,
    KAAA7I,
    MAAA0Z,
    EAAAhd,
    mBAAQ8C,
    KAAKmJ,
    sCAG
    lB6K,
    eAAgB,
    WACd,
    MAAO,
    KAAMhU,
    KAAK8Z,
    YAAYtc,
    QAIhCyW,
    gBAAiB,
    SAAUtV,
    GAMzB,
    MALI,
    mBAAu
    BA,
    KACzBA,
    EAAQqB,
    KAAK8V,
    eAIVnX,
    EAAMnB,
    SAAWwC,
    KAAKua,
    eAAiB,
    mBAAuBva,
    MAAK6J,
    QAAQ2Q,
    kBAMlFH,
    WAAY,
    SAAUjS,
    GACpB,
    MAAIhL,
    OAAMC,
    QAAQ2C,
    KAAK6J,
    QAAQzB,
    YACfnI,
    EAAEwa,
    QAAQr
    S,
    EAAOpI,
    KAAK6J,
    QAAQzB,
    OACvCpI,
    KAAK6J,
    QAAQzB,
    QAAUA,
    GAOhC6P,
    QAAS,
    SAAUpO,
    GACjB,
    GAA
    I3K,
    UAAU1B,
    QAAU,
    IAAMyC,
    EAAEqM,
    cAAczC,
    GAAU,
    CACtDxH,
    EAAMsC,
    SAAS,
    2 FZ08Cb,
    IAAI + V,
    GAA
    chd,
    OAAO4B,
    KYz8CNJ,
    WAAhByL,
    EAAA + P,
    EAAA,
    GAAO / b,
    EAAA + b,
    EAAA,
    EACZ7Q,
    IAAWc,
    MAAAA,
    EAA
    OhM,
    MAAAA,
    GAEpB,
    GAAIgL,
    GAAU3J,
    KAAK4K,
    UAAUf,
    EAC7B,
    QAAKF,
    GA1GTsQ,
    EA4GyBtQ,
    EAAQoN,
    U
    AQ / BnM,
    UAAW,
    WZ88CP,
    GAAI + P,
    GAAU3a,
    KAEV4a,
    EAAS1b,
    UAAU1B,
    QAAU,
    GAAsBW,
    SAAjBe,
    UAAU,
    MY
    h9CaA,
    UAAA,
    GZk9CzD2b,
    EAAeD,
    EYl9CDjQ,
    MAAAA,
    EAAAxM,
    SAAA0c,
    GAAQA,
    EAAOlc,
    EAAAic,
    EAAA
    jc,
    MAAOyJ,
    EAAAwS,
    EAAAxS,
    MAAOkS,
    EAAAM,
    EAAAN,
    UAKjD,
    IAHKA,
    GACHta,
    KAAKqY,
    WAEHjQ,
    GAAU
    pI,
    KAAKqa,
    WAAWjS,
    GAA9B,
    CAMA,
    GAHApI,
    KAAKwJ,
    kBAAmB,
    GAGnBxJ,
    KAAKgU,
    iBACR,
    MAAO / T,
    GAA
    EwH,
    MAMX,
    IAHI,
    mBAAuB9I,
    IAAS,
    OAASA,
    IAC3CA,
    EAAQqB,
    KAAK8V,
    aAEV9V,
    KAAKiU,
    gBAAgBtV,
    KA
    AU,
    IAASgM,
    EAC3C,
    MAAO1K,
    GAAEwH,
    MAEX,
    IAAIqT,
    GAAqB9a,
    KAAK + a,
    yBAC1BvT,
    IAWJ,
    OAVAvH,
    GA
    AEkH,
    KAAK2T,
    EAAoB,
    SAAC1T,
    EAAG0S,
    GAG7B,
    GAAInQ,
    GAAUtH,
    EAAMkF,
    IAClBtH,
    EAAEkF,
    IAAI2U,
    EAAa,
    SAAA7K,
    GZk9CjB,
    MYl9C + B0L,
    GAAKK,
    oBAAoBrc,
    EAAOsQ,
    KAGnE,
    IADAzH,
    EAAS9I,
    KAAKiL,
    GACU,
    aAApBA,
    EAAQoN,
    QACV,
    OAAO,
    IAEJ1U,
    EAAMkF,
    IAAIC,
    KAInBwT,
    oBAAqB,
    SAASrc,
    EAAOsQ,
    GZ
    k9CjC,
    GAAIgM,
    GAAUjb,
    KYj9CZkH,
    EAAS + H,
    EAAWtD,
    SAAShN,
    EAAOqB,
    KAKxC,
    QAHI,
    IAAUkH,
    IACZA,
    EAASjH,
    EAAEsJ,
    WAAWE,
    UAEjBpH,
    EAAMkF,
    KAAKL,
    IAAS6Q,
    KAAK,
    SAAA / E,
    GACxBiI,
    EAAKzR,
    2 BAA
    4 BpM,
    SACrC6d,
    EAAKzR,
    qBACPyR,
    EAAKzR,
    iBAAiB9K,
    MACpBiT,
    OAAQ1C,
    EACR + D,
    aAAc,
    gBAAoBA,
    I
    AAgBA,
    OAMxD8C,
    SAAU,
    WACR,
    GAAInX,
    EAWJ,
    OAPEA,
    GADE,
    kBAAsBqB,
    MAAK6J,
    QAAQlL,
    MAC7BqB,
    KA
    AK6J,
    QAAQlL,
    MAAMqB,
    MACpB,
    mBAAuBA,
    MAAK6J,
    QAAQlL,
    MACnCqB,
    KAAK6J,
    QAAQlL,
    MAEbqB,
    KAAK +
    K,
    SAASkG,
    MAGpB,
    mBAAuBtS,
    IAAS,
    OAASA,
    EACpC,
    GAEFqB,
    KAAKkb,
    kBAAkBvc,
    IAIhC2Z,
    MAAO,
    WA
    EL,
    MADAtY,
    MAAKmW,
    WACEnW,
    KAAKgX,
    SAAS,
    UAIvBuB,
    QAAS,
    WAEPvY,
    KAAKsS,
    aACLtS,
    KAAK + K,
    SAA
    SyN,
    WAAW,
    WACzBxY,
    KAAK + K,
    SAASyN,
    WAAW,
    iBACzBxY,
    KAAKgX,
    SAAS,
    YAIhBqB,
    QAAS,
    WAEP,
    MADAr
    Y,
    MAAKmb,
    sBACEnb,
    MAGTmb,
    oBAAqB,
    WACnB,
    MAAOnb,
    MAAK4J,
    mBAAmBoQ,
    oBAGjCoB,
    mBAAoB,
    WAEl
    B,
    MADA / Y,
    GAAMsC,
    SAAS,
    kEACR3E,
    KAAKqY,
    WAWdgD,
    cAAe,
    SAAU1a,
    EAAMyL,
    EAAcG,
    EAAU6M,
    GAErD,
    GAAIlY,
    OAAO8M,
    QAAQsL,
    mBAAmB7M,
    WAAW9L,
    GAAO,
    CACtD,
    GAAIsO,
    GAAa,
    GAAIiK,
    GAAWlZ,
    KAAMW,
    EAAMyL,
    EAAcG,
    EAAU6M,
    EAGhE,
    eAAgBpZ,
    KAAK + Z,
    kBAAkB9K,
    EAAWtO,
    OACpDX,
    KAAKsb,
    iBAAiBrM,
    EAAWtO,
    MAEnCX,
    KAAK8Z,
    YAAYpb,
    KAAKuQ,
    GACtBjP,
    KAAK + Z,
    kBAAkB9K,
    EAAWtO,
    MAAQsO,
    EAG5C,
    MAAOjP,
    OAITsb,
    iBAAkB,
    SAAU3a,
    GAC1B,
    IAAK,
    GAAIrD,
    GAAI,
    EAAGA,
    EAAI0C,
    KAAK8Z,
    YAAYtc,
    OA
    AQF,
    IAC3C,
    GAAIqD,
    IAASX,
    KAAK8Z,
    YAAYxc,
    GAAGqD,
    KAAM,
    CACrCX,
    KAAK8Z,
    YAAYxP,
    OAAOhN,
    EAA
    G,
    EAC3B,
    OAGJ,
    aADO0C,
    MAAK + Z,
    kBAAkBpZ,
    GACvBX,
    MAITub,
    iBAAkB,
    SAAU5a,
    EAAM2O,
    EAAY / C,
    GA
    C5C,
    MAAOvM,
    MAAKsb,
    iBAAiB3a,
    GAC1B0a,
    cAAc1a,
    EAAM2O,
    EAAY / C,
    IAOrCyN,
    iBAAkB,
    WAKhB,
    IAA
    K,
    GAJDF,
    MACAC,
    KAGKzc,
    EAAI,
    EAAGA,
    EAAI0C,
    KAAK8Z,
    YAAYtc,
    OAAQF,
    KACvC,
    IAAU0C,
    KAAK8Z,
    Y
    AAYxc,
    GAAG8b,
    kBAChCU,
    EAAYpb,
    KAAKsB,
    KAAK8Z,
    YAAYxc,
    IAClCyc,
    EAAkB / Z,
    KAAK8Z,
    YAAYxc,
    G
    AAGqD,
    MAAQX,
    KAAK8Z,
    YAAYxc,
    GAGnE0C,
    MAAK8Z,
    YAAcA,
    EACnB9Z,
    KAAK + Z,
    kBAAoBA,
    CAGzB,
    KAAK,
    GAAIpZ,
    KAAQX,
    MAAK6J,
    QACpB7J,
    KAAKqb,
    cAAc1a,
    EAAMX,
    KAAK6J,
    QAAQlJ,
    GAAOxC,
    QAAW,
    EAG1D,
    OAAO6B,
    MAAKwb,
    yBAKdA,
    sBAAuB,
    WAEjB,
    OAASxb,
    KAAKuC,
    QAAQmB,
    aAAa,
    aACrC1D,
    KAAKqb,
    cAAc,
    YAAY,
    EAAMld,
    QAAW,
    GAG9C,
    OAAS6B,
    KAAKuC,
    QAAQmB,
    aAAa,
    YACrC1D,
    KAAKqb,
    cAAc,
    UAAWrb,
    KAA
    KuC,
    QAAQmB,
    aAAa,
    WAAYvF,
    QAAW,
    EAGjF,
    IAAIuS,
    GAAM1Q,
    KAAKuC,
    QAAQmB,
    aAAa,
    OAChC4J,
    EAAMt
    N,
    KAAKuC,
    QAAQmB,
    aAAa,
    MAChC,
    QAASgN,
    GAAO,
    OAASpD,
    EAC3BtN,
    KAAKqb,
    cAAc,
    SAAU3K,
    EAAKpD,
    GAAMnP,
    QAAW,
    GAG5C,
    OAASuS,
    EAChB1Q,
    KAAKqb,
    cAAc,
    MAAO3K,
    EAAKvS,
    QAAW,
    GAGnC,
    OAASmP,
    GAC
    hBtN,
    KAAKqb,
    cAAc,
    MAAO / N,
    EAAKnP,
    QAAW,
    GAIxC,
    OAAS6B,
    KAAKuC,
    QAAQmB,
    aAAa,
    cAAgB,
    OAAS1D,
    KAAKuC,
    QAAQmB,
    aAAa,
    aACxF1D,
    KAAKqb,
    cAAc,
    UAAWrb,
    KAAKuC,
    QAAQmB,
    aAAa,
    aAAc1D,
    KAAKuC,
    QAAQmB,
    aAAa,
    cAAevF,
    QAAW,
    GAGnH,
    OAAS6B,
    KAAKuC,
    QAAQmB,
    aAAa,
    aAC1C1D,
    KAAKqb,
    cAAc,
    YAAa
    rb,
    KAAKuC,
    QAAQmB,
    aAAa,
    aAAcvF,
    QAAW,
    GAG5E,
    OAAS6B,
    KAAKuC,
    QAAQmB,
    aAAa,
    cAC1C1D,
    KAAKqb,
    cAAc,
    YAAarb,
    KAAKuC,
    QAAQmB,
    aAAa,
    aAAcvF,
    QAAW,
    EAIrF,
    IAAIkO,
    GAAOhK,
    EAAMoB,
    QAAQzD,
    KA
    AKuC,
    QAG9B,
    OAAI,
    WAAa8J,
    EACRrM,
    KAAKqb,
    cAAc,
    QAAS,
    UACjC1L,
    KAAM3P,
    KAAKuC,
    QAAQmB,
    aAAa,
    SAAW,
    IAC3CmM,
    KAAMa,
    GAAO1Q,
    KAAKuC,
    QAAQmB,
    aAAa,
    WACrCvF,
    QAAW,
    GAEN,
    4 BAA4B4E,
    KAAKsJ,
    GACnCrM,
    KAAKqb,
    cAAc,
    OAAQhP,
    EAAMlO,
    QAAW,
    GAE9C6B,
    MAKTua,
    YAAa,
    WACX,
    MAAI,
    mBAAuBva,
    MA
    AK + Z,
    kBAAkBvK,
    WAG3C,
    IAAUxP,
    KAAK + Z,
    kBAAkBvK,
    SAASpD,
    cAKnD4K,
    SAAU,
    SAAUtW,
    GAClB,
    MAAO
    V,
    MAAKwB,
    QAAQ,
    SAAWd,
    IAOjCwa,
    kBAAmB,
    SAAUvc,
    GAU3B,
    OATI,
    IAASqB,
    KAAK6J,
    QAAQ4R,
    WACxBp
    Z,
    EAAMsC,
    SAAS,
    2 FAEb,
    WAAa3E,
    KAAK6J,
    QAAQ6R,
    aAC5B / c,
    EAAQA,
    EAAMwF,
    QAAQ,
    UAAW,
    MAE / B,
    SA
    AYnE,
    KAAK6J,
    QAAQ6R,
    YAAgB,
    WAAa1b,
    KAAK6J,
    QAAQ6R,
    aAAgB,
    IAAS1b,
    KAAK6J,
    QAAQ4R,
    YAC3G9c,
    EAAQ0D,
    EAAMyC,
    WAAWnG,
    IAEpBA,
    GAGTqN,
    aAAc,
    WACZ,
    GAAI2P,
    GAAI3b,
    KAAK + Z,
    kBAAkB1N,
    IAC /
    B,
    OAAOsP,
    IAAwB,
    SAAnBA,
    EAAEvP,
    cAMhB2O,
    uBAAwB,
    WACtB,
    IAAI,
    IAAU / a,
    KAAK6J,
    QAAQ3B,
    gBAC
    zB,
    OAAQlI,
    KAAK8Z,
    YAMf,
    KAAK,
    GAJDgB,
    MACAc,
    KAGKte,
    EAAI,
    EAAGA,
    EAAI0C,
    KAAK8Z,
    YAAYtc,
    O
    AAQF,
    IAAK,
    CAChD,
    GAAIue,
    GAAI7b,
    KAAK8Z,
    YAAYxc,
    GAAGiP,
    QACvBqP,
    GAAMC,
    IACTf,
    EAAmBpc,
    K
    AAKkd,
    EAAMC,
    OAChCD,
    EAAMC,
    GAAGnd,
    KAAKsB,
    KAAK8Z,
    YAAYxc,
    IAKjC,
    MAFAwd,
    GAAmBgB,
    KAAK,
    S
    AAUC,
    EAAGC,
    GAAK,
    MAAOA,
    GAAE,
    GAAGzP,
    SAAWwP,
    EAAE,
    GAAGxP,
    WAE / DuO,
    GA7YX,
    IAAAmB,
    GAAArT,
    ECGIsT,
    EAAW,
    WACblc,
    KAAK2M,
    UAAY,
    gBAGnBuP,
    GAASve,
    WAEPwe,
    WAAY,
    SAAUpR,
    GAGpB,
    MAFA / K,
    MAAKoc,
    UAAU1d,
    KAAKqM,
    GAEb / K,
    MAITmb,
    oBAAqB,
    WACnB,
    GAAIkB,
    EAKJ,
    IAHArc,
    KAAK8Z,
    eAGyB,
    WAA1B9Z,
    KAAKuC,
    QAAQ + S,
    SAGf,
    MAFAtV,
    MAAK4J,
    mBAAmBoQ,
    mBAEjBha,
    IAIT,
    KAAK,
    GAAI1C,
    GAAI,
    EAAGA,
    EAAI0C,
    KAAKoc,
    UAAU5e,
    OAAQF,
    IAGzC,
    GAAK2C,
    EAAE,
    QAAQqc,
    IAAItc,
    KAAKoc,
    UAAU9e,
    IAAIE,
    OAAtC,
    CAKA6e,
    EAAmBrc,
    KAAKoc,
    UAAU9e,
    GAAGuE,
    KAAK,
    iBAAiBsZ,
    sBAAsBrB,
    WAEjF,
    KAA
    K,
    GAAIpI,
    GAAI,
    EAAGA,
    EAAI2K,
    EAAiB7e,
    OAAQkU,
    IAC3C1R,
    KAAKqb,
    cAAcgB,
    EAAiB3K,
    GAAG / Q,
    K
    AAM0b,
    EAAiB3K,
    GAAGtF,
    aAAciQ,
    EAAiB3K,
    GAAGnF,
    SAAU8P,
    EAAiB3K,
    GAAG0H,
    qBAPjIpZ,
    MAAKoc,
    UAAU9R,
    OAAOhN,
    EAAG,
    EAU7B,
    OAAO0C,
    OAIT8V,
    SAAU,
    WAER,
    GAAI,
    kBAAsB9V,
    MAAK6J,
    QAAQlL,
    MA
    CrC,
    MAAOqB,
    MAAK6J,
    QAAQlL,
    MAAMqB,
    KACvB,
    IAAI,
    mBAAuBA,
    MAAK6J,
    QAAQlL,
    MAC3C,
    MAAOqB,
    MA
    AK6J,
    QAAQlL,
    KAGtB,
    IAA8B,
    UAA1BqB,
    KAAKuC,
    QAAQ + S,
    SAAsB,
    CACrC,
    GAAIjJ,
    GAAOhK,
    EAAMoB,
    Q
    AAQzD,
    KAAKuC,
    QAC9B,
    IAAa,
    UAAT8J,
    EACF,
    MAAOrM,
    MAAK6K,
    eAAe0R,
    OAAO,
    YAAYtL,
    OAAS,
    EAGzD,
    IAAa,
    aAAT5E,
    EAAqB,
    CACvB,
    GAAInB,
    KAMJ,
    OAJAlL,
    MAAK6K,
    eAAe0R,
    OAAO,
    YAAYpV,
    KAAK,
    WAC1C +
    D,
    EAAOxM,
    KAAKuB,
    EAAED,
    MAAMiR,
    SAGf / F,
    GAKX,
    MAA8B,
    WAA1BlL,
    KAAKuC,
    QAAQ + S,
    UAAyB,
    OAASt
    V,
    KAAK + K,
    SAASkG,
    SAI1DjR,
    KAAK + K,
    SAASkG;EAGvBuL,
    MAAO,
    WAGL,
    MAFAxc,
    MAAKoc,
    WAAapc,
    KAA
    K + K,
    UAEhB / K,
    MC5EX,
    IAAI + Y,
    GAAU,
    SAAUxW,
    EAASsH,
    EAASgQ,
    GACxC7Z,
    KAAKuC,
    QAAUA,
    EACfvC,
    K
    AAK + K,
    SAAW9K,
    EAAEsC,
    EAGlB,
    IAAIka,
    GAA2Bzc,
    KAAK + K,
    SAASlJ,
    KAAK,
    UAClD,
    IAAI4a,
    EAYF,
    MA
    TI,
    mBAAuB5C,
    IAAuB4C,
    EAAyB1S,
    SAAW7I,
    OAAO8M,
    UAC3FyO,
    EAAyB1S,
    OAAS8P,
    EAClC4C,
    EAAyBzS,
    cAAcyS,
    EAAyB5S,
    UAG9D,
    gBAAoBA,
    IACtB9K,
    SAAc0d,
    EAAyB5S,
    QAASA,
    GAG3C4S,
    CAIT,
    KAAKzc,
    K
    AAK + K,
    SAASvN,
    OACjB,
    KAAM,
    IAAIqK,
    OAAM,
    gDAElB,
    IAAI,
    mBAAuBgS,
    IAAuB,
    SAAWA,
    EAAoBlN,
    UAC /
    E,
    KAAM,
    IAAI9E,
    OAAM,
    0 CAGlB,
    OADA7H,
    MAAK + J,
    OAAS8P,
    GAAuB3Y,
    OAAO8M,
    QACrChO,
    KAAK6M,
    KA
    AKhD,
    GAGnBkP,
    GAAQpb,
    WACNkP,
    KAAM,
    SAAUhD,
    GASd,
    MARA7J,
    MAAK2M,
    UAAY,
    UACjB3M,
    KAAK0c,
    YA
    Ac,
    QACnB1c,
    KAAKiJ,
    OAAS5G,
    EAAMsB,
    aAGpB3D,
    KAAKgK,
    cAAcH,
    GAGW,
    SAA1B7J,
    KAAKuC,
    QAAQ + S,
    UAAwBjT,
    EAAMa,
    UAAUlD,
    KAAKuC,
    QAASvC,
    KAAK6J,
    QAAQrH,
    UAAW,
    cAAgBxC,
    KAAK + K,
    SAAS4R,
    GAAG
    3 c,
    KAAK6J,
    QAAQ7B,
    QACpIhI,
    KAAK4c,
    KAAK,
    eAGZ5c,
    KAAK6c,
    aAAe7c,
    KAAK8c,
    iBAAmB9c,
    KAAK4c,
    KAAK,
    iBAG / DC,
    WAAY,
    WACV,
    GAAIxQ,
    GAAOhK,
    EAAMoB,
    QAAQzD,
    KAAKuC,
    QAC9B,
    OAAkB,
    UAAV8J,
    GA
    A8B,
    aAATA,
    GACA,
    WAA1BrM,
    KAAKuC,
    QAAQ + S,
    UAAyB,
    OAAStV,
    KAAKuC,
    QAAQmB,
    aAAa,
    aAK9EoZ,
    eAA
    gB,
    Wdg5DZ,
    Gc / 4 DEnc,
    GAEAoc,
    Ed64DEC,
    EAAUhd,
    Icr4DhB,
    IALAA,
    KAAK6J,
    QAAQ1B,
    SAAWnI,
    KAAK
    6 J,
    QAAQ1B,
    WAClCxH,
    EAAOX,
    KAAKuC,
    QAAQmB,
    aAAa,
    UAClC1D,
    KAAKuC,
    QAAQmB,
    aAAa,
    MAGE,
    WAA1B
    1 D,
    KAAKuC,
    QAAQ + S,
    UAAyB,
    OAAStV,
    KAAKuC,
    QAAQmB,
    aAAa,
    YAE3E,
    MADA1D,
    MAAK6J,
    QAAQ1B,
    SAAW
    nI,
    KAAK6J,
    QAAQ1B,
    UAAYnI,
    KAAKiJ,
    OAC / CjJ,
    KAAK4c,
    KAAK,
    uBAGZ,
    KAAK5c,
    KAAK6J,
    QAAQ1B,
    SA
    EvB,
    MADA9F,
    GAAMmC,
    KAAK,
    wHAAyHxE,
    KAAK + K,
    UAClI / K,
    IAITA,
    MAAK6J,
    QAAQ1B,
    SAAWnI,
    KAAK6J,
    QAAQ1B,
    SAAShE,
    QAAQ,
    yBAA0B,
    IAG5ExD,
    GACFV,
    EAAE,
    eAAiBU,
    EAAO,
    MAAMwG,
    KAAK,
    SAAC7J,
    EAA
    G2f,
    GACvC,
    GAAI5Q,
    GAAOhK,
    EAAMoB,
    QAAQwZ,
    EACX,
    WAAT5Q,
    GAA6B,
    aAATA,
    GACvB4Q,
    EAAM3Z,
    aAA
    a0Z,
    EAAKnT,
    QAAQrH,
    UAAY,
    WAAYwa,
    EAAKnT,
    QAAQ1B,
    WAM3E,
    KAAK,
    GADD + U,
    GAAqBld,
    KAAK6K,
    eAC
    rBvN,
    EAAI,
    EAAGA,
    EAAI4f,
    EAAmB1f,
    OAAQF,
    IAE7C,
    GADAyf,
    EAA0B9c,
    EAAEid,
    EAAmBC,
    IAAI7f,
    I
    AAIuE,
    KAAK,
    WACxD,
    mBAAuBkb,
    GAAyB,
    CAE7C / c,
    KAAK + K,
    SAASlJ,
    KAAK,
    kBACtBkb,
    EAAwBZ,
    WAAWn
    c,
    KAAK + K,
    SAG1C,
    OAQJ,
    MAFA / K,
    MAAK4c,
    KAAK,
    gBAAgB,
    GAEnBG,
    GAA2B / c,
    KAAK4c,
    KAAK,
    yBAI9CA,
    KAAM,
    SAAUvQ,
    EAAM + Q,
    GACpB,
    GAAIC,
    EAEJ,
    QAAQhR,
    GACN,
    IAAK,
    cACHgR,
    EAAkBpd,
    EAAEyL,
    OACl
    B,
    GAAImG,
    GAAK7R,
    KAAKuC,
    QAASvC,
    KAAK8J,
    WAAY9J,
    KAAK6J,
    SAC7C,
    GAAIb,
    GACJ9H,
    OAAOoc,
    eAC
    P7E,
    aACF,
    MAAA,
    KACG,
    eACH4E,
    EAAkBpd,
    EAAEyL,
    OAClB,
    GApIVuQ,
    GAoIoBjc,
    KAAKuC,
    QAASvC,
    KA
    AK8J,
    WAAY9J,
    KAAK6J,
    QAAS7J,
    KAAK + J,
    QAC5D,
    GAAIf,
    GACJ9H,
    OAAOoc,
    cAET,
    MAAA,
    KACG,
    uBACHD,
    EAAkBpd,
    EAAEyL,
    OAClB,
    GA3IVuQ,
    GA2IoBjc,
    KAAKuC,
    QAASvC,
    KAAK8J,
    WAAY9J,
    KAAK6J,
    QAAS7J,
    KAAK + J,
    QAC5D,
    GAAImS,
    GACJ,
    GAAIlT,
    GACJ9H,
    OAAOoc,
    eACPd,
    OACF,
    MAAA,
    SAEA,
    KAAM,
    IAAI3U,
    OAAMwE,
    EAAO,
    mCAM3B,
    MAHIrM,
    MAAK6J,
    QAAQ1B,
    UACf9F,
    EAAMgB,
    QAAQrD,
    KAAKuC,
    QAASvC,
    KAAK6
    J,
    QAAQrH,
    UAAW,
    WAAYxC,
    KAAK6J,
    QAAQ1B,
    UAE3E,
    mBAAuBiV,
    IACzBpd,
    KAAK + K,
    SAASlJ,
    KAAK,
    gBA
    AiBwb,
    GAE7BA,
    IAITrd,
    KAAK + K,
    SAASlJ,
    KAAK,
    UAAWwb,
    GAG9BA,
    EAAgBvL,
    qBAChBuL,
    EAAgBrG,
    SA
    AS,
    QAElBqG,
    IC1JX,
    IAAIE,
    GAAUtd,
    EAAEE,
    GAAGqd,
    OAAO3W,
    MAAM,
    IAChC,
    IAAIxB,
    SAASkY,
    EAAQ,
    KAAO,
    GAAKlY,
    SAASkY,
    EAAQ,
    IAAM,
    EACtD,
    KAAM,
    6 EAEHA,
    GAAQE,
    SACXpb,
    EAAMmC,
    KAAK,
    4 FAGb,
    IA
    AIwJ,
    GAAUjP,
    SAAc,
    GAAIiK,
    IAC5BzG,
    QAASZ,
    SACToJ,
    SAAU9K,
    EAAE0B,
    UACZiI,
    iBAAkB,
    KAClBI,
    cAAe,
    KACf + O,
    QAASA,
    EACT2E,
    QAAS,
    SAKb3e,
    UA9BAkd,
    EA8BoBte,
    UAAWuT,
    EAAGtI,
    MAAOI,
    EAAKrL,
    WAC9CoB,
    SAAc8S,
    EAAKlU,
    UAAWuT,
    EAAGW,
    KAAM7I,
    EAAKrL,
    WAE5CoB,
    SAAcga,
    EAAQpb,
    UAAWqL,
    E
    AAKrL,
    WAItCsC,
    EAAEE,
    GAAGL,
    QAAUG,
    EAAEE,
    GAAGwd,
    KAAO,
    SAAU9T,
    GACnC,
    GAAI7J,
    KAAKxC,
    OAA
    S,
    EAAG,
    CACnB,
    GAAIogB,
    KAMJ,
    OAJA5d,
    MAAKmH,
    KAAK,
    WACRyW,
    EAAUlf,
    KAAKuB,
    EAAED,
    MAAMF,
    QA
    AQ + J,
    MAG1B + T,
    EAIT,
    GAAmB,
    GAAf5d,
    KAAKxC,
    OAIT,
    MAAO,
    IAAIub,
    GAAQ / Y,
    KAAK,
    GAAI6J,
    IAK1B,
    mBAAuB3I,
    QAAOoc,
    gBAChCpc,
    OAAOoc,
    kBAITtP,
    EAAQnE,
    QAAU9K,
    SAAcsD,
    EAAMsF,
    aAAaI,
    GAAW7G,
    OAAO2c,
    eACrE3c,
    OAAO2c,
    cAAgB7P,
    EAAQnE,
    QAG / B3I,
    OAAO8M,
    QAAU9M,
    OAAOyc,
    KAAO3P,
    EAC / BA,
    EAAQ3L,
    MAAQA,
    EAChBnB,
    OAAO4c,
    gBACP7d,
    EAAEkH,
    KAAK9E,
    EAAO,
    SAACjD,
    EAAKT,
    GACd,
    kBAAsB
    A,
    KACxBuC,
    OAAO4c,
    aAAa1e,
    GAAO,
    WAEzB,
    MADAiD,
    GAAMsC,
    SAAS,
    sFACRtC,
    EAAMjD,
    GAAAoB,
    MAAN
    6 B,
    EAAAnD,
    cAMb,
    IAAI6e,
    GAAW7c,
    OAAO8M,
    QAAQsL,
    mBAAqB,
    GAAI9M,
    GAAkBtL,
    OAAO2c,
    cAAcpR,
    W
    AAYvL,
    OAAO2c,
    cAAcG,
    KAC / H9c,
    QAAO + c,
    oBACPhe,
    EAAEkH,
    KAAK,
    sIAAsIN,
    MAAM,
    KAAM,
    SAAUvJ,
    E
    AAG4gB,
    GACpKhd,
    OAAO8M,
    QAAQkQ,
    GAAU,
    Wf8hErB,
    Me9hEkCH,
    GAASG,
    GAAA1d,
    MAATud,
    EAAA7e,
    YA
    CtCgC,
    OAAO + c,
    iBAAiBC,
    GAAU,
    WfgiE9B,
    GAAIC,
    Ee9hEN,
    OADA9b,
    GAAMsC,
    SAAA,
    yBAAkCuZ,
    EAAA,
    kEAAwEA,
    EAAA,
    WACzGC,
    EAAAjd,
    OAAO8M,
    SAAQkQ,
    GAAA1d,
    MAAA2d,
    EAAWjf,
    cAMrCgC,
    OAAO8M,
    QAA
    QkD,
    GAAKA,
    EACpBhQ,
    OAAOkd,
    WACLxK,
    YAAa,
    SAAU9H,
    EAAUnL,
    EAAM0d,
    GACrC,
    GAAIhL,
    IAAc,
    IAAS
    gL,
    CAE3B,
    OADAhc,
    GAAMsC,
    SAAA,
    8 IACCmH,
    EAAS8H,
    YAAYjT,
    GAAO0S,
    YAAAA,
    KAErCN,
    kBAAmB,
    SAA
    UjH,
    GAE3B,
    MADAzJ,
    GAAMsC,
    SAAA,
    kFACCmH,
    EAASiH,
    sBAGpB9S,
    EAAEkH,
    KAAK,
    uBAAuBN,
    MAAM,
    KA
    AM,
    SAAUvJ,
    EAAG4gB,
    GACrDhd,
    OAAOkd,
    UAAUF,
    GAAU,
    SAAUpS,
    EAAUnL,
    EAAM2N,
    EAASqD,
    EAAQ0M,
    G
    ACpE,
    GAAIhL,
    IAAc,
    IAASgL,
    CAE3B,
    OADAhc,
    GAAMsC,
    SAAA,
    qCAA8CuZ,
    EAAA,
    iGAC7CpS,
    EAASoS,
    G
    AAQvd,
    GAAO2N,
    QAAAA,
    EAASqD,
    OAAAA,
    EAAQ0B,
    YAAAA,
    QAMhD,
    IAAUnS,
    OAAO2c,
    cAAcS,
    UACjCre,
    E
    AAE,
    WAEIA,
    EAAE,
    2 BAA2BzC,
    QAC / ByC,
    EAAE,
    2 BAA2BH,
    WbjHnC,
    IAAIW,
    GAAIR,
    MACJse,
    EAAa,
    WACf
    lc,
    EAAMsC,
    SAAS,
    iHAgBb9D,
    EAAc,
    UASlBZ,
    GAAEue,
    OAAS,
    SAAU7d,
    EAAM8d,
    GACzB,
    GAAIre,
    EAOJ,
    IANAme,
    IACI,
    gBAAoBrf,
    WAAU,
    IAAM,
    kBAAsBA,
    WAAU,
    KACtEkB,
    EAAUlB,
    UAAU,
    GACpBuf,
    EAAWvf,
    U
    AAU,
    IAGnB,
    kBAAsBuf,
    GACxB,
    KAAM,
    IAAI5W,
    OAAM,
    mBAElB3G,
    QAAO8M,
    QAAQpM,
    GAAGlB,
    EAAUC,
    GA
    AOT,
    EAAMue,
    EAAUre,
    KAGrDH,
    EAAEoK,
    SAAW,
    SAAUyB,
    EAAUnL,
    EAAMR,
    GAErC,
    GADAoe,
    MACMzS,
    YAh
    DRmQ,
    IAgDwCnQ,
    YAAoB + F,
    IACxD,
    KAAM,
    IAAIhK,
    OAAM,
    6 BAElB,
    IAAI,
    gBAAoBlH,
    IAAQ,
    kBAAsBR,
    G
    ACpD,
    KAAM,
    IAAI0H,
    OAAM,
    mBAElBiE,
    GAASlK,
    GAAGlB,
    EAAUC,
    GAAOT,
    EAAMC,
    KAGrCF,
    EAAEsK,
    YAA
    c,
    SAAU5J,
    EAAMR,
    GAE9B,
    GADAoe,
    IACI,
    gBAAoB5d,
    IAAQ,
    kBAAsBR,
    GACpD,
    KAAM,
    IAAI0H,
    OAAM,
    kB
    AClB3G,
    QAAO8M,
    QAAQjM,
    IAAIrB,
    EAAUC,
    GAAOR,
    EAAGE,
    yBAGzCJ,
    EAAEuK,
    cAAgB,
    SAAUsB,
    EAAUnL,
    GAEpC,
    GADA4d,
    MACMzS,
    YAlERmQ,
    IAkEwCnQ,
    YAAoB + F,
    IACxD,
    KAAM,
    IAAIhK,
    OAAM,
    6 BAClBiE,
    GA
    AS / J,
    IAAIrB,
    EAAUC,
    KAGzBV,
    EAAEye,
    eAAiB,
    SAAU / d,
    GAC3B4d,
    IACArd,
    OAAO8M,
    QAAQjM,
    IAAIrB,
    EAAUC,
    IAC7BV,
    EAAE,
    8 BAA8BkH,
    KAAK,
    WACnC,
    GAAI2E,
    GAAW7L,
    EAAED,
    MAAM6B,
    KAAK,
    UACxBiK,
    I
    ACFA,
    EAAS / J,
    IAAIrB,
    EAAUC,
    OAM7BV,
    EAAE0e,
    KAAO,
    SAAUhe,
    EAAMmL,
    GFgpErB,
    GAAI8S,
    EE / oENL,
    IACA,
    IAAIM,
    GAAgB / S,
    YArFtBmQ,
    IAqFsDnQ,
    YAAoB + F,
    GACpEvR,
    EAAOlD,
    MAAMO,
    UAAUC,
    MAAM0B,
    KAAKJ,
    UAAW2f,
    EAAgB,
    EAAI,
    EACrEve,
    GAAKC,
    QAAQG,
    EAAUC,
    IAClBke,
    IACH / S,
    EAAW5K,
    OAAO8M,
    U
    AEpB4Q,
    EAAA9S,
    GAAStK,
    QAAAhB,
    MAAAoe,
    EAAA1hB,
    mBAAWoD,
    IcrFtBL,
    GAAEyL,
    QAAO,
    EAAMsC,
    GA
    Cb8Q,
    iBACEC,
    WACE5e,
    GAAI,
    SAAU6e,
    GAKZ,
    MAAOA,
    GAAIC,
    QAAU,
    KAAOD,
    EAAIC,
    OAAS,
    KAE3C / R,
    KA
    AK,
    GAEPgS,
    SACE / e,
    GAAI,
    SAAU6e,
    GAEZ,
    MAAOA,
    GAAIC,
    OAAS,
    KAAOD,
    EAAIC,
    QAAU,
    KAE3C / R,
    KAAK,
    IAITiS,
    kBAAmB,
    SAAUxe,
    EAAMR,
    EAAI + M,
    EAAKrD,
    GAO1C,
    MANAmE,
    GAAQ8Q,
    gBAAgBne,
    IACtBR,
    GA
    AIA,
    EACJ + M,
    IAAKA,
    IAAO,
    EACZrD,
    QAASA,
    OAGJ7J,
    QAKXgO,
    EAAQD,
    aAAa,
    UACnBvH,
    iBACE6J,
    GAAI,
    SACJtB,
    UAAa,
    SACbmQ,
    QAAW,
    UACXrV,
    QAAW,
    UAGbqC,
    eAAgB,
    SAAUvN,
    EAAOuO,
    EAAKrD,
    EAASiC,
    GA
    C7C,
    GACIsT,
    GACAC,
    EAFAxd,
    KAGAkN,
    EAAYlF,
    EAAQkF,
    aAAc,
    IAASlF,
    EAAQqV,
    QAAU,
    UAAY,
    UAE7E,
    IAAI,
    mBAAuBlR,
    GAAQ8Q,
    gBAAgB / P,
    GACjD,
    KAAM,
    IAAIlH,
    OAAM,
    0 CAA4CkH,
    EAAY,
    IAE1E7B,
    GAAMc,
    EAAQ8Q,
    gBAAgB / P,
    GAAW7B,
    KAAOA,
    EAG5CA,
    EAAI5F,
    QAAQ,
    cACd4F,
    EAAMA,
    EAAI / I,
    QAAQ,
    UAAWmb,
    mBAAmB3gB,
    IAEhDkD,
    EAAKiK,
    EAASvJ,
    QAAQmB,
    aAAa,
    SAAWoI,
    EAASvJ,
    QAAQmB,
    aAAa,
    OAAS / E,
    CA
    IvF,
    IAAI4gB,
    GAAgBtf,
    EAAEyL,
    QAAO,
    EAAM7B,
    EAAQA,
    YAAgBmE,
    EAAQ8Q,
    gBAAgB / P,
    GAAWlF,
    QAG9
    FuV,
    GAAcnf,
    EAAEyL,
    QAAO,
    MACrBwB,
    IAAKA,
    EACLrL,
    KAAMA,
    EACNwK,
    KAAM,
    OACLkT,
    GAGHzT,
    EAAS
    tK,
    QAAQ,
    oBAAqBsK,
    EAAUsT,
    GAEhDC,
    EAAMpf,
    EAAEuf,
    MAAMJ,
    GAGV,
    mBAAuBpR,
    GAAQ6I,
    eACjC7I,
    EAAQ6I,
    gBAGV,
    IAAImI,
    GAAMhR,
    EAAQ6I,
    aAAawI,
    GAAOrR,
    EAAQ6I,
    aAAawI,
    IAAQpf,
    EAAEwf,
    KAAK
    L,
    GAEtEM,
    EAAY,
    WACd,
    GAAIxY,
    GAAS8G,
    EAAQ8Q,
    gBAAgB / P,
    GAAW5O,
    GAAGb,
    KAAKwM,
    EAAUkT,
    EAAK
    9 R,
    EAAKrD,
    EAG5E,
    OAFK3C,
    KACHA,
    EAASjH,
    EAAEsJ,
    WAAWE,
    UACjBxJ,
    EAAEwH,
    KAAKP,
    GAGhB,
    OAAO
    8 X,
    GAAIW,
    KAAKD,
    EAAWA,
    IAG7BnT,
    cAGFyB,
    EAAQpM,
    GAAG,
    cAAe,
    WACxBoM,
    EAAQ6I,
    kBAGV7N,
    EAAK
    rL,
    UAAUwhB,
    kBAAoB,
    WAEjC,
    MADA9c,
    GAAMsC,
    SAAS,
    4 HACRqJ,
    EAAQmR,
    kBAAA3e,
    MAARwN,
    EAA6B9O,
    YCtGtC8O,
    EAAQO,
    YAAY,
    MAClBa,
    eAAgB,
    kCAChB / C,
    MACEU,
    MAAc,
    sCACdG,
    IAAc,
    oCACdlH,
    OAAc,
    u
    CACdD,
    QAAc,
    wCACdiH,
    OAAc,
    +BACdC,
    SAAc,
    sCAEhBsC,
    SAAgB,
    kCAChBC,
    SAAgB,
    0B AChBc,
    QAAgB,
    k
    CAChBI,
    IAAgB,
    oDAChBpD,
    IAAgB,
    kDAChBH,
    MAAgB,
    0 CAChBoD,
    UAAgB,
    iEAChBE,
    UAAgB,
    iEAChBjT,
    OAAgB,
    gFAChBmT,
    SAAgB,
    uCAChBC,
    SAAgB,
    uCAChBC,
    MAAgB,
    6 CAChBC,
    QAAgB,
    mCAGlB9C,
    EAAQC,
    UA
    AU,
    Kd7BlB,
    IAAA2R,
    GAkEe,
    GAAI7e,
    Ee3DnB6e,
    GAAW5d,
    SAPX,
    IAAAlC,
    GAAAkO,
    CjB09EE,
    OAAOlO ",
    "file": "parsley.min.js",
    "sourcesContent": ["/*!\n* Parsley.js\n* Version 2.8.0 -
        built Wed, Sep 13 th 2017, 11: 04 pm\ n * http: //parsleyjs.org\n* Guillaume Potier 
        - < guillaume @wisembly.com > \n * Marc - Andre Lafortune - < petroselinum @marc - andre.ca >
        \n * MIT Licensed\ n * /\n\n/ / The source code below is generated by babel as\ n // P
        arsley is written in ECMAScript 6\ n //\nvar _slice = Array.prototype.slice;\n\nva
        r _slicedToArray = (function() {
                function sliceIterator(arr, i) {
                    var _arr = [];
                    var _n = true;
                    var _d = false;
                    var _e = undefined;
                    try {
                        for (var _i = arr[Sym bol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                            _arr.push(_s.va lue);
                            if (i && _arr.length === i) break;
                        }
                    } catch (err) {
                        _d = true;
                        _e = err;
                    } finally {
                        try {
                            if (!_n && _i['return']) _i['return']();
                        } finally {
                            if (_d) t
                            hrow _e;
                        }
                    }
                    return _arr;
                }
                return function(arr, i) {
                    if (Array.isArray(arr)) {
                        return arr;
                    } else if (Symbol.iterator in Object(arr)) {
                        return sliceIterator(a rr, i);
                    } else {
                        throw new TypeError('Invalid attempt to destructure non-iterabl
                            e instance '); } }; })();\n\nvar _extends = Object.assign || function (target) { 
                            for (var i = 1; i < arguments.length; i++) {
                                var source = arguments[i];
                                for (var
                                        key in source) {
                                    if (Object.prototype.hasOwnProperty.call(source, key)) {
                                        targe
                                        t[key] = source[key];
                                    }
                                }
                            }
                            return target;
                        };\
                        n\ nfunction _toConsumableArray(arr) {
                            if (Array.isArray(arr)) {
                                for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];
                                return arr2;
                            } else {
                                return Array.from(arr);
                            }
                        }\
                        n\ n(function(global, factory) {
                            \
                            n typeof exports === 'object' && typeof modul
                            e !== 'undefined' ? module.exports = factory(require('jquery')) : typeof define ===
                                'function' && define.amd ? define(['jquery'], factory) : global.parsley = fa
                            ctory(global.jQuery);\
                            n
                        })(this, function($) {
                                \
                                n 'use strict';\
                                n\ n
                                var globalI
                                D = 1;\
                                n
                                var pastWarnings = {};\
                                n\ n
                                var Utils = {
                                    \
                                    n // Parsley DOM-API\n   
                                    // returns object from dom attributes and values\n    attr: function attr(eleme
                                    nt,
                                    namespace,
                                    obj) {
                                    \
                                    n
                                    var i;\
                                    n
                                    var attribute;\
                                    n
                                    var attributes;\
                                    n
                                    var regex = new RegExp('^' + namespace, 'i');\
                                    n\ n
                                    if ('undefined' = ==
                                        typeof obj) obj = {};
                                    else {
                                        \
                                        n // Clear all own properties. This won't 
                                        affect prototype 's values\n        for (i in obj) {\n          if (obj.hasOwnPro
                                        perty(i)) delete obj[i];\
                                    n
                                }\
                                n
                            }\
                            n\ n
                            if (!element) return obj;\ n\ n attributes = element.attributes;\ n
                            for (i = attributes.length; i--;) {
                                \
                                n attribute = attributes[i];\
                                n\ n
                                if (attribute && attribute.s pecified && regex.test(attribute.name)) {
                                    \
                                    n obj[this.camelize(attribute
                                        .name.slice(namespace.length))] = this.deserializeValue(attribute.value);\
                                    n
                                }\
                                n
                            }\
                            n\ n
                            return obj;\ n
                        }, \n\ n checkAttr: function checkAttr(
                            element, namespace, _checkAttr) {
                            \
                            n
                            return element.hasAttribute(namespace +
                                _checkAttr);\
                            n
                        }, \n\ n setAttr: function setAttr(element, namespace, attr,
                            value) {
                            \
                            n element.setAttribute(this.dasherize(namespace + attr), String(v alue));\
                            n
                        }, \n\ n getType: function getType(element) {
                            \
                            n
                            return elemen
                            t.getAttribute('type') || 'text';\
                            n
                        }, \n\ n generateID: function generateID() {
                            \
                            n
                            return '' + globalID++;\
                            n
                        }, \n\ n /** Third party functions **/ \ n deserializeValue: function deserializeValue(value) {
                            \
                            n
                            var num;\
                            n\ n
                            try {
                                \
                                n
                                return value ? value == \"true\" || (value == \"false\" ? fal
                                se: value == \"null\" ? null : !isNaN(num = Number(value)) ? num : /^[\\[\\{]/.
                                test(value) ? JSON.parse(value) : value): value;\
                            n
                        } catch (e) {
                            \
                            n
                            return value;\
                            n
                        }\
                        n
                    }, \n\ n // Zepto camelize function\n    camelize: 
                    function camelize(str) {
                        \
                        n
                        return str.replace(/-+(.)?/g, function(match, c hr) {
                            \
                            n
                            return chr ? chr.toUpperCase() : '';\
                            n
                        });\
                        n
                    }, \n\ n //
                    Zepto dasherize
                    function\ n dasherize: function dasherize(str) {
                        \
                        n retur
                        n str.replace(/::/g, '/').replace(/([A-Z]+)([A-Z][a-z])/g, '$1_$2').replace(/([a -
                            z\\ d])([A - Z]) / g, '$1_$2').replace(/_/g, '-').toLowerCase();\
                n
            }, \n\ n warn: function warn() {
                \
                n
                var _window$console;\
                n\ n
                if (window.console && 'function ' === typeof window.console.warn) (_window$console = window.console).war
                    n.apply(_window$console, arguments);\ n
                }, \n\ n warnOnce: function warnOnce(
                    msg) {
                    \
                    n
                    if (!pastWarnings[msg]) {
                        \
                        n pastWarnings[msg] = true;\
                        n
                        this.warn.apply(this, arguments);\
                        n
                    }\
                    n
                }, \n\ n _resetWarnings: fu
                nction _resetWarnings() {
                    \
                    n pastWarnings = {};\
                    n
                }, \n\ n trimString: f
                unction trimString(string) {
                    \
                    n
                    return string.replace(/^\\s+|\\s+$/g, '');\
                    n
                }, \n\ n parse: {
                    \
                    n date: function date(string) {
                        \
                        n
                        var parsed = string.match(/^(\\d{4,})-(\\d\\d)-(\\d\\d)$/);\
                        n
                        if (!parsed) return nu
                        ll;\
                        n\ n
                        var _parsed$map = parsed.map(function(x) {
                            \
                            n
                            return par
                            seInt(x, 10);\
                            n
                        });\
                        n\ n
                        var _parsed$map2 = _slicedToArray(_parsed$ map, 4);\
                        n\ n
                        var _ = _parsed$map2[0];\
                        n
                        var year = _parsed$map2[1];\
                        n
                        var month = _parsed$map2[2];\
                        n
                        var day = _parsed$map2[3];\
                        n\ n
                        var date = new Date(year, month - 1, day);\
                        n
                        if (date.getFullYear() !== year || date.getMonth() + 1 !== month || date.getDate() !== day) return nu
                        ll;\
                        n
                        return date;\
                        n
                    },
                    \n string: function string(_string) {
                        \
                        n
                        return _string;\
                        n
                    },
                    \n integer: function integer(string) {
                        \
                        n
                        if (isNaN(string)) return null;\
                        n
                        return parseInt(string, 10);\
                        n
                    },
                    \n number: function number(string) {
                        \
                        n
                        if (isNaN(string)) throw
                        null;\
                        n
                        return parseFloat(string);\
                        n
                    },
                    \n 'boolean': function _
                    boolean(string) {
                        \
                        n
                        return !/^\\s*false\\s*$/i.test(string);\
                        n
                    },
                    \n
                    object: function object(string) {
                        \
                        n
                        return Utils.deserializeValue(st ring);\
                        n
                    },
                    \n regexp: function regexp(_regexp) {
                        \
                        n
                        var flags =
                            '';\
                        n\ n // Test if RegExp is literal, if not, nothing to be done, otherwi
                        se, we need to isolate flags and pattern\ n
                        if (/^\\/.*\\/(?:[gimy]*)$/.te st(_regexp)) {
                            \
                            n // Replace the regexp literal string with the first ma
                            tch group: ([gimy] * )\ n // If no flag is present, this will be a blank s
                            tring\ n flags = _regexp.replace(/.*\\/([gimy] * ) $ / , '$1');\
                            n //
                            Again, replace the regexp literal string with the first match group: \n
                            // everything excluding the opening and closing slashes and the flags\n        
                            _regexp = _regexp.replace(new RegExp('^/(.*?)/' + flags + '$'), '$1');\
                            n
                        } else {
                            \
                            n // Anchor regexp:\n          _regexp = '^' + _regexp + '$'
                            ;\
                            n
                        }\
                        n
                        return new RegExp(_regexp, flags);\
                        n
                    }\
                    n
                }, \n\ n
                parseRequirement: function parseRequirement(requirementType, string) {
                    \
                    n v
                    ar converter = this.parse[requirementType || 'string'];\
                    n
                    if (!converter) t
                    hrow 'Unknown requirement specification: \"' + requirementType + '\"';\
                    n va
                    r converted = converter(string);\
                    n
                    if (converted === null) throw 'Requireme
                    nt is not a ' + requirementType + ': \"' + string + '\"';\n      return converte
                    d;\
                    n
                }, \n\ n namespaceEvents: function namespaceEvents(events, namespace) {
                    \
                    n events = this.trimString(events || '').split(/\\s+/);\
                    n
                    if (!events[0]) return '';\
                    n
                    return $.map(events, function(evt) {
                        \
                        n
                        return evt +
                            '.' + namespace;\
                        n
                    }).join(' ');\
                    n
                }, \n\ n difference: function dif
                ference(array, remove) {
                    \
                    n // This is O(N^2), should be optimized\n      va
                    r result = [];\
                    n $.each(array, function(_, elem) {
                        \
                        n
                        if (remove.ind exOf(elem) == -1) result.push(elem);\
                        n
                    });\
                    n
                    return result;\
                    n
                }, \n\
                n // Alter-ego to native Promise.all, but for jQuery\n    all: function all(p
                romises) {
                \
                n // jQuery treats $.when() and $.when(singlePromise) differentl
                y;
                let 's avoid that and add spurious elements\n      return $.when.apply($, _toC
                onsumableArray(promises).concat([42, 42]));\ n
        }, \
        n\ n // Object.create poly
        fill, see https: //developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Glob
        al_Objects / Object / create #Polyfill\ n objectCreate: Object.create || (function() {
                \
                n
                var Object = function Object() {};\
                n
                return function(prototype) {
                    \
                    n
                    if (arguments.length > 1) {
                        \
                        n
                        throw Error('Second argument
                            not supported ');\n        }\n        if (typeof prototype != '
                            object ') {\n     
                            throw TypeError('Argument must be an object');\ n
                        }\
                        n Object.p
                        rototype = prototype;\
                        n
                        var result = new Object();\
                        n Object.protot
                        ype = null;\
                        n
                        return result;\
                        n
                    };\
                    n
                })(), \n\ n _SubmitSelector:
            'input[type=\"submit\"], button:submit'\
            n
        };\n\ n // All these options could b
        e overriden and specified directly in DOM using\ n // `data-parsley-` default DO
        M - API\ n // eg: `inputs` can be set in DOM using `data-parsley-inputs=\"input, t
        extarea\ "`\n  // eg: `data-parsley-stop-on-first-failing-constraint=\"false\"`\n\
        n
        var Defaults = {
            \
            n // ### General\n\n    // Default data-namespace for DO
            M API\ n namespace: 'data-parsley-',
            \n\ n // Supported inputs by default\n  
            inputs: 'input, textarea, select',
            \n\ n // Excluded inputs by default\n    e
            xcluded: 'input[type=button], input[type=submit], input[type=reset], input[type=
            hidden]
        ',\n\n    // Stop validating field on highest priority failing constraint\
        n priorityEnabled: true, \n\ n // ### Field only\n\n    // identifier used 
        to group together inputs(e.g.radio buttons...)\ n multiple: null, \n\ n // 
        identifier(or array of identifiers) used to validate only a select group of inp
        uts\ n group: null, \n\ n // ### UI\n    // Enable\\Disable error messages\n 
        uiEnabled: true, \n\ n // Key events threshold before validation\n    valida
        tionThreshold: 3, \n\ n // Focused field on form validation error. 'first'|'las
        t '|'
        none '\n    focus: '
        first ',\n\n    // event(s) that will trigger validation b
        efore first failure.eg: `input`...\n trigger: false, \n\ n // event(s) that
        will trigger validation after first failure.\n triggerAfterFailure: 'input', \n\ n // Class that would be added on every failing validation Parsley field\n
        errorClass: 'parsley-error', \n\ n // Same for success validation\n    succ
        essClass: 'parsley-success', \n\ n // Return the `$element` that will receive t
        hese above success or error classes\ n // Could also be (and given directly fr
        om DOM) a valid selector like `'#div'`\
    n classHandler: function classHandler(
        Field) {},
    \n\ n // Return the `$element` where errors will be appended\n    //
    Could also be(and given directly from DOM) a valid selector like `'#div'`\
    n
    errorsContainer: function errorsContainer(Field) {},
    \n\ n // ul elem that wou
    ld receive errors ' list\n    errorsWrapper: ' < ul class = \"parsley-errors-list\">< /
    ul > ',\n\n    // li elem that would receive error message\n    errorTemplate: ' <
    li > < /li>'\n  };\n\n  var Base = function Base() {\n    this.__id__ = Utils.gener
    ateID();\n
};\
n\ n Base.prototype = {
    \
    n asyncSupport: true, // Deprecated\n\
    n _pipeAccordingToValidationResult: function _pipeAccordingToValidationResult() {
        \
        n
        var _this = this;\
        n\ n
        var pipe = function pipe() {
            \
            n
            var
                r = $.Deferred();\
            n
            if (true !== _this.validationResult) r.reject();\
            n
            return r.resolve().promise();\
            n
        };\
        n
        return [pipe, pipe];\
        n
    },
    \n\ n actualizeOptions: function actualizeOptions() {
        \
        n Utils.attr(this.element, this.options.namespace, this.domOptions);\
        n
        if (this.parent && thi s.parent.actualizeOptions) this.parent.actualizeOptions();\
        n
        return this;\
        n
    },
    \n\ n _resetOptions: function _resetOptions(initOptions) {
        \
        n this.d
        omOptions = Utils.objectCreate(this.parent.options);\
        n this.options = Utils
            .objectCreate(this.domOptions);\
        n // Shallow copy of ownProperties of initO
        ptions: \n
        for (var i in initOptions) {
            \
            n
            if (initOptions.hasOwnPrope rty(i)) this.options[i] = initOptions[i];\
            n
        }\
        n this.actualizeOptions();\
        n
    },
    \n\ n _listeners: null,
    \n\ n // Register a callback for the given 
    event name\ n // Callback is called with context as the first argument and the
    `this`\
    n // The context is the current parsley instance, or window.Parsley i
    f global\ n // A return value of `false` will interrupt the calls\n    on: fun
    ction on(name, fn) {
        \
        n this._listeners = this._listeners || {};\
        n
        var
            queue = this._listeners[name] = this._listeners[name] || [];\
        n queue.push(f n);\
        n\ n
        return this;\
        n
    },
    \n\ n // Deprecated. Use `on` instead\n    su
    bscribe: function subscribe(name, fn) {
        \
        n $.listenTo(this, name.toLowerCase(), fn);\
        n
    },
    \n\ n // Unregister a callback (or all if none is given) for t
    he given event name\ n off: function off(name, fn) {
        \
        n
        var queue = this._
        listeners && this._listeners[name];\
        n
        if (queue) {
            \
            n
            if (!fn) {
                \
                n
                delete this._listeners[name];\
                n
            } else {
                \
                n
                for (var i = q
                    ueue.length; i--;)
                    if (queue[i] === fn) queue.splice(i, 1);\
                n
            }\
            n
        }\
        n
        return this;\
        n
    },
    \n\ n // Deprecated. Use `off`\n    unsubscribe: fu
    nction unsubscribe(name, fn) {
        \
        n $.unsubscribeTo(this, name.toLowerCase());\
        n
    },
    \n\ n // Trigger an event of the given name\n    // A return value of 
    `false`
    interrupts the callback chain\ n // Returns false if execution was int
    errupted\ n trigger: function trigger(name, target, extraArg) {
        \
        n target
            = target || this;\
        n
        var queue = this._listeners && this._listeners[name];\
        n
        var result;\
        n
        var parentResult;\
        n
        if (queue) {
            \
            n
            for (var
                    i = queue.length; i--;) {
                \
                n result = queue[i].call(target, target, ext raArg);\
                n
                if (result === false) return result;\
                n
            }\
            n
        }\
        n
        if (this.parent) {
            \
            n
            return this.parent.trigger(name, target, extraArg);\
            n
        }\
        n
        return true;\
        n
    },
    \n\ n asyncIsValid: function asyncIsVal
    id(group, force) {
        \
        n Utils.warnOnce(\"asyncIsValid is deprecated; please us
            e whenValid instead\ ");\n      return this.whenValid({ group: group, force: forc
            e
        });\n
}, \n\ n _findRelated: function _findRelated() {
    \
    n
    return this.
    options.multiple ? $(this.parent.element.querySelectorAll('[' + this.options.nam espace + 'multiple=\"' + this.options.multiple + '\"]')) : this.$element;\
    n
}\
n
};\
n\ n
var convertArrayRequirement = function convertArrayRequirement(strin g, length) {
    \
    n
    var m = string.match(/^\\s*\\[(.*)\\]\\s*$/);\
    n
    if (!m) thr
    ow 'Requirement is not an array: \"' + string + '\"';\
    n
    var values = m[1].spl
    it(',').map(Utils.trimString);\
    n
    if (values.length !== length) throw 'Require
    ment has ' + values.length + '
    values when ' + length + '
    are needed ';\n    retu
    rn values;\
    n
};\
n\ n
var convertExtraOptionRequirement = function convertExtraO
ptionRequirement(requirementSpec, string, extraOptionReader) {
    \
    n
    var main = n
    ull;\
    n
    var extra = {};\
    n
    for (var key in requirementSpec) {
        \
        n
        if (key) {
            \
            n
            var value = extraOptionReader(key);\
            n
            if ('string' === typeo f value) value = Utils.parseRequirement(requirementSpec[key], value);\
            n e
            xtra[key] = value;\
            n
        } else {
            \
            n main = Utils.parseRequirement(requir ementSpec[key], string);\
            n
        }\
        n
    }\
    n
    return [main, extra];\
    n
};\
n\ n /
    / A Validator needs to implement the methods `validate` and `parseRequirements`\
n\ n
var Validator = function Validator(spec) {
    \
    n $.extend(true, this, spec);\
    n
};\
n\ n Validator.prototype = {
    \
    n // Returns `true` iff the given `value`
    is valid according the given requirements.\n validate: function validate(val ue, requirementFirstArg) {
        \
        n
        if (this.fn) {
            \
            n // Legacy style valida
            tor\ n\ n
            if (arguments.length > 3) // If more args then value, requirement
            , instance...\n requirementFirstArg = [].slice.call(arguments, 1, -1);
            // Skip first arg (value) and last (instance), combining the rest\n        retur
            n this.fn(value, requirementFirstArg);\
            n
        }\
        n\ n
        if (Array.isArray(value)) {
            \
            n
            if (!this.validateMultiple) throw 'Validator `' + this.name + '` d
            oes not handle multiple values ';\n        return this.validateMultiple.apply(thi
            s, arguments);\
        n
    } else {
        \
        n
        var instance = arguments[arguments.lengt h - 1];\
        n
        if (this.validateDate && instance._isDateInput()) {
            \
            n
            arguments[0] = Utils.parse.date(arguments[0]);\
            n
            if (arguments[0] === n ull) return false;\
            n
            return this.validateDate.apply(this, arguments);\
            n
        }\
        n
        if (this.validateNumber) {
            \
            n
            if (isNaN(value)) retur
            n false;\
            n arguments[0] = parseFloat(arguments[0]);\
            n
            return t
            his.validateNumber.apply(this, arguments);\
            n
        }\
        n
        if (this.validate String) {
            \
            n
            return this.validateString.apply(this, arguments);\
            n
        }\
        n
        throw 'Validator `' + this.name + '` only handles multiple values';\
        n
    }\
    n
}, \n\ n // Parses `requirements` into an array of arguments,\n  
// according to `this.requirementType`\n    parseRequirements: function parseR
equirements(requirements, extraOptionReader) {
    \
    n
    if ('string' !== typeof re quirements) {
        \
        n // Assume requirement already parsed\n        // but make
        sure we
        return an array\ n
        return Array.isArray(requirements) ? requireme
        nts: [requirements];\
        n
    }\
    n
    var type = this.requirementType;\
    n
    if (Array.isArray(type)) {
        \
        n
        var values = convertArrayRequirement(requireme nts, type.length);\
        n
        for (var i = 0; i < values.length; i++) values[i] =
            Utils.parseRequirement(type[i], values[i]);\
        n
        return values;\
        n
    }
    els
    e
    if ($.isPlainObject(type)) {
        \
        n
        return convertExtraOptionRequirement(typ e, requirements, extraOptionReader);\
        n
    } else {
        \
        n
        return [Utils.pars
            eRequirement(type, requirements)
        ];\
        n
    }\
    n
}, \n // Defaults:\n    requi
rementType: 'string', \n\ n priority: 2\ n\ n
};\
n\ n
var ValidatorRegistry = fu
nction ValidatorRegistry(validators, catalog) {
    \
    n this.__class__ = 'Validator
    Registry ';\n\n    // Default Parsley locale is en\n    this.locale = '
    en ';\n\n  
    this.init(validators || {}, catalog || {});\
    n
};\
n\ n
var typeTesters = {
\
n
email: /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\
uF900 - \\uFDCF\ \uFDF0 - \\uFFEF]) + (\\.([a - z] | \\d | [!#\\ $ % & '\\*\\+\\-\\/=\\?\\^_`{\\|
}~] | [\\u00A0 - \\uD7FF\ \uF900 - \\uFDCF\ \uFDF0 - \\uFFEF]) + ) * ) | ((\\x22)((((\\x20 | \\x09) * (\\x0d\\ x0a)) ? (\\x20 | \\x09) + ) ? (([\\x01 - \\x08\\ x0b\\ x0c\\ x0e - \\x1f\\ x7f] | \\x21 | [\\x23 - \\x5b] | [\\x5d - \\x7e] | [\\u00A0 - \\uD7FF\ \uF900 - \\uFDCF\ \uFDF0 - \\uFFEF]) | (\\\\([\\x01 - \\x09\\ x0b\\ x0c\\ x0d - \\x7f] | [\\u00A0 - \\uD7FF\ \uF900 - \\uFDCF\ \uFDF0 - \\u
FFEF
])))) * (((\\x20 | \\x09) * (\\x0d\\ x0a)) ? (\\x20 | \\x09) + ) ? (\\x22))) @((([a - z] | \\d | [\\u00A0 - \\uD7FF\ \uF900 - \\uFDCF\ \uFDF0 - \\uFFEF]) | (([a - z] | \\d | [\\u00A0 - \\uD7FF\\ uF
        900 - \\uFDCF\ \uFDF0 - \\uFFEF
    ])([a - z] | \\d | - | _ | ~ | [\\u00A0 - \\uD7FF\ \uF900 - \\uFDCF\\ uF
        DF0 - \\uFFEF
    ]) * ([a - z] | \\d | [\\u00A0 - \\uD7FF\ \uF900 - \\uFDCF\ \uFDF0 - \\uFFEF])))\\.) +
    (([a - z] | [\\u00A0 - \\uD7FF\ \uF900 - \\uFDCF\ \uFDF0 - \\uFFEF]) | (([a - z] | [\\u00A0 - \\uD7F
        F\ \uF900 - \\uFDCF\ \uFDF0 - \\uFFEF
    ])([a - z] | \\d | - | _ | ~ | [\\u00A0 - \\uD7FF\ \uF900 - \\uFDC
        F\ \uFDF0 - \\uFFEF
    ]) * ([a - z] | [\\u00A0 - \\uD7FF\ \uF900 - \\uFDCF\ \uFDF0 - \\uFFEF]))) $ / i, \n\ n // Follow https://www.w3.org/TR/html5/infrastructure.html#floating-point
    -
    numbers\ n number: /^-?(\\d*\\.)?\\d+(e[-+]?\\d+)?$/i, \n\ n integer: /^-?\\
d + $ / , \n\ n digits: /^\\d+$/, \n\ n alphanum: /^\\w+$/i, \n\ n date: {
\
n
test: function test(value) {
    \
    n
    return Utils.parse.date(value) !== null;\
    n
}\
n
}, \n\ n url: new RegExp(\"^\" +\n    // protocol identifier\n   \
"(?:(?:https?|ftp)://)?\" + // ** mod: make scheme optional\n    // user:pass 
authentication\ n\ "(?:\\\\S+(?::\\\\S*)?@)?\" + \"(?:\" +\n    // IP address 
exclusion\ n // private & local networks\n    // \"(?!(?:10|127)(?:\\\\.\\\\d{
1, 3
}) {
    3
})\
" +   // ** mod: allow local networks\n    // \"(?!(?:169\\\\.254|192\
\\\.168)(?:\\\\.\\\\d{1,3}){2})\" +  // ** mod: allow local networks\n    // \"( ?
!172\\\\.( ? : 1[6 - 9] | 2\\\\ d | 3[0 - 1])( ? : \\\\.\\\\d {
1,
3
}) {
2
})\
" +  // ** mod: allow 
local networks\ n // IP address dotted notation octets\n    // excludes loopba
ck network 0.0 .0 .0\ n // excludes reserved space >= 224.0.0.0\n    // excludes
network & broacast addresses\ n // (first & last IP address of each class)\n 
\ "(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])\" + \"(?:\\\\.(?:1?\\\\d{1,2
} | 2[0 - 4]\\\\ d | 25[0 - 5])) {
    2
}\
" + \"(?:\\\\.(?:[1-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|
25[0 - 4]))\
" + \"|\" +\n    // host name\n    '(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]- *
) * [a - z\\\ \u00a1 - \\\\uffff0 - 9] + )
' +\n    // domain name\n    '( ? : \\\\.( ? : [a - z\\\
    \u00a1 - \\\\uffff0 - 9
] - * ) * [a - z\\\ \u00a1 - \\\\uffff0 - 9] + ) * ' +\n    // TLD identifier\
n '(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,}))' + \")\" +\n    // port number\
n    \"(?::\\\\d{2,5})?\" +\n    // resource path\n    \"(?:/\\\\S*)?\" + \"$\",
'i')\ n
};\
n typeTesters.range = typeTesters.number;\
n\ n // See http://stacko
verflow.com / a / 10454560 / 8279\ n
var decimalPlaces = function decimalPlaces(num) {
    \
    n
    var match = ('' + num).match(/(?:\\.(\\d+))?(?:[eE]([+-]?\\d+))?$/);\
    n
    if (!match) {
        \
        n
        return 0;\
        n
    }\
    n
    return Math.max(0, \n // Number of 
        digits right of decimal point.\n(match[1] ? match[1].length : 0) - (\n //
            Adjust
            for scientific notation.\n match[2] ? +match[2] : 0));\
    n
};\
n\ n // 
parseArguments('number', ['1', '2']) => [1, 2]\ n
var ValidatorRegistry__parseAr
guments = function ValidatorRegistry__parseArguments(type, args) {
    \
    n
    return a
    rgs.map(Utils.parse[type]);\
    n
};\
n // operatorToValidator returns a validating
function
for an operator
function, applied to the given type\ n
var ValidatorRe
gistry__operatorToValidator = function ValidatorRegistry__operatorToValidator(ty pe, operator) {
    \
    n
    return function(value) {
        \
        n
        for (var _len = arguments.
            length, requirementsAndInput = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key <
            _len; _key++) {
            \
            n requirementsAndInput[_key - 1] = arguments[_key];\
            n
        }\
        n\ n requirementsAndInput.pop(); // Get rid of `input` argument\n      r
        eturn operator.apply(undefined, [value].concat(_toConsumableArray(ValidatorRegis try__parseArguments(type, requirementsAndInput))));\
        n
    };\
    n
};\
n\ n
var Valid
atorRegistry__comparisonOperator = function ValidatorRegistry__comparisonOperato
r(operator) {
\
n
return {
    \
    n validateDate: ValidatorRegistry__operatorToVa
    lidator('date', operator),
    \n validateNumber: ValidatorRegistry__operatorToV
    alidator('number', operator),
    \n requirementType: operator.length <= 2 ? 'st
    ring ' : ['
    string ', '
    string '], // Support operators with a 1 or 2 requirement(s)\
n      priority: 30\n    };\n  };\n\n  ValidatorRegistry.prototype = {\n    init: function init(validators, catalog) {
        \
        n this.catalog = catalog;\
        n // 
        Copy prototype 's validators:\n      this.validators = _extends({}, this.validato
        rs);\n\ n
    for (var name in validators) this.addValidator(name, validators[na me].fn, validators[name].priority);\n\ n window.Parsley.trigger('parsley:val
        idator: init ');\n    },\n\n    // Set new messages locale if we have dictionary l
        oaded in ParsleyConfig.i18n\ n setLocale: function setLocale(locale) {
            \
            n
            if ('undefined' === typeof this.catalog[locale]) throw new Error(locale + ' is n
                ot available in the catalog ');\n\n      this.locale = locale;\n\n      return th
                is;\ n
            }, \n\ n // Add a new messages catalog for a given locale. Set locale 
            for this catalog
            if set === `true`\
            n addCatalog: function addCatalog(locale,
                messages, set) {
                \
                n
                if ('object' === typeof messages) this.catalog[locale] =
                    messages;\
                n\ n
                if (true === set) return this.setLocale(locale);\
                n\ n re
                turn this;\
                n
            }, \n\ n // Add a specific message for a given constraint in a 
            given locale\ n addMessage: function addMessage(locale, name, message) {
                \
                n
                if ('undefined' === typeof this.catalog[locale]) this.catalog[locale] = {};\
                n\
                n this.catalog[locale][name] = message;\
                n\ n
                return this;\
                n
            }, \n\ n
            // Add messages for a given locale\n    addMessages: function addMessages(loca
            le, nameMessageObject) {
            \
            n
            for (var name in nameMessageObject) this.addMess
            age(locale, name, nameMessageObject[name]);\
            n\ n
            return this;\
            n
        }, \n\ n
        // Add a new validator\n    //\n    //    addValidator('custom', {\n    //     
        requirementType: ['integer', 'integer'], \n //        validateString: funct
        ion(value, from, to) {}, \n //        priority: 22,\n    //        messages: {
        \ n //          en: \"Hey, that's no good\",\n    //          fr: \"Aye aye, p
        as bon du tout\ ",\n    //        }\n    //    })\n    //\n    // Old API was add
        Validator(name, function, priority)\ n //\n    addValidator: function addValid
        ator(name, arg1, arg2) {
            \
            n
            if (this.validators[name]) Utils.warn('Validator\
                "' + name + '\" is already defined.');else if (Defaults.hasOwnProperty(name))  {
                    \
                    n Utils.warn('\"' + name + '\" is a restricted keyword and is not a val
                        id validator name.
                        ');\n        return;\n      }\n      return this._setValidator
                        .apply(this, arguments);\ n
                    }, \n\ n hasValidator: function hasValidator(name) {
                        \
                        n
                        return !!this.validators[name];\
                        n
                    }, \n\ n updateValidator: funct
                    ion updateValidator(name, arg1, arg2) {
                        \
                        n
                        if (!this.validators[name]) {
                            \
                            n
                            Utils.warn('Validator \"' + name + '\" is not already defined.');\
                            n
                            return this.addValidator.apply(this, arguments);\
                            n
                        }\
                        n
                        return this._s
                        etValidator.apply(this, arguments);\
                        n
                    }, \n\ n removeValidator: function rem
                    oveValidator(name) {
                        \
                        n
                        if (!this.validators[name]) Utils.warn('Validator \"
                            ' + name + '\
                            " is not defined.');\n\n      delete this.validators[name];\n\n    
                            return this;\ n
                        }, \n\ n _setValidator: function _setValidator(name, valida tor, priority) {
                            \
                            n
                            if ('object' !== typeof validator) {
                                \
                                n // Old sty
                                le validator, with `fn`
                                and `priority`\
                                n validator = {
                                    \
                                    n fn: val
                                    idator,
                                    \n priority: priority\ n
                                };\
                                n
                            }\
                            n
                            if (!validator
                                .validate) {
                                \
                                n validator = new Validator(validator);\
                                n
                            }\
                            n this
                                .validators[name] = validator;\
                            n\ n
                            for (var locale in validator.messages || {}) this.addMessage(locale, name, validator.messages[locale]);\
                            n\ n
                            return
                            this;\
                            n
                        }, \n\ n getErrorMessage: function getErrorMessage(constraint) {
                            \
                            n
                            var message;\
                            n\ n // Type constraints are a bit different, we have to ma
                            tch their requirements too to find right error message\ n
                            if ('type' === con straint.name) {
                                \
                                n
                                var typeMessages = this.catalog[this.locale][constraint
                                    .name
                                ] || {};\
                                n message = typeMessages[constraint.requirements];\
                                n
                            } else message = this.formatMessage(this.catalog[this.locale][constraint.name], c onstraint.requirements);\
                            n\ n
                            return message || this.catalog[this.locale].de
                            faultMessage || this.catalog.en.defaultMessage;\
                            n
                        }, \n\ n // Kind of light 
                        `sprintf()`
                        implementation\ n formatMessage: function formatMessage(string, pa rameters) {
                            \
                            n
                            if ('object' === typeof parameters) {
                                \
                                n
                                for (var i in
                                        parameters) string = this.formatMessage(string, parameters[i]);\
                                n\ n retur
                                n string;\
                                n
                            }\
                            n\ n
                            return 'string' === typeof string ? string.replace(/ %
                                s / i, parameters) : '';\
                            n
                        }, \n\ n // Here is the Parsley default validators
                        list.\n // A validator is an object with the following key values:\n    //  
                            -
                            priority: an integer\ n //  - requirement: 'string' (default), 'integer', 'n
                        umber ', '
                        regexp ' or an Array of these\n    //  - validateString, validateMultipl
                        e, validateNumber: functions returning `true`, `false`
                        or a promise\ n // Alte
                        rnatively, a validator can be a
                        function that returns such an object\ n //\n  
                        validators: {
                            \
                            n notblank: {
                                \
                                n validateString: function validateStr
                                ing(value) {
                                    \
                                    n
                                    return (/\\S/.test(value)\ n);\
                                    n
                                },
                                \n
                                priority: 2\ n
                            },
                            \n required: {
                                \
                                n validateMultiple: functio
                                n validateMultiple(values) {
                                    \
                                    n
                                    return values.length > 0;\
                                    n
                                },
                                \n
                                validateString: function validateString(value) {
                                    \
                                    n
                                    return (/\\S/
                                        .test(value)\ n);\
                                    n
                                },
                                \n priority: 512\ n
                            },
                            \n t
                            ype: {
                                \
                                n validateString: function validateString(value, type) {
                                    \
                                    n
                                    var _ref = arguments.length <= 2 || arguments[2] === undefined ? {} : argument
                                    s[2];\
                                    n\ n
                                    var _ref$step = _ref.step;\
                                    n
                                    var step = _ref$step == = undefined ? 'any' : _ref$step;\
                                    n
                                    var _ref$base = _ref.base;\
                                    n
                                    var base = _ref$base === undefined ? 0 : _ref$base;\
                                    n\ n
                                    var tester =
                                        typeTesters[type];\
                                    n
                                    if (!tester) {
                                        \
                                        n
                                        throw new Error('valid
                                            ator type `' + type + '`
                                            is not supported ');\n          }\n          if (!tester
                                            .test(value)) return false;\
                                        n
                                        if ('number' === type) {
                                            \
                                            n
                                            if (!/^any$/i.test(step || '')) {
                                                \
                                                n
                                                var nb = Number(value);\
                                                n
                                                var decimals = Math.max(decimalPlaces(step), decimalPlaces(base));\
                                                n
                                                if (decimalPlaces(nb) > decimals) // Value can't have too many decimals\n
                                                    return false;\
                                                n // Be careful of rounding errors by
                                                using integers.\n
                                                var toInt = function toInt(f) {
                                                    \
                                                    n
                                                    return Math.round(f * Math.pow(10, decimals));\
                                                    n
                                                };\
                                                n
                                                if ((toInt(nb) - toInt(base)) % toInt(step) != 0) return false;\
                                                n
                                            }\
                                            n
                                        }\
                                        n
                                        return true;\
                                        n
                                    }, \n requirementType: {
                                        \
                                        n '': 'string',
                                        \n step: 'string',
                                        \n base: 'number'\
                                        n
                                    }, \n priority: 256\ n
                                },
                                \n pattern: {
                                    \
                                    n validateStrin
                                    g: function validateString(value, regexp) {
                                        \
                                        n
                                        return regexp.test(value);\
                                        n
                                    },
                                    \n requirementType: 'regexp',
                                    \n priority: 64\ n
                                },
                                \n minlength: {
                                    \
                                    n validateString: function validateString(value, re quirement) {
                                        \
                                        n
                                        return value.length >= requirement;\
                                        n
                                    },
                                    \n
                                    requirementType: 'integer',
                                    \n priority: 30\ n
                                },
                                \n maxlength: {
                                    \
                                    n validateString: function validateString(value, requirement) {
                                        \
                                        n
                                        return value.length <= requirement;\
                                        n
                                    },
                                    \n requirementType: 'in
                                    teger ',\n        priority: 30\n      },\n      length: {\n        validateString: function validateString(value, min, max) {
                                        \
                                        n
                                        return value.length >= m in && value.length <= max;\
                                        n
                                    },
                                    \n requirementType: ['integer', 'in
                                        teger '],\n        priority: 30\n      },\n      mincheck: {\n        validateMul
                                        tiple: function validateMultiple(values, requirement) {
                                            \
                                            n
                                            return values
                                                .length >= requirement;\
                                            n
                                        }, \
                                        n requirementType: 'integer', \n
                                        priority: 30\ n
                                    },
                                    \n maxcheck: {
                                        \
                                        n validateMultiple: function
                                        validateMultiple(values, requirement) {
                                            \
                                            n
                                            return values.length <= requi
                                            rement;\
                                            n
                                        },
                                        \n requirementType: 'integer',
                                        \n priority: 30\ n
                                    },
                                    \n check: {
                                        \
                                        n validateMultiple: function validateMultiple(va lues, min, max) {
                                            \
                                            n
                                            return values.length >= min && values.length <= max;\
                                            n
                                        },
                                        \n requirementType: ['integer', 'integer'],
                                        \n priorit
                                        y: 30\ n
                                    },
                                    \n min: ValidatorRegistry__comparisonOperator(function(valu e, requirement) {
                                        \
                                        n
                                        return value >= requirement;\
                                        n
                                    }),
                                    \n max: V
                                    alidatorRegistry__comparisonOperator(function(value, requirement) {
                                        \
                                        n re
                                        turn value <= requirement;\
                                        n
                                    }),
                                    \n range: ValidatorRegistry__compariso
                                    nOperator(function(value, min, max) {
                                        \
                                        n
                                        return value >= min && value <=
                                            max;\
                                        n
                                    }),
                                    \n equalto: {
                                        \
                                        n validateString: function validateStri
                                        ng(value, refOrValue) {
                                            \
                                            n
                                            var $reference = $(refOrValue);\
                                            n
                                            if ($reference.length) return value === $reference.val();
                                            else return value === ref
                                            OrValue;\
                                            n
                                        },
                                        \n priority: 256\ n
                                    }\
                                    n
                                }\
                                n
                            };\n\ n
                            var UI = {};\n\ n
                            var diffResults = function diffResults(newResult, oldResult, deep) {
                                \
                                n
                                var added = [];\
                                n
                                var kept = [];\
                                n\ n
                                for (var i = 0; i < newResult.leng th; i++) {
                                    \
                                    n
                                    var found = false;\
                                    n\ n
                                    for (var j = 0; j < oldResult.leng th; j++)
                                        if (newResult[i].assert.name === oldResult[j].assert.name) {
                                            \
                                            n f
                                            ound = true;\
                                            n
                                            break;\
                                            n
                                        }\ n\ n
                                    if (found) kept.push(newResult[i]);
                                    else added.push(newResult[i]);\
                                    n
                                }\
                                n\ n
                                return {
                                    \
                                    n kept: kept,
                                    \n
                                    added: added,
                                    \n removed: !deep ? diffResults(oldResult, newResult, true).
                                    added: []\ n
                                };\
                                n
                            };\n\ n UI.Form = {
                                \
                                n\ n _actualizeTriggers: function _a
                                ctualizeTriggers() {
                                    \
                                    n
                                    var _this2 = this;\
                                    n\ n this.$element.on('submit
                                        .Parsley ', function (evt) {\n        _this2.onSubmitValidate(evt);\n      });\n 
                                        this.$element.on('click.Parsley', Utils._SubmitSelector, function(evt) {
                                            \
                                            n
                                            _this2.onSubmitButton(evt);\
                                            n
                                        });\ n\ n // UI could be disabled\
                                        n
                                        if (false === this.options.uiEnabled) return;\ n\ n this.element.setAt tribute('novalidate', '');\ n
                                    }, \n\ n focus: function focus() {
                                        \
                                        n this.
                                        _focusedField = null;\
                                        n\ n
                                        if (true === this.validationResult || 'none' ===
                                            this.options.focus) return null;\
                                        n\ n
                                        for (var i = 0; i < this.fields.length; i++) {
                                            \
                                            n
                                            var field = this.fields[i];\
                                            n
                                            if (true !== field.valida tionResult && field.validationResult.length > 0 && 'undefined' === typeof field.options.noFocus) {
                                                \
                                                n this._focusedField = field.$element;\
                                                n
                                                if ('first' === this.options.focus) break;\
                                                n
                                            }\
                                            n
                                        }\
                                        n\ n
                                        if (null = ==
                                            this._focusedField) return null;\
                                        n\ n
                                        return this._focusedField.focus();\
                                        n
                                    }, \n\ n _destroyUI: function _destroyUI() {
                                        \
                                        n // Reset all event lis
                                        teners\ n this.$element.off('.Parsley');\
                                        n
                                    }\
                                    n\ n
                                };\n\ n UI.Field = {
                                    \
                                    n\
                                    n _reflowUI: function _reflowUI() {
                                        \
                                        n this._buildUI();\
                                        n\ n // If th
                                        is field doesn 't have an active UI don'
                                        t bother doing something\ n
                                        if (!this
                                            ._ui) return;\
                                        n\ n // Diff between two validation results\n      var diff = 
                                        diffResults(this.validationResult, this._ui.lastValidationResult);\
                                        n\ n // T
                                        hen store current validation result
                                        for next reflow\ n this._ui.lastValidati
                                        onResult = this.validationResult;\
                                        n\ n // Handle valid / invalid / none fiel
                                        d class\ n this._manageStatusClass();\
                                        n\ n // Add, remove, updated error
                                        s messages\ n this._manageErrorsMessages(diff);\
                                        n\ n // Triggers impl\n 
                                        this._actualizeTriggers();\
                                        n\ n // If field is not valid for the first 
                                        time, bind keyup trigger to ease UX and quickly inform user\ n
                                        if ((diff.kep t.length || diff.added.length) && !this._failedOnce) {
                                            \
                                            n this._failedOnce = true;\
                                            n this._actualizeTriggers();\
                                            n
                                        }\
                                        n
                                    },
                                    \n\ n // Returns 
                                    an array of field 's error message(s)\n    getErrorsMessages: function getErrorsM
                                    essages() {
                                        \
                                        n // No error message, field is valid\n      if (true === this.
                                        validationResult) return [];\n\ n
                                    var messages = [];\n\ n
                                    for (var i = 0; i < this.validationResult.length; i++) messages.push(this.validationResult[i].errorMessage || this._getErrorMessage(this.validationResult[i].assert));\n\ n
                                    return messages;\n
                                },
                                \n\ n // It's a goal of Parsley that this method is 
                                no longer required[#1073]\n    addError: function addError(name) {\n      var _
ref2 = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\ n\ n
                                    var message = _ref2.message;\ n
                                    var assert = _ref2.assert;\ n v ar _ref2$updateClass = _ref2.updateClass;\ n
                                    var updateClass = _ref2$updateC
                                    lass === undefined ? true : _ref2$updateClass;\ n\ n this._buildUI();\ n this._addError(name, {
                                        message: message,
                                        assert: assert
                                    });\ n\ n
                                    if (updateC lass) this._errorClass();\ n
                                },
                                \n\ n // It's a goal of Parsley that this met
                                hod is no longer required[#1073]\n    updateError: function updateError(name) {
\n      var _ref3 = arguments.length <= 1 || arguments[1] === undefined ? {} : a rguments[1];\ n\ n
                                    var message = _ref3.message;\ n
                                    var assert = _ref3.ass
                                    ert;\ n
                                    var _ref3$updateClass = _ref3.updateClass;\ n
                                    var updateClass =
                                        _ref3$updateClass === undefined ? true : _ref3$updateClass;\ n\ n this._build UI();\ n this._updateError(name, {
                                        message: message,
                                        assert: assert
                                    });\ n\ n
                                    if (updateClass) this._errorClass();\ n
                                },
                                \n\ n // It's a goal of Parsl
                                ey that this method is no longer required[#1073]\n    removeError: function rem
oveError(name) {\n      var _ref4 = arguments.length <= 1 || arguments[1] === un defined ? {} : arguments[1];\ n\ n
                                    var _ref4$updateClass = _ref4.updateClass;\ n
                                    var updateClass = _ref4$updateClass === undefined ? true : _ref4$updateC
                                    lass;\ n\ n this._buildUI();\ n this._removeError(name);\ n\ n // edge
                                    case possible here: remove a standard Parsley error that is still failing in th is.validationResult\ n // but highly improbable cuz' manually removing a wel
                                    l Parsley handled error makes no sense.\n
                                    if (updateClass) this._manageStat
                                    usClass();\ n
                                },
                                \n\ n _manageStatusClass: function _manageStatusClass() {
                                    \
                                    n
                                    if (this.hasConstraints() && this.needsValidation() && true === this.valida tionResult) this._successClass();
                                    else if (this.validationResult.length > 0) this
                                        ._errorClass();
                                    else this._resetClass();\
                                    n
                                },
                                \n\ n _manageErrorsMessages: fu
                                nction _manageErrorsMessages(diff) {
                                    \
                                    n
                                    if ('undefined' !== typeof this.opti ons.errorsMessagesDisabled) return;\
                                    n\ n // Case where we have errorMessage 
                                    option that configure an unique field error message, regardless failing validato
                                    rs\ n
                                    if ('undefined' !== typeof this.options.errorMessage) {
                                        \
                                        n
                                        if (d iff.added.length || diff.kept.length) {
                                            \
                                            n this._insertErrorWrapper();\
                                            n\ n
                                            if (0 === this._ui.$errorsWrapper.find('.parsley-custom-error-messag
                                                    e ').length) this._ui.$errorsWrapper.append($(this.options.errorTemplate).addClas
                                                    s('parsley-custom-error-message'));\ n\ n
                                                return this._ui.$errorsWrapper.
                                                addClass('filled').find('.parsley-custom-error-message').html(this.options.error Message);\ n
                                            }\
                                            n\ n
                                            return this._ui.$errorsWrapper.removeClass('fill
                                                ed ').find('.parsley - custom - error - message ').remove();\n      }\n\n      // Show, 
                                                hide, update failing constraints messages\ n
                                                for (var i = 0; i < diff.remove d.length; i++) this._removeError(diff.removed[i].assert.name);\ n\ n
                                                for (i =
                                                    0; i < diff.added.length; i++) this._addError(diff.added[i].assert.name, {
                                                    mess
                                                    age: diff.added[i].errorMessage,
                                                    assert: diff.added[i].assert
                                                });\ n\ n
                                                for (
                                                    i = 0; i < diff.kept.length; i++) this._updateError(diff.kept[i].assert.name, {
                                                    message: diff.kept[i].errorMessage,
                                                    assert: diff.kept[i].assert
                                                });\ n
                                            }, \n\ n
                                            _addError: function _addError(name, _ref5) {
                                                \
                                                n
                                                var message = _ref5.messa
                                                ge;\
                                                n
                                                var assert = _ref5.assert;\
                                                n\ n this._insertErrorWrapper();\
                                                n
                                                this._ui.$errorsWrapper.addClass('filled').append($(this.options.errorTemplate).addClass('parsley-' + name).html(message || this._getErrorMessage(assert)));\
                                                n
                                            }, \n\ n _updateError: function _updateError(name, _ref6) {
                                                \
                                                n
                                                var mess
                                                age = _ref6.message;\
                                                n
                                                var assert = _ref6.assert;\
                                                n\ n this._ui.$errors
                                                Wrapper.addClass('filled').find('.parsley-' + name).html(message || this._getErr orMessage(assert));\
                                                n
                                            }, \n\ n _removeError: function _removeError(name) {
                                                \
                                                n
                                                this._ui.$errorsWrapper.removeClass('filled').find('.parsley-' + name).rem
                                                ove();\
                                                n
                                            }, \n\ n _getErrorMessage: function _getErrorMessage(constraint) {
                                                \
                                                n
                                                var customConstraintErrorMessage = constraint.name + 'Message';\
                                                n\ n
                                                if ('undefined' !== typeof this.options[customConstraintErrorMessage]) return wi
                                                ndow.Parsley.formatMessage(this.options[customConstraintErrorMessage], constrain t.requirements);\
                                                n\ n
                                                return window.Parsley.getErrorMessage(constraint);\
                                                n
                                            }, \n\ n _buildUI: function _buildUI() {
                                                \
                                                n // UI could be already built 
                                                or disabled\ n
                                                if (this._ui || false === this.options.uiEnabled) return;\
                                                n\ n
                                                var _ui = {};\
                                                n\ n // Give field its Parsley id in DOM\n      this.ele
                                                ment.setAttribute(this.options.namespace + 'id', this.__id__);\
                                                n\ n
                                                /** Gene
rate important UI elements and store them in this **/
                                                \ n // $errorClassHandl
                                                er is the $element that woul have parsley - error and parsley - success classes\ n
                                                _ui.$errorClassHandler = this._manageClassHandler();\
                                                n\ n // $errorsWrapp
                                                er is a div that would contain the various field errors, it will be appended int
                                                o $errorsContainer\ n _ui.errorsWrapperId = 'parsley-id-' + (this.options.mu ltiple ? 'multiple-' + this.options.multiple : this.__id__);\
                                                n _ui.$errorsW
                                                rapper = $(this.options.errorsWrapper).attr('id', _ui.errorsWrapperId);\
                                                n\ n
                                                // ValidationResult UI storage to detect what have changed bwt two validations,
                                                and update DOM accordingly\ n _ui.lastValidationResult = [];\
                                                n _ui.val
                                                idationInformationVisible = false;\
                                                n\ n // Store it in this for later\n     
                                                this._ui = _ui;\
                                                n
                                            }, \n\ n // Determine which element will have `parsley-er
                                            ror` and `
                                            parsley - success` classes\n    _manageClassHandler: function _manageCla
ssHandler() {\n      // Class handled could also be determined by function given
 in Parsley options\n      if ('string' === typeof this.options.classHandler && 
$(this.options.classHandler).length) return $(this.options.classHandler);\n\n   
   // Class handled could also be determined by function given in Parsley option
s\n      var $handlerFunction = this.options.classHandler;\n\n      // It might 
also be the function name of a global function\n      if ('string' === typeof th
is.options.classHandler && 'function' === typeof window[this.options.classHandle
r]) $handlerFunction = window[this.options.classHandler];\n\n      if ('function
' === typeof $handlerFunction) {\n        var $handler = $handlerFunction.call(t
his, this);\n\n        // If this function returned a valid existing DOM element
, go for it\n        if ('undefined' !== typeof $handler && $handler.length) ret
urn $handler;\n      } else if ('object' === typeof $handlerFunction && $handler
Function instanceof jQuery && $handlerFunction.length) {\n        return $handle
rFunction;\n      } else if ($handlerFunction) {\n        Utils.warn('The class 
handler `
                                            ' + $handlerFunction + '
                                            ` does not exist in DOM nor as a global JS func
tion');\n      }\n\n      return this._inputHolder();\n    },\n\n    _inputHolde
r: function _inputHolder() {\n      // if simple element (input, texatrea, selec
t...) it will perfectly host the classes and precede the error container\n      
if (!this.options.multiple || this.element.nodeName === 'SELECT') return this.$e
lement;\n\n      // But if multiple element (radio, checkbox), that would be the
ir parent\n      return this.$element.parent();\n    },\n\n    _insertErrorWrapp
er: function _insertErrorWrapper() {\n      var $errorsContainer = this.options.
errorsContainer;\n\n      // Nothing to do if already inserted\n      if (0 !== 
this._ui.$errorsWrapper.parent().length) return this._ui.$errorsWrapper.parent()
;\n\n      if ('string' === typeof $errorsContainer) {\n        if ($($errorsCon
tainer).length) return $($errorsContainer).append(this._ui.$errorsWrapper);else 
if ('function' === typeof window[$errorsContainer]) $errorsContainer = window[$e
rrorsContainer];else Utils.warn('The errors container `
                                            ' + $errorsContainer + '
                                            `
 does not exist in DOM nor as a global JS function');\n      }\n\n      if ('fun
ction' === typeof $errorsContainer) $errorsContainer = $errorsContainer.call(thi
s, this);\n\n      if ('object' === typeof $errorsContainer && $errorsContainer.
length) return $errorsContainer.append(this._ui.$errorsWrapper);\n\n      return
 this._inputHolder().after(this._ui.$errorsWrapper);\n    },\n\n    _actualizeTr
iggers: function _actualizeTriggers() {\n      var _this3 = this;\n\n      var $
toBind = this._findRelated();\n      var trigger;\n\n      // Remove Parsley eve
nts already bound on this field\n      $toBind.off('.Parsley');\n      if (this.
_failedOnce) $toBind.on(Utils.namespaceEvents(this.options.triggerAfterFailure, 
'Parsley'), function () {\n        _this3._validateIfNeeded();\n      });else if
 (trigger = Utils.namespaceEvents(this.options.trigger, 'Parsley')) {\n        $
toBind.on(trigger, function (event) {\n          _this3._validateIfNeeded(event)
;\n        });\n      }\n    },\n\n    _validateIfNeeded: function _validateIfNe
eded(event) {\n      var _this4 = this;\n\n      // For keyup, keypress, keydown
, input... events that could be a little bit obstrusive\n      // do not validat
e if val length < min threshold on first validation. Once field have been valida
ted once and info\n      // about success or failure have been displayed, always
 validate with this trigger to reflect every yalidation change.\n      if (event
 && /key|input/.test(event.type)) if (!(this._ui && this._ui.validationInformati
onVisible) && this.getValue().length <= this.options.validationThreshold) return
;\n\n      if (this.options.debounce) {\n        window.clearTimeout(this._debou
nced);\n        this._debounced = window.setTimeout(function () {\n          ret
urn _this4.validate();\n        }, this.options.debounce);\n      } else this.va
lidate();\n    },\n\n    _resetUI: function _resetUI() {\n      // Reset all eve
nt listeners\n      this._failedOnce = false;\n      this._actualizeTriggers();\
n\n      // Nothing to do if UI never initialized for this field\n      if ('und
efined' === typeof this._ui) return;\n\n      // Reset all errors' li\n      thi
s._ui.$errorsWrapper.removeClass('filled').children().remove();\n\n      // Rese
t validation class\n      this._resetClass();\n\n      // Reset validation flags
 and last validation result\n      this._ui.lastValidationResult = [];\n      th
is._ui.validationInformationVisible = false;\n    },\n\n    _destroyUI: function
 _destroyUI() {\n      this._resetUI();\n\n      if ('undefined' !== typeof this
._ui) this._ui.$errorsWrapper.remove();\n\n      delete this._ui;\n    },\n\n   
 _successClass: function _successClass() {\n      this._ui.validationInformation
Visible = true;\n      this._ui.$errorClassHandler.removeClass(this.options.erro
rClass).addClass(this.options.successClass);\n    },\n    _errorClass: function 
_errorClass() {\n      this._ui.validationInformationVisible = true;\n      this
._ui.$errorClassHandler.removeClass(this.options.successClass).addClass(this.opt
ions.errorClass);\n    },\n    _resetClass: function _resetClass() {\n      this
._ui.$errorClassHandler.removeClass(this.options.successClass).removeClass(this.
options.errorClass);\n    }\n  };\n\n  var Form = function Form(element, domOpti
ons, options) {\n    this.__class__ = 'Form';\n\n    this.element = element;\n  
  this.$element = $(element);\n    this.domOptions = domOptions;\n    this.optio
ns = options;\n    this.parent = window.Parsley;\n\n    this.fields = [];\n    t
his.validationResult = null;\n  };\n\n  var Form__statusMapping = { pending: nul
l, resolved: true, rejected: false };\n\n  Form.prototype = {\n    onSubmitValid
ate: function onSubmitValidate(event) {\n      var _this5 = this;\n\n      // Th
is is a Parsley generated submit event, do not validate, do not prevent, simply 
exit and keep normal behavior\n      if (true === event.parsley) return;\n\n    
  // If we didn't come here through a submit button, use the first one in the fo
rm\n      var submitSource = this._submitSource || this.$element.find(Utils._Sub
mitSelector)[0];\n      this._submitSource = null;\n      this.$element.find('.p
arsley-synthetic-submit-button').prop('disabled', true);\n      if (submitSource
 && null !== submitSource.getAttribute('formnovalidate')) return;\n\n      windo
w.Parsley._remoteCache = {};\n\n      var promise = this.whenValidate({ event: e
vent });\n\n      if ('resolved' === promise.state() && false !== this._trigger(
'submit')) {\n        // All good, let event go through. We make this distinctio
n because browsers\n        // differ in their handling of `
                                            submit` being called
 from inside a submit event [#1047]\n      } else {\n          // Rejected or pe
nding: cancel this submit\n          event.stopImmediatePropagation();\n        
  event.preventDefault();\n          if ('pending' === promise.state()) promise.
done(function () {\n            _this5._submit(submitSource);\n          });\n  
      }\n    },\n\n    onSubmitButton: function onSubmitButton(event) {\n      t
his._submitSource = event.currentTarget;\n    },\n    // internal\n    // _submi
t submits the form, this time without going through the validations.\n    // Car
e must be taken to \"fake\" the actual submit button being clicked.\n    _submit
: function _submit(submitSource) {\n      if (false === this._trigger('submit'))
 return;\n      // Add submit button's data\n      if (submitSource) {\n        
var $synthetic = this.$element.find('.parsley-synthetic-submit-button').prop('di
sabled', false);\n        if (0 === $synthetic.length) $synthetic = $('<input cl
ass=\"parsley-synthetic-submit-button\" type=\"hidden\">').appendTo(this.$elemen
t);\n        $synthetic.attr({\n          name: submitSource.getAttribute('name'
),\n          value: submitSource.getAttribute('value')\n        });\n      }\n\
n      this.$element.trigger(_extends($.Event('submit'), { parsley: true }));\n 
   },\n\n    // Performs validation on fields while triggering events.\n    // @
returns `
                                            true` if all validations succeeds, `
                                            false`\n    // if a failure is imme
diately detected, or `
                                            null`\n    // if dependant on a promise.\n    // Consider 
using `
                                            whenValidate` instead.\n    validate: function validate(options) {\n     
 if (arguments.length >= 1 && !$.isPlainObject(options)) {\n        Utils.warnOn
ce('Calling validate on a parsley form without passing arguments as an object is
 deprecated.');\n\n        var _arguments = _slice.call(arguments);\n\n        v
ar group = _arguments[0];\n        var force = _arguments[1];\n        var event
 = _arguments[2];\n\n        options = { group: group, force: force, event: even
t };\n      }\n      return Form__statusMapping[this.whenValidate(options).state
()];\n    },\n\n    whenValidate: function whenValidate() {\n      var _Utils$al
l$done$fail$always,\n          _this6 = this;\n\n      var _ref7 = arguments.len
gth <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n      var group =
 _ref7.group;\n      var force = _ref7.force;\n      var event = _ref7.event;\n\
n      this.submitEvent = event;\n      if (event) {\n        this.submitEvent =
 _extends({}, event, { preventDefault: function preventDefault() {\n            
Utils.warnOnce(\"Using `
                                            this.submitEvent.preventDefault()` is deprecated; instea
d, call `
                                            this.validationResult = false`\");\n            _this6.validationResult
 = false;\n          } });\n      }\n      this.validationResult = true;\n\n    
  // fire validate event to eventually modify things before every validation\n  
    this._trigger('validate');\n\n      // Refresh form DOM options and form's f
ields that could have changed\n      this._refreshFields();\n\n      var promise
s = this._withoutReactualizingFormOptions(function () {\n        return $.map(_t
his6.fields, function (field) {\n          return field.whenValidate({ force: fo
rce, group: group });\n        });\n      });\n\n      return (_Utils$all$done$f
ail$always = Utils.all(promises).done(function () {\n        _this6._trigger('su
ccess');\n      }).fail(function () {\n        _this6.validationResult = false;\
n        _this6.focus();\n        _this6._trigger('error');\n      }).always(fun
ction () {\n        _this6._trigger('validated');\n      })).pipe.apply(_Utils$a
ll$done$fail$always, _toConsumableArray(this._pipeAccordingToValidationResult())
);\n    },\n\n    // Iterate over refreshed fields, and stop on first failure.\n
    // Returns `
                                            true` if all fields are valid, `
                                            false` if a failure is detected\
n    // or `
                                            null` if the result depends on an unresolved promise.\n    // Prefer
 using `
                                            whenValid` instead.\n    isValid: function isValid(options) {\n      if 
(arguments.length >= 1 && !$.isPlainObject(options)) {\n        Utils.warnOnce('
Calling isValid on a parsley form without passing arguments as an object is depr
ecated.');\n\n        var _arguments2 = _slice.call(arguments);\n\n        var g
roup = _arguments2[0];\n        var force = _arguments2[1];\n\n        options =
 { group: group, force: force };\n      }\n      return Form__statusMapping[this
.whenValid(options).state()];\n    },\n\n    // Iterate over refreshed fields an
d validate them.\n    // Returns a promise.\n    // A validation that immediatel
y fails will interrupt the validations.\n    whenValid: function whenValid() {\n
      var _this7 = this;\n\n      var _ref8 = arguments.length <= 0 || arguments
[0] === undefined ? {} : arguments[0];\n\n      var group = _ref8.group;\n      
var force = _ref8.force;\n\n      this._refreshFields();\n\n      var promises =
 this._withoutReactualizingFormOptions(function () {\n        return $.map(_this
7.fields, function (field) {\n          return field.whenValid({ group: group, f
orce: force });\n        });\n      });\n      return Utils.all(promises);\n    
},\n\n    refresh: function refresh() {\n      this._refreshFields();\n      ret
urn this;\n    },\n\n    // Reset UI\n    reset: function reset() {\n      // Fo
rm case: emit a reset event for each field\n      for (var i = 0; i < this.field
s.length; i++) this.fields[i].reset();\n\n      this._trigger('reset');\n    },\
n\n    // Destroy Parsley instance (+ UI)\n    destroy: function destroy() {\n  
    // Field case: emit destroy event to clean UI and then destroy stored instan
ce\n      this._destroyUI();\n\n      // Form case: destroy all its fields and t
hen destroy stored instance\n      for (var i = 0; i < this.fields.length; i++) 
this.fields[i].destroy();\n\n      this.$element.removeData('Parsley');\n      t
his._trigger('destroy');\n    },\n\n    _refreshFields: function _refreshFields(
) {\n      return this.actualizeOptions()._bindFields();\n    },\n\n    _bindFie
lds: function _bindFields() {\n      var _this8 = this;\n\n      var oldFields =
 this.fields;\n\n      this.fields = [];\n      this.fieldsMappedById = {};\n\n 
     this._withoutReactualizingFormOptions(function () {\n        _this8.$elemen
t.find(_this8.options.inputs).not(_this8.options.excluded).each(function (_, ele
ment) {\n          var fieldInstance = new window.Parsley.Factory(element, {}, _
this8);\n\n          // Only add valid and not excluded `
                                            Field` and `
                                            FieldMultip
                                            le` children\n          if (('Field' === fieldInstance.__class__ || 'FieldMultip
le' === fieldInstance.__class__) && true !== fieldInstance.options.excluded) {\n
            var uniqueId = fieldInstance.__class__ + '-' + fieldInstance.__id__;
\n            if ('undefined' === typeof _this8.fieldsMappedById[uniqueId]) {\n 
             _this8.fieldsMappedById[uniqueId] = fieldInstance;\n              _
this8.fields.push(fieldInstance);\n            }\n          }\n        });\n\n  
      $.each(Utils.difference(oldFields, _this8.fields), function (_, field) {\n
          field.reset();\n        });\n      });\n      return this;\n    },\n\n
    // Internal only.\n    // Looping on a form's fields to do validation or sim
ilar\n    // will trigger reactualizing options on all of them, which\n    // in
 turn will reactualize the form's options.\n    // To avoid calling actualizeOpt
ions so many times on the form\n    // for nothing, _withoutReactualizingFormOpt
ions temporarily disables\n    // the method actualizeOptions on this form while
 `
                                            fn` is called.\n    _withoutReactualizingFormOptions: function _withoutReactua
lizingFormOptions(fn) {\n      var oldActualizeOptions = this.actualizeOptions;\
n      this.actualizeOptions = function () {\n        return this;\n      };\n  
    var result = fn();\n      this.actualizeOptions = oldActualizeOptions;\n    
  return result;\n    },\n\n    // Internal only.\n    // Shortcut to trigger an
 event\n    // Returns true iff event is not interrupted and default not prevent
ed.\n    _trigger: function _trigger(eventName) {\n      return this.trigger('fo
rm:' + eventName);\n    }\n\n  };\n\n  var Constraint = function Constraint(pars
leyField, name, requirements, priority, isDomConstraint) {\n    var validatorSpe
c = window.Parsley._validatorRegistry.validators[name];\n    var validator = new
 Validator(validatorSpec);\n    priority = priority || parsleyField.options[name
 + 'Priority'] || validator.priority;\n    isDomConstraint = true === isDomConst
raint;\n\n    _extends(this, {\n      validator: validator,\n      name: name,\n
      requirements: requirements,\n      priority: priority,\n      isDomConstra
int: isDomConstraint\n    });\n    this._parseRequirements(parsleyField.options)
;\n  };\n\n  var capitalize = function capitalize(str) {\n    var cap = str[0].t
oUpperCase();\n    return cap + str.slice(1);\n  };\n\n  Constraint.prototype = 
{\n    validate: function validate(value, instance) {\n      var _validator;\n\n
      return (_validator = this.validator).validate.apply(_validator, [value].co
ncat(_toConsumableArray(this.requirementList), [instance]));\n    },\n\n    _par
seRequirements: function _parseRequirements(options) {\n      var _this9 = this;
\n\n      this.requirementList = this.validator.parseRequirements(this.requireme
nts, function (key) {\n        return options[_this9.name + capitalize(key)];\n 
     });\n    }\n  };\n\n  var Field = function Field(field, domOptions, options
, parsleyFormInstance) {\n    this.__class__ = 'Field';\n\n    this.element = fi
eld;\n    this.$element = $(field);\n\n    // Set parent if we have one\n    if 
('undefined' !== typeof parsleyFormInstance) {\n      this.parent = parsleyFormI
nstance;\n    }\n\n    this.options = options;\n    this.domOptions = domOptions
;\n\n    // Initialize some properties\n    this.constraints = [];\n    this.con
straintsByName = {};\n    this.validationResult = true;\n\n    // Bind constrain
ts\n    this._bindConstraints();\n  };\n\n  var parsley_field__statusMapping = {
 pending: null, resolved: true, rejected: false };\n\n  Field.prototype = {\n   
 // # Public API\n    // Validate field and trigger some events for mainly `
                                            UI`\
n    // @returns `
                                            true`, an array of the validators that failed, or\n    // `
                                            nul
                                            l` if validation is not finished. Prefer using whenValidate\n    validate: funct
ion validate(options) {\n      if (arguments.length >= 1 && !$.isPlainObject(opt
ions)) {\n        Utils.warnOnce('Calling validate on a parsley field without pa
ssing arguments as an object is deprecated.');\n        options = { options: opt
ions };\n      }\n      var promise = this.whenValidate(options);\n      if (!pr
omise) // If excluded with `
                                            group` option\n        return true;\n      switch (p
romise.state()) {\n        case 'pending':\n          return null;\n        case
 'resolved':\n          return true;\n        case 'rejected':\n          return
 this.validationResult;\n      }\n    },\n\n    // Validate field and trigger so
me events for mainly `
                                            UI`\n    // @returns a promise that succeeds only when all
 validations do\n    // or `
                                            undefined` if field is not in the given `
                                            group`.\n  
  whenValidate: function whenValidate() {\n      var _whenValid$always$done$fail
$always,\n          _this10 = this;\n\n      var _ref9 = arguments.length <= 0 |
| arguments[0] === undefined ? {} : arguments[0];\n\n      var force = _ref9.for
ce;\n      var group = _ref9.group;\n\n      // do not validate a field if not t
he same as given validation group\n      this.refresh();\n      if (group && !th
is._isInGroup(group)) return;\n\n      this.value = this.getValue();\n\n      //
 Field Validate event. `
                                            this.value` could be altered for custom needs\n      thi
s._trigger('validate');\n\n      return (_whenValid$always$done$fail$always = th
is.whenValid({ force: force, value: this.value, _refreshed: true }).always(funct
ion () {\n        _this10._reflowUI();\n      }).done(function () {\n        _th
is10._trigger('success');\n      }).fail(function () {\n        _this10._trigger
('error');\n      }).always(function () {\n        _this10._trigger('validated')
;\n      })).pipe.apply(_whenValid$always$done$fail$always, _toConsumableArray(t
his._pipeAccordingToValidationResult()));\n    },\n\n    hasConstraints: functio
n hasConstraints() {\n      return 0 !== this.constraints.length;\n    },\n\n   
 // An empty optional field does not need validation\n    needsValidation: funct
ion needsValidation(value) {\n      if ('undefined' === typeof value) value = th
is.getValue();\n\n      // If a field is empty and not required, it is valid\n  
    // Except if `
                                            data - parsley - validate -
                                                if - empty` explicitely added, useful for 
some custom validators\n      if (!value.length && !this._isRequired() && 'undef
ined' === typeof this.options.validateIfEmpty) return false;\n\n      return tru
e;\n    },\n\n    _isInGroup: function _isInGroup(group) {\n      if (Array.isAr
ray(this.options.group)) return -1 !== $.inArray(group, this.options.group);\n  
    return this.options.group === group;\n    },\n\n    // Just validate field. 
Do not trigger any event.\n    // Returns `
                                            true` iff all constraints pass, `
                                            fals
                                            e` if there are failures,\n    // or `
                                            null` if the result can not be determined 
yet (depends on a promise)\n    // See also `
                                            whenValid`.\n    isValid: function 
isValid(options) {\n      if (arguments.length >= 1 && !$.isPlainObject(options)
) {\n        Utils.warnOnce('Calling isValid on a parsley field without passing 
arguments as an object is deprecated.');\n\n        var _arguments3 = _slice.cal
l(arguments);\n\n        var force = _arguments3[0];\n        var value = _argum
ents3[1];\n\n        options = { force: force, value: value };\n      }\n      v
ar promise = this.whenValid(options);\n      if (!promise) // Excluded via `
                                            grou
                                            p`\n        return true;\n      return parsley_field__statusMapping[promise.stat
e()];\n    },\n\n    // Just validate field. Do not trigger any event.\n    // @
returns a promise that succeeds only when all validations do\n    // or `
                                            undefin
                                            ed` if the field is not in the given `
                                            group`.\n    // The argument `
                                            force` will 
force validation of empty fields.\n    // If a `
                                            value` is given, it will be vali
dated instead of the value of the input.\n    whenValid: function whenValid() {\
n      var _this11 = this;\n\n      var _ref10 = arguments.length <= 0 || argume
nts[0] === undefined ? {} : arguments[0];\n\n      var _ref10$force = _ref10.for
ce;\n      var force = _ref10$force === undefined ? false : _ref10$force;\n     
 var value = _ref10.value;\n      var group = _ref10.group;\n      var _refreshe
d = _ref10._refreshed;\n\n      // Recompute options and rebind constraints to h
ave latest changes\n      if (!_refreshed) this.refresh();\n      // do not vali
date a field if not the same as given validation group\n      if (group && !this
._isInGroup(group)) return;\n\n      this.validationResult = true;\n\n      // A
 field without constraint is valid\n      if (!this.hasConstraints()) return $.w
hen();\n\n      // Value could be passed as argument, needed to add more power t
o 'field:validate'\n      if ('undefined' === typeof value || null === value) va
lue = this.getValue();\n\n      if (!this.needsValidation(value) && true !== for
ce) return $.when();\n\n      var groupedConstraints = this._getGroupedConstrain
ts();\n      var promises = [];\n      $.each(groupedConstraints, function (_, c
onstraints) {\n        // Process one group of constraints at a time, we validat
e the constraints\n        // and combine the promises together.\n        var pr
omise = Utils.all($.map(constraints, function (constraint) {\n          return _
this11._validateConstraint(value, constraint);\n        }));\n        promises.p
ush(promise);\n        if (promise.state() === 'rejected') return false; // Inte
rrupt processing if a group has already failed\n      });\n      return Utils.al
l(promises);\n    },\n\n    // @returns a promise\n    _validateConstraint: func
tion _validateConstraint(value, constraint) {\n      var _this12 = this;\n\n    
  var result = constraint.validate(value, this);\n      // Map false to a failed
 promise\n      if (false === result) result = $.Deferred().reject();\n      // 
Make sure we return a promise and that we record failures\n      return Utils.al
l([result]).fail(function (errorMessage) {\n        if (!(_this12.validationResu
lt instanceof Array)) _this12.validationResult = [];\n        _this12.validation
Result.push({\n          assert: constraint,\n          errorMessage: 'string' =
== typeof errorMessage && errorMessage\n        });\n      });\n    },\n\n    //
 @returns Parsley field computed value that could be overrided or configured in 
DOM\n    getValue: function getValue() {\n      var value;\n\n      // Value cou
ld be overriden in DOM or with explicit options\n      if ('function' === typeof
 this.options.value) value = this.options.value(this);else if ('undefined' !== t
ypeof this.options.value) value = this.options.value;else value = this.$element.
val();\n\n      // Handle wrong DOM or configurations\n      if ('undefined' ===
 typeof value || null === value) return '';\n\n      return this._handleWhitespa
ce(value);\n    },\n\n    // Reset UI\n    reset: function reset() {\n      this
._resetUI();\n      return this._trigger('reset');\n    },\n\n    // Destroy Par
sley instance (+ UI)\n    destroy: function destroy() {\n      // Field case: em
it destroy event to clean UI and then destroy stored instance\n      this._destr
oyUI();\n      this.$element.removeData('Parsley');\n      this.$element.removeD
ata('FieldMultiple');\n      this._trigger('destroy');\n    },\n\n    // Actuali
ze options and rebind constraints\n    refresh: function refresh() {\n      this
._refreshConstraints();\n      return this;\n    },\n\n    _refreshConstraints: 
function _refreshConstraints() {\n      return this.actualizeOptions()._bindCons
traints();\n    },\n\n    refreshConstraints: function refreshConstraints() {\n 
     Utils.warnOnce(\"Parsley's refreshConstraints is deprecated. Please use ref
resh\");\n      return this.refresh();\n    },\n\n    /**\n    * Add a new const
raint to a field\n    *\n    * @param {String}   name\n    * @param {Mixed}    r
equirements      optional\n    * @param {Number}   priority          optional\n 
   * @param {Boolean}  isDomConstraint   optional\n    */\n    addConstraint: fu
nction addConstraint(name, requirements, priority, isDomConstraint) {\n\n      i
f (window.Parsley._validatorRegistry.validators[name]) {\n        var constraint
 = new Constraint(this, name, requirements, priority, isDomConstraint);\n\n     
   // if constraint already exist, delete it and push new version\n        if ('
undefined' !== this.constraintsByName[constraint.name]) this.removeConstraint(co
nstraint.name);\n\n        this.constraints.push(constraint);\n        this.cons
traintsByName[constraint.name] = constraint;\n      }\n\n      return this;\n   
 },\n\n    // Remove a constraint\n    removeConstraint: function removeConstrai
nt(name) {\n      for (var i = 0; i < this.constraints.length; i++) if (name ===
 this.constraints[i].name) {\n        this.constraints.splice(i, 1);\n        br
eak;\n      }\n      delete this.constraintsByName[name];\n      return this;\n 
   },\n\n    // Update a constraint (Remove + re-add)\n    updateConstraint: fun
ction updateConstraint(name, parameters, priority) {\n      return this.removeCo
nstraint(name).addConstraint(name, parameters, priority);\n    },\n\n    // # In
ternals\n\n    // Internal only.\n    // Bind constraints from config + options 
+ DOM\n    _bindConstraints: function _bindConstraints() {\n      var constraint
s = [];\n      var constraintsByName = {};\n\n      // clean all existing DOM co
nstraints to only keep javascript user constraints\n      for (var i = 0; i < th
is.constraints.length; i++) if (false === this.constraints[i].isDomConstraint) {
\n        constraints.push(this.constraints[i]);\n        constraintsByName[this
.constraints[i].name] = this.constraints[i];\n      }\n\n      this.constraints 
= constraints;\n      this.constraintsByName = constraintsByName;\n\n      // th
en re-add Parsley DOM-API constraints\n      for (var name in this.options) this
.addConstraint(name, this.options[name], undefined, true);\n\n      // finally, 
bind special HTML5 constraints\n      return this._bindHtml5Constraints();\n    
},\n\n    // Internal only.\n    // Bind specific HTML5 constraints to be HTML5 
compliant\n    _bindHtml5Constraints: function _bindHtml5Constraints() {\n      
// html5 required\n      if (null !== this.element.getAttribute('required')) thi
s.addConstraint('required', true, undefined, true);\n\n      // html5 pattern\n 
     if (null !== this.element.getAttribute('pattern')) this.addConstraint('patt
ern', this.element.getAttribute('pattern'), undefined, true);\n\n      // range\
n      var min = this.element.getAttribute('min');\n      var max = this.element
.getAttribute('max');\n      if (null !== min && null !== max) this.addConstrain
t('range', [min, max], undefined, true);\n\n      // HTML5 min\n      else if (n
ull !== min) this.addConstraint('min', min, undefined, true);\n\n        // HTML
5 max\n        else if (null !== max) this.addConstraint('max', max, undefined, 
true);\n\n      // length\n      if (null !== this.element.getAttribute('minleng
th') && null !== this.element.getAttribute('maxlength')) this.addConstraint('len
gth', [this.element.getAttribute('minlength'), this.element.getAttribute('maxlen
gth')], undefined, true);\n\n      // HTML5 minlength\n      else if (null !== t
his.element.getAttribute('minlength')) this.addConstraint('minlength', this.elem
ent.getAttribute('minlength'), undefined, true);\n\n        // HTML5 maxlength\n
        else if (null !== this.element.getAttribute('maxlength')) this.addConstr
aint('maxlength', this.element.getAttribute('maxlength'), undefined, true);\n\n 
     // html5 types\n      var type = Utils.getType(this.element);\n\n      // S
mall special case here for HTML5 number: integer validator if step attribute is 
undefined or an integer value, number otherwise\n      if ('number' === type) {\
n        return this.addConstraint('type', ['number', {\n          step: this.el
ement.getAttribute('step') || '1',\n          base: min || this.element.getAttri
bute('value')\n        }], undefined, true);\n        // Regular other HTML5 sup
ported types\n      } else if (/^(email|url|range|date)$/i.test(type)) {\n      
    return this.addConstraint('type', type, undefined, true);\n        }\n      
return this;\n    },\n\n    // Internal only.\n    // Field is required if have 
required constraint without `
                                            false` value\n    _isRequired: function _isRequired
() {\n      if ('undefined' === typeof this.constraintsByName.required) return f
alse;\n\n      return false !== this.constraintsByName.required.requirements;\n 
   },\n\n    // Internal only.\n    // Shortcut to trigger an event\n    _trigge
r: function _trigger(eventName) {\n      return this.trigger('field:' + eventNam
e);\n    },\n\n    // Internal only\n    // Handles whitespace in a value\n    /
/ Use `
                                            data - parsley - whitespace = \"squish\"` to auto squish input value\n    // Us
                                            e `data-parsley-whitespace=\"trim\"`
                                            to auto trim input value\ n _handleWhites
                                            pace: function _handleWhitespace(value) {
                                                \
                                                n
                                                if (true === this.options.trimV alue) Utils.warnOnce('data-parsley-trim-value=\"true\" is deprecated, please use
                                                    data - parsley - whitespace = \"trim\"');\n\n      if ('squish' === this.options.whit
                                                    espace) value = value.replace(/\\s{2,}/g, ' ');\
                                                n\ n
                                                if ('trim' === this.opt ions.whitespace || 'squish' === this.options.whitespace || true === this.options
                                                    .trimValue) value = Utils.trimString(value);\
                                                n\ n
                                                return value;\
                                                n
                                            }, \n\ n
                                            _isDateInput: function _isDateInput() {
                                                \
                                                n
                                                var c = this.constraintsByName
                                                    .type;\
                                                n
                                                return c && c.requirements === 'date';\
                                                n
                                            }, \n\ n // Internal 
                                            only.\n // Returns the constraints, grouped by descending priority.\n    // T
                                            he result is thus an array of arrays of constraints.\n _getGroupedConstraints: function _getGroupedConstraints() {
                                                \
                                                n
                                                if (false === this.options.priority Enabled) return [this.constraints];\
                                                n\ n
                                                var groupedConstraints = [];\
                                                n
                                                var index = {};\
                                                n\ n // Create array unique of priorities\n      for (var i
                                                    = 0;
                                                i < this.constraints.length;
                                                i++) {
                                                \
                                                n
                                                var p = this.constraints[i].p
                                                riority;\
                                                n
                                                if (!index[p]) groupedConstraints.push(index[p] = []);\
                                                n
                                                index[p].push(this.constraints[i]);\
                                                n
                                            }\
                                            n // Sort them by priority D
                                            ESC\ n groupedConstraints.sort(function(a, b) {
                                                \
                                                n
                                                return b[0].priori
                                                ty - a[0].priority;\
                                                n
                                            });\
                                            n\ n
                                            return groupedConstraints;\
                                            n
                                        }\
                                        n\ n
                                    };\
                                    n\ n
                                    var parsley_field = Field;\
                                    n\ n
                                    var Multiple = function Multiple() {
                                        \
                                        n
                                        this.__class__ = 'FieldMultiple';\
                                        n
                                    };\
                                    n\ n Multiple.prototype = {
                                        \
                                        n // Add
                                        new `$element`
                                        sibling
                                        for multiple field\ n addElement: function addElement(
                                            $element) {
                                            \
                                            n this.$elements.push($element);\
                                            n\ n
                                            return this;\
                                            n
                                        },
                                        \
                                        n\ n // See `Field._refreshConstraints()`\n    _refreshConstraints: function _
                                        refreshConstraints() {
                                            \
                                            n
                                            var fieldConstraints;\
                                            n\ n this.constraints = [];\
                                            n\ n // Select multiple special treatment\n      if (this.element.nodeNa
                                            me === 'SELECT') {
                                            \
                                            n this.actualizeOptions()._bindConstraints();\
                                            n\ n
                                            return this;\
                                            n
                                        }\
                                        n\ n // Gather all constraints for each input in th
                                        e multiple group\ n
                                        for (var i = 0; i < this.$elements.length; i++) {
                                            \
                                            n\ n
                                            // Check if element have not been dynamically removed since last binding\n 
                                            if (!$('html').has(this.$elements[i]).length) {
                                                \
                                                n this.$elements
                                                    .splice(i, 1);\
                                                n
                                                continue;\
                                                n
                                            }\
                                            n\ n fieldConstraints = thi
                                            s.$elements[i].data('FieldMultiple')._refreshConstraints().constraints;\
                                            n\ n
                                            for (var j = 0; j < fieldConstraints.length; j++) this.addConstraint(fieldCon straints[j].name, fieldConstraints[j].requirements, fieldConstraints[j].priority, fieldConstraints[j].isDomConstraint);\
                                            n
                                        }\
                                        n\ n
                                        return this;\n
                                    }, \n\ n // See `Field.getValue()`\n    getValue: function getValue() {\n      // V
                                    alue could be overriden in DOM\ n
                                    if ('function' === typeof this.options.val ue) return this.options.value(this);
                                    else if ('undefined' !== typeof this.options
                                        .value) return this.options.value;\
                                    n\ n // Radio input case\n      if (this.
                                    element.nodeName === 'INPUT') {
                                    \
                                    n
                                    var type = Utils.getType(this.element);\
                                    n
                                    if (type === 'radio') return this._findRelated().filter(':checked').va
                                    l() || '';\
                                    n\ n // checkbox input case\n        if (type === 'checkbox') {
                                    \ n
                                    var values = [];\
                                    n\ n this._findRelated().filter(':checked')
                                        .each(function() {
                                            \
                                            n values.push($(this).val());\
                                            n
                                        });\
                                    n\ n
                                    return values;\
                                    n
                                }\
                                n
                            }\
                            n\ n // Select multiple case\n  
                            if (this.element.nodeName === 'SELECT' && null === this.$element.val()) retu
                            rn[];\n\ n // Default case that should never happen\n      return this.$ele
                            ment.val();\n
                        }, \n\ n _init: function _init() {
                            \
                            n this.$elements = [th
                                is.$element
                            ];\
                            n\ n
                            return this;\
                            n
                        }\
                        n
                    };\
                    n\ n
                    var Factory = function Fac
                    tory(element, options, parsleyFormInstance) {
                        \
                        n this.element = element;\
                        n
                        this.$element = $(element);\
                        n\ n // If the element has already been bound, ret
                        urns its saved Parsley instance\ n
                        var savedparsleyFormInstance = this.$elemen
                        t.data('Parsley');\
                        n
                        if (savedparsleyFormInstance) {
                            \
                            n\ n // If the saved
                            instance has been bound without a Form parent and there is one given in this ca
                            ll, add it\ n
                            if ('undefined' !== typeof parsleyFormInstance && savedparsley FormInstance.parent === window.Parsley) {
                                \
                                n savedparsleyFormInstance.pare
                                nt = parsleyFormInstance;\
                                n savedparsleyFormInstance._resetOptions(savedp arsleyFormInstance.options);\
                                n
                            }\
                            n\ n
                            if ('object' === typeof options) {
                                \
                                n _extends(savedparsleyFormInstance.options, options);\
                                n
                            }\
                            n\ n
                            return savedparsleyFormInstance;\
                            n
                        }\
                        n\ n // Parsley must be instantiated
                        with a DOM element or jQuery $element\ n
                        if (!this.$element.length) throw new
                        Error('You must bind Parsley on an existing element.');\
                        n\ n
                        if ('undefined' !==
                            typeof parsleyFormInstance && 'Form' !== parsleyFormInstance.__class__) thro
                        w new Error('Parent instance must be a Form instance');\
                        n\ n this.parent = par
                        sleyFormInstance || window.Parsley;\
                        n
                        return this.init(options);\
                        n
                    };\
                    n\ n F
                    actory.prototype = {
                        \
                        n init: function init(options) {
                            \
                            n this.__class__ =
                                'Parsley';\
                            n this.__version__ = '2.8.0';\
                            n this.__id__ = Utils.genera
                            teID();\
                            n\ n // Pre-compute options\n      this._resetOptions(options);\n\n 
                            // A Form instance is obviously a `<form>` element but also every node that
                            is not an input and has the `data-parsley-validate`
                            attribute\ n
                            if (this.e lement.nodeName === 'FORM' || Utils.checkAttr(this.element, this.options.namespa ce, 'validate') && !this.$element.is(this.options.inputs)) return this.bind('par
                                sleyForm ');\n\n      // Every other element is bound as a `Field` or `FieldMulti
                                ple`\n      return this.isMultiple() ? this.handleMultiple() : this.bind('parsle
yField');\n    },\n\n    isMultiple: function isMultiple() {\n      var type = U
tils.getType(this.element);\n      return type === 'radio' || type === 'checkbox
' || this.element.nodeName === 'SELECT' && null !== this.element.getAttribute('m
ultiple');\n    },\n\n    // Multiples fields are a real nightmare :(\n    // Ma
ybe some refactoring would be appreciated here...\n    handleMultiple: function 
handleMultiple() {\n      var _this13 = this;\n\n      var name;\n      var mult
iple;\n      var parsleyMultipleInstance;\n\n      // Handle multiple name\n    
  this.options.multiple = this.options.multiple || (name = this.element.getAttri
bute('name')) || this.element.getAttribute('id');\n\n      // Special select mul
tiple input\n      if (this.element.nodeName === 'SELECT' && null !== this.eleme
nt.getAttribute('multiple')) {\n        this.options.multiple = this.options.mul
tiple || this.__id__;\n        return this.bind('parsleyFieldMultiple');\n\n    
    // Else for radio / checkboxes, we need a `
                                name` or `
                                data - parsley - multiple` 
to properly bind it\n      } else if (!this.options.multiple) {\n          Utils
.warn('To be bound by Parsley, a radio, a checkbox and a multiple select input m
ust have either a name or a multiple option.', this.$element);\n          return
 this;\n        }\n\n      // Remove special chars\n      this.options.multiple 
= this.options.multiple.replace(/(:|\\.|\\[|\\]|\\{|\\}|\\$)/g, '');\n\n      //
 Add proper `
                                data - parsley - multiple` to siblings if we have a valid multiple name
\n      if (name) {\n        $('input[name=\"' + name + '\"]').each(function (i,
 input) {\n          var type = Utils.getType(input);\n          if (type === 'r
adio' || type === 'checkbox') input.setAttribute(_this13.options.namespace + 'mu
ltiple', _this13.options.multiple);\n        });\n      }\n\n      // Check here
 if we don't already have a related multiple instance saved\n      var $previous
lyRelated = this._findRelated();\n      for (var i = 0; i < $previouslyRelated.l
ength; i++) {\n        parsleyMultipleInstance = $($previouslyRelated.get(i)).da
ta('Parsley');\n        if ('undefined' !== typeof parsleyMultipleInstance) {\n\
n          if (!this.$element.data('FieldMultiple')) {\n            parsleyMulti
pleInstance.addElement(this.$element);\n          }\n\n          break;\n       
 }\n      }\n\n      // Create a secret Field instance for every multiple field.
 It will be stored in `
                                data('FieldMultiple')`\n      // And will be useful later
 to access classic `
                                Field` stuff while being in a `
                                FieldMultiple` instance\n    
  this.bind('parsleyField', true);\n\n      return parsleyMultipleInstance || th
is.bind('parsleyFieldMultiple');\n    },\n\n    // Return proper `
                                Form`, `
                                Field`
 or `
                                FieldMultiple`\n    bind: function bind(type, doNotStore) {\n      var pars
leyInstance;\n\n      switch (type) {\n        case 'parsleyForm':\n          pa
rsleyInstance = $.extend(new Form(this.element, this.domOptions, this.options), 
new Base(), window.ParsleyExtend)._bindFields();\n          break;\n        case
 'parsleyField':\n          parsleyInstance = $.extend(new parsley_field(this.el
ement, this.domOptions, this.options, this.parent), new Base(), window.ParsleyEx
tend);\n          break;\n        case 'parsleyFieldMultiple':\n          parsle
yInstance = $.extend(new parsley_field(this.element, this.domOptions, this.optio
ns, this.parent), new Multiple(), new Base(), window.ParsleyExtend)._init();\n  
        break;\n        default:\n          throw new Error(type + 'is not a sup
ported Parsley type');\n      }\n\n      if (this.options.multiple) Utils.setAtt
r(this.element, this.options.namespace, 'multiple', this.options.multiple);\n\n 
     if ('undefined' !== typeof doNotStore) {\n        this.$element.data('Field
Multiple', parsleyInstance);\n\n        return parsleyInstance;\n      }\n\n    
  // Store the freshly bound instance in a DOM element for later access using jQ
uery `
                                data()`\n      this.$element.data('Parsley', parsleyInstance);\n\n      //
 Tell the world we have a new Form or Field instance!\n      parsleyInstance._ac
tualizeTriggers();\n      parsleyInstance._trigger('init');\n\n      return pars
leyInstance;\n    }\n  };\n\n  var vernums = $.fn.jquery.split('.');\n  if (pars
eInt(vernums[0]) <= 1 && parseInt(vernums[1]) < 8) {\n    throw \"The loaded ver
sion of jQuery is too old. Please upgrade to 1.8.x or better.\";\n  }\n  if (!ve
rnums.forEach) {\n    Utils.warn('Parsley requires ES5 to run properly. Please i
nclude https://github.com/es-shims/es5-shim');\n  }\n  // Inherit `
                                on`, `
                                off` & 
`
                                trigger` to Parsley:\n  var Parsley = _extends(new Base(), {\n    element: docu
ment,\n    $element: $(document),\n    actualizeOptions: null,\n    _resetOption
s: null,\n    Factory: Factory,\n    version: '2.8.0'\n  });\n\n  // Supplement 
Field and Form with Base\n  // This way, the constructors will have access to th
ose methods\n  _extends(parsley_field.prototype, UI.Field, Base.prototype);\n  _
extends(Form.prototype, UI.Form, Base.prototype);\n  // Inherit actualizeOptions
 and _resetOptions:\n  _extends(Factory.prototype, Base.prototype);\n\n  // ### 
jQuery API\n  // `
                                $('.elem').parsley(options)` or `
                                $('.elem').psly(options)`\n  
$.fn.parsley = $.fn.psly = function (options) {\n    if (this.length > 1) {\n   
   var instances = [];\n\n      this.each(function () {\n        instances.push(
$(this).parsley(options));\n      });\n\n      return instances;\n    }\n\n    /
/ Return undefined if applied to non existing DOM element\n    if (this.length =
= 0) {\n      return;\n    }\n\n    return new Factory(this[0], options);\n  };\
n\n  // ### Field and Form extension\n  // Ensure the extension is now defined i
f it wasn't previously\n  if ('undefined' === typeof window.ParsleyExtend) windo
w.ParsleyExtend = {};\n\n  // ### Parsley config\n  // Inherit from ParsleyDefau
lt, and copy over any existing values\n  Parsley.options = _extends(Utils.object
Create(Defaults), window.ParsleyConfig);\n  window.ParsleyConfig = Parsley.optio
ns; // Old way of accessing global options\n\n  // ### Globals\n  window.Parsley
 = window.psly = Parsley;\n  Parsley.Utils = Utils;\n  window.ParsleyUtils = {};
\n  $.each(Utils, function (key, value) {\n    if ('function' === typeof value) 
{\n      window.ParsleyUtils[key] = function () {\n        Utils.warnOnce('Acces
sing `
                                window.ParsleyUtils` is deprecated. Use `
                                window.Parsley.Utils` instead.');
\n        return Utils[key].apply(Utils, arguments);\n      };\n    }\n  });\n\n
  // ### Define methods that forward to the registry, and deprecate all access e
xcept through window.Parsley\n  var registry = window.Parsley._validatorRegistry
 = new ValidatorRegistry(window.ParsleyConfig.validators, window.ParsleyConfig.i
18n);\n  window.ParsleyValidator = {};\n  $.each('setLocale addCatalog addMessag
e addMessages getErrorMessage formatMessage addValidator updateValidator removeV
alidator hasValidator'.split(' '), function (i, method) {\n    window.Parsley[me
thod] = function () {\n      return registry[method].apply(registry, arguments);
\n    };\n    window.ParsleyValidator[method] = function () {\n      var _window
$Parsley;\n\n      Utils.warnOnce('Accessing the method \\'' + method + '\\' thr
ough Validator is deprecated. Simply call \\'window.Parsley.' + method + '(...)\
\'');\n      return (_window$Parsley = window.Parsley)[method].apply(_window$Par
sley, arguments);\n    };\n  });\n\n  // ### UI\n  // Deprecated global object\n
  window.Parsley.UI = UI;\n  window.ParsleyUI = {\n    removeError: function rem
oveError(instance, name, doNotUpdateClass) {\n      var updateClass = true !== d
oNotUpdateClass;\n      Utils.warnOnce('Accessing UI is deprecated. Call \\'remo
veError\\' on the instance directly. Please comment in issue 1073 as to your nee
d to call this method.');\n      return instance.removeError(name, { updateClass
: updateClass });\n    },\n    getErrorsMessages: function getErrorsMessages(ins
tance) {\n      Utils.warnOnce('Accessing UI is deprecated. Call \\'getErrorsMes
sages\\' on the instance directly.');\n      return instance.getErrorsMessages()
;\n    }\n  };\n  $.each('addError updateError'.split(' '), function (i, method)
 {\n    window.ParsleyUI[method] = function (instance, name, message, assert, do
NotUpdateClass) {\n      var updateClass = true !== doNotUpdateClass;\n      Uti
ls.warnOnce('Accessing UI is deprecated. Call \\'' + method + '\\' on the instan
ce directly. Please comment in issue 1073 as to your need to call this method.')
;\n      return instance[method](name, { message: message, assert: assert, updat
eClass: updateClass });\n    };\n  });\n\n  // ### PARSLEY auto-binding\n  // Pr
event it by setting `
                                ParsleyConfig.autoBind` to `
                                false`\n  if (false !== window.
ParsleyConfig.autoBind) {\n    $(function () {\n      // Works only on `
                                data - par sley - validate`.\n      if ($('[data-parsley-validate]').length) $('[data-parsley
-validate]').parsley();\n    });\n  }\n\n  var o = $({});\n  var deprecated = fu
nction deprecated() {\n    Utils.warnOnce(\"Parsley's pubsub module is deprecate
d; use the 'on' and 'off' methods on parsley instances or window.Parsley\");\n  
};\n\n  // Returns an event handler that calls `
                                fn` with the arguments it expect
s\n  function adapt(fn, context) {\n    // Store to allow unbinding\n    if (!fn
.parsleyAdaptedCallback) {\n      fn.parsleyAdaptedCallback = function () {\n   
     var args = Array.prototype.slice.call(arguments, 0);\n        args.unshift(
this);\n        fn.apply(context || o, args);\n      };\n    }\n    return fn.pa
rsleyAdaptedCallback;\n  }\n\n  var eventPrefix = 'parsley:';\n  // Converts 'pa
rsley:form:validate' into 'form:validate'\n  function eventName(name) {\n    if 
(name.lastIndexOf(eventPrefix, 0) === 0) return name.substr(eventPrefix.length);
\n    return name;\n  }\n\n  // $.listen is deprecated. Use Parsley.on instead.\
n  $.listen = function (name, callback) {\n    var context;\n    deprecated();\n
    if ('object' === typeof arguments[1] && 'function' === typeof arguments[2]) 
{\n      context = arguments[1];\n      callback = arguments[2];\n    }\n\n    i
f ('function' !== typeof callback) throw new Error('Wrong parameters');\n\n    w
indow.Parsley.on(eventName(name), adapt(callback, context));\n  };\n\n  $.listen
To = function (instance, name, fn) {\n    deprecated();\n    if (!(instance inst
anceof parsley_field) && !(instance instanceof Form)) throw new Error('Must give
 Parsley instance');\n\n    if ('string' !== typeof name || 'function' !== typeo
f fn) throw new Error('Wrong parameters');\n\n    instance.on(eventName(name), a
dapt(fn));\n  };\n\n  $.unsubscribe = function (name, fn) {\n    deprecated();\n
    if ('string' !== typeof name || 'function' !== typeof fn) throw new Error('W
rong arguments');\n    window.Parsley.off(eventName(name), fn.parsleyAdaptedCall
back);\n  };\n\n  $.unsubscribeTo = function (instance, name) {\n    deprecated(
);\n    if (!(instance instanceof parsley_field) && !(instance instanceof Form))
 throw new Error('Must give Parsley instance');\n    instance.off(eventName(name
));\n  };\n\n  $.unsubscribeAll = function (name) {\n    deprecated();\n    wind
ow.Parsley.off(eventName(name));\n    $('form,input,textarea,select').each(funct
ion () {\n      var instance = $(this).data('Parsley');\n      if (instance) {\n
        instance.off(eventName(name));\n      }\n    });\n  };\n\n  // $.emit is
 deprecated. Use jQuery events instead.\n  $.emit = function (name, instance) {\
n    var _instance;\n\n    deprecated();\n    var instanceGiven = instance insta
nceof parsley_field || instance instanceof Form;\n    var args = Array.prototype
.slice.call(arguments, instanceGiven ? 2 : 1);\n    args.unshift(eventName(name)
);\n    if (!instanceGiven) {\n      instance = window.Parsley;\n    }\n    (_in
stance = instance).trigger.apply(_instance, _toConsumableArray(args));\n  };\n\n
  var pubsub = {};\n\n  $.extend(true, Parsley, {\n    asyncValidators: {\n     
 'default': {\n        fn: function fn(xhr) {\n          // By default, only sta
tus 2xx are deemed successful.\n          // Note: we use status instead of stat
e() because responses with status 200\n          // but invalid messages (e.g. a
n empty body for content type set to JSON) will\n          // result in state() 
=== 'rejected'.\n          return xhr.status >= 200 && xhr.status < 300;\n      
  },\n        url: false\n      },\n      reverse: {\n        fn: function fn(xh
r) {\n          // If reverse option is set, a failing ajax request is considere
d successful\n          return xhr.status < 200 || xhr.status >= 300;\n        }
,\n        url: false\n      }\n    },\n\n    addAsyncValidator: function addAsy
ncValidator(name, fn, url, options) {\n      Parsley.asyncValidators[name] = {\n
        fn: fn,\n        url: url || false,\n        options: options || {}\n   
   };\n\n      return this;\n    }\n\n  });\n\n  Parsley.addValidator('remote', 
{\n    requirementType: {\n      '': 'string',\n      'validator': 'string',\n  
    'reverse': 'boolean',\n      'options': 'object'\n    },\n\n    validateStri
ng: function validateString(value, url, options, instance) {\n      var data = {
};\n      var ajaxOptions;\n      var csr;\n      var validator = options.valida
tor || (true === options.reverse ? 'reverse' : 'default');\n\n      if ('undefin
ed' === typeof Parsley.asyncValidators[validator]) throw new Error('Calling an u
ndefined async validator: `
                                ' + validator + '
                                `');\n\n      url = Parsley.asyncVal
idators[validator].url || url;\n\n      // Fill current value\n      if (url.ind
exOf('{value}') > -1) {\n        url = url.replace('{value}', encodeURIComponent
(value));\n      } else {\n        data[instance.element.getAttribute('name') ||
 instance.element.getAttribute('id')] = value;\n      }\n\n      // Merge option
s passed in from the function with the ones in the attribute\n      var remoteOp
tions = $.extend(true, options.options || {}, Parsley.asyncValidators[validator]
.options);\n\n      // All `
                                $.ajax(options)` could be overridden or extended dir
ectly from DOM in `
                                data - parsley - remote - options`\n      ajaxOptions = $.extend(tr
ue, {}, {\n        url: url,\n        data: data,\n        type: 'GET'\n      },
 remoteOptions);\n\n      // Generate store key based on ajax options\n      ins
tance.trigger('field:ajaxoptions', instance, ajaxOptions);\n\n      csr = $.para
m(ajaxOptions);\n\n      // Initialise querry cache\n      if ('undefined' === t
ypeof Parsley._remoteCache) Parsley._remoteCache = {};\n\n      // Try to retrie
ve stored xhr\n      var xhr = Parsley._remoteCache[csr] = Parsley._remoteCache[
csr] || $.ajax(ajaxOptions);\n\n      var handleXhr = function handleXhr() {\n  
      var result = Parsley.asyncValidators[validator].fn.call(instance, xhr, url
, options);\n        if (!result) // Map falsy results to rejected promise\n    
      result = $.Deferred().reject();\n        return $.when(result);\n      };\
n\n      return xhr.then(handleXhr, handleXhr);\n    },\n\n    priority: -1\n  }
);\n\n  Parsley.on('form:submit', function () {\n    Parsley._remoteCache = {};\
n  });\n\n  Base.prototype.addAsyncValidator = function () {\n    Utils.warnOnce
('Accessing the method `
                                addAsyncValidator` through an instance is deprecated. Si
mply call `
                                Parsley.addAsyncValidator(...)`');\n    return Parsley.addAsyncValida
tor.apply(Parsley, arguments);\n  };\n\n  // This is included with the Parsley l
ibrary itself,\n  // thus there is no use in adding it to your project.\n  Parsl
ey.addMessages('en', {\n    defaultMessage: \"This value seems to be invalid.\",
\n    type: {\n      email: \"This value should be a valid email.\",\n      url:
 \"This value should be a valid url.\",\n      number: \"This value should be a 
valid number.\",\n      integer: \"This value should be a valid integer.\",\n   
   digits: \"This value should be digits.\",\n      alphanum: \"This value shoul
d be alphanumeric.\"\n    },\n    notblank: \"This value should not be blank.\",
\n    required: \"This value is required.\",\n    pattern: \"This value seems to
 be invalid.\",\n    min: \"This value should be greater than or equal to %s.\",
\n    max: \"This value should be lower than or equal to %s.\",\n    range: \"Th
is value should be between %s and %s.\",\n    minlength: \"This value is too sho
rt. It should have %s characters or more.\",\n    maxlength: \"This value is too
 long. It should have %s characters or fewer.\",\n    length: \"This value lengt
h is invalid. It should be between %s and %s characters long.\",\n    mincheck: 
\"You must select at least %s choices.\",\n    maxcheck: \"You must select %s ch
oices or fewer.\",\n    check: \"You must select between %s and %s choices.\",\n
    equalto: \"This value should be the same.\"\n  });\n\n  Parsley.setLocale('e
n');\n\n  /**\n   * inputevent - Alleviate browser bugs for input events\n   * h
ttps://github.com/marcandre/inputevent\n   * @version v0.0.3 - (built Thu, Apr 1
4th 2016, 5:58 pm)\n   * @author Marc-Andre Lafortune <github@marc-andre.ca>\n  
 * @license MIT\n   */\n\n  function InputEvent() {\n    var _this14 = this;\n\n
    var globals = window || global;\n\n    // Slightly odd way construct our obj
ect. This way methods are force bound.\n    // Used to test for duplicate librar
y.\n    _extends(this, {\n\n      // For browsers that do not support isTrusted,
 assumes event is native.\n      isNativeEvent: function isNativeEvent(evt) {\n 
       return evt.originalEvent && evt.originalEvent.isTrusted !== false;\n     
 },\n\n      fakeInputEvent: function fakeInputEvent(evt) {\n        if (_this14
.isNativeEvent(evt)) {\n          $(evt.target).trigger('input');\n        }\n  
    },\n\n      misbehaves: function misbehaves(evt) {\n        if (_this14.isNa
tiveEvent(evt)) {\n          _this14.behavesOk(evt);\n          $(document).on('
change.inputevent', evt.data.selector, _this14.fakeInputEvent);\n          _this
14.fakeInputEvent(evt);\n        }\n      },\n\n      behavesOk: function behave
sOk(evt) {\n        if (_this14.isNativeEvent(evt)) {\n          $(document) // 
Simply unbinds the testing handler\n          .off('input.inputevent', evt.data.
selector, _this14.behavesOk).off('change.inputevent', evt.data.selector, _this14
.misbehaves);\n        }\n      },\n\n      // Bind the testing handlers\n      
install: function install() {\n        if (globals.inputEventPatched) {\n       
   return;\n        }\n        globals.inputEventPatched = '0.0.3';\n        var
 _arr = ['select', 'input[type=\"checkbox\"]', 'input[type=\"radio\"]', 'input[t
ype=\"file\"]'];\n        for (var _i = 0; _i < _arr.length; _i++) {\n          
var selector = _arr[_i];\n          $(document).on('input.inputevent', selector,
 { selector: selector }, _this14.behavesOk).on('change.inputevent', selector, { 
selector: selector }, _this14.misbehaves);\n        }\n      },\n\n      uninsta
ll: function uninstall() {\n        delete globals.inputEventPatched;\n        $
(document).off('.inputevent');\n      }\n\n    });\n  };\n\n  var inputevent = n
ew InputEvent();\n\n  inputevent.install();\n\n  var parsley = Parsley;\n\n  ret
urn parsley;\n});\n//# sourceMappingURL=parsley.js.map\n","(function (global, fa
ctory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? modul
e.exports = factory(require('jquery')) :\n  typeof define === 'function' && defi
ne.amd ? define(['jquery'], factory) :\n  global.parsley = factory(global.$)\n}(
this, function ($) { 'use strict';\n\n  var globalID = 1;\n  var pastWarnings = 
{};\n\n  var Utils = {\n    // Parsley DOM-API\n    // returns object from dom a
ttributes and values\n    attr: function (element, namespace, obj) {\n      var 
i;\n      var attribute;\n      var attributes;\n      var regex = new RegExp('^
' + namespace, 'i');\n\n      if ('undefined' === typeof obj)\n        obj = {};
\n      else {\n        // Clear all own properties. This won't affect prototype
's values\n        for (i in obj) {\n          if (obj.hasOwnProperty(i))\n     
       delete obj[i];\n        }\n      }\n\n      if (!element)\n        return
 obj;\n\n      attributes = element.attributes;\n      for (i = attributes.lengt
h; i--; ) {\n        attribute = attributes[i];\n\n        if (attribute && attr
ibute.specified && regex.test(attribute.name)) {\n          obj[this.camelize(at
tribute.name.slice(namespace.length))] = this.deserializeValue(attribute.value);
\n        }\n      }\n\n      return obj;\n    },\n\n    checkAttr: function (el
ement, namespace, checkAttr) {\n      return element.hasAttribute(namespace + ch
eckAttr);\n    },\n\n    setAttr: function (element, namespace, attr, value) {\n
      element.setAttribute(this.dasherize(namespace + attr), String(value));\n  
  },\n\n    getType: function(element) {\n      return element.getAttribute('typ
e') || 'text';\n    },\n\n    generateID: function () {\n      return '' + globa
lID++;\n    },\n\n    /** Third party functions **/\n    deserializeValue: funct
ion (value) {\n      var num;\n\n      try {\n        return value ?\n          
value == \"true\" ||\n          (value == \"false\" ? false :\n          value =
= \"null\" ? null :\n          !isNaN(num = Number(value)) ? num :\n          /^
[\\[\\{]/.test(value) ? JSON.parse(value) :\n          value)\n          : value
;\n      } catch (e) { return value; }\n    },\n\n    // Zepto camelize function
\n    camelize: function (str) {\n      return str.replace(/-+(.)?/g, function (
match, chr) {\n        return chr ? chr.toUpperCase() : '';\n      });\n    },\n
\n    // Zepto dasherize function\n    dasherize: function (str) {\n      return
 str.replace(/::/g, '/')\n        .replace(/([A-Z]+)([A-Z][a-z])/g, '$1_$2')\n  
      .replace(/([a-z\\d])([A-Z])/g, '$1_$2')\n        .replace(/_/g, '-')\n    
    .toLowerCase();\n    },\n\n    warn: function () {\n      if (window.console
 && 'function' === typeof window.console.warn)\n        window.console.warn(...a
rguments);\n    },\n\n    warnOnce: function(msg) {\n      if (!pastWarnings[msg
]) {\n        pastWarnings[msg] = true;\n        this.warn(...arguments);\n     
 }\n    },\n\n    _resetWarnings: function () {\n      pastWarnings = {};\n    }
,\n\n    trimString: function(string) {\n      return string.replace(/^\\s+|\\s+
$/g, '');\n    },\n\n    parse: {\n      date: function(string) {\n        let p
arsed = string.match(/^(\\d{4,})-(\\d\\d)-(\\d\\d)$/);\n        if (!parsed)\n  
        return null;\n        let [_, year, month, day] = parsed.map(x => parseI
nt(x, 10));\n        let date = new Date(year, month - 1, day);\n        if (dat
e.getFullYear() !== year || date.getMonth() + 1 !== month || date.getDate() !== 
day)\n          return null;\n        return date;\n      },\n      string: func
tion(string) {\n        return string;\n      },\n      integer: function(string
) {\n        if (isNaN(string))\n          return null;\n        return parseInt
(string, 10);\n      },\n      number: function(string) {\n        if (isNaN(str
ing))\n          throw null;\n        return parseFloat(string);\n      },\n    
  'boolean': function _boolean(string) {\n        return !(/^\\s*false\\s*$/i.te
st(string));\n      },\n      object: function(string) {\n        return Utils.d
eserializeValue(string);\n      },\n      regexp: function(regexp) {\n        va
r flags = '';\n\n        // Test if RegExp is literal, if not, nothing to be don
e, otherwise, we need to isolate flags and pattern\n        if (/^\\/.*\\/(?:[gi
my]*)$/.test(regexp)) {\n          // Replace the regexp literal string with the
 first match group: ([gimy]*)\n          // If no flag is present, this will be 
a blank string\n          flags = regexp.replace(/.*\\/([gimy]*)$/, '$1');\n    
      // Again, replace the regexp literal string with the first match group:\n 
         // everything excluding the opening and closing slashes and the flags\n
          regexp = regexp.replace(new RegExp('^/(.*?)/' + flags + '$'), '$1');\n
        } else {\n          // Anchor regexp:\n          regexp = '^' + regexp +
 '$';\n        }\n        return new RegExp(regexp, flags);\n      }\n    },\n\n
    parseRequirement: function(requirementType, string) {\n      var converter =
 this.parse[requirementType || 'string'];\n      if (!converter)\n        throw 
'Unknown requirement specification: \"' + requirementType + '\"';\n      let con
verted = converter(string);\n      if (converted === null)\n        throw `
                                Requi rement is not a $ {
                                    requirementType
                                }: \"${string}\"`;\n      return converted;\n  
                            }, \n\ n namespaceEvents: function(events, namespace) {
                                \
                                n events = this.
                                trimString(events || '').split(/\\s+/);\
                                n
                                if (!events[0])\ n
                                return '
                                ';\n      return $.map(events, evt => `${evt}.${namespace}`).join('
                                ');\n    },\
n\n    difference: function(array, remove) {\n      // This is O(N^2), should be
                                optimized\ n
                                let result = [];\
                                n $.each(array, (_, elem) => {
                                    \
                                    n
                                    if (remove.indexOf(elem) == -1)\ n result.push(elem);\
                                    n
                                });\
                                n
                                return result;\
                                n
                            }, \n\ n // Alter-ego to native Promise.all, but for jQuery
                            \ n all: function(promises) {
                                \
                                n // jQuery treats $.when() and $.when(sing
                                lePromise) differently;
                            let 's avoid that and add spurious elements\n      return
                            $.when(...promises, 42, 42);\
                            n
                        },
                        \n\ n // Object.create polyfill, see http
                        s: //developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Obj
                            ect / create #Polyfill\ n objectCreate: Object.create || (function() {
                                \
                                n va
                                r Object = function() {};\
                                n
                                return function(prototype) {
                                    \
                                    n
                                    if (arg uments.length > 1) {
                                        \
                                        n
                                        throw Error('Second argument not supported');\
                                        n
                                    }\
                                    n
                                    if (typeof prototype != 'object') {
                                        \
                                        n
                                        throw TypeError('Argument must be an object');\
                                        n
                                    }\
                                    n Object.prototype = prototype;\
                                    n
                                    var result = new Object();\
                                    n Object.prototype = null;\
                                    n
                                    return result;\
                                    n
                                };\
                                n
                            })(),
                        \n\ n _SubmitSelector: 'input[type=\"submi
                        t\ "], button:submit'\n  };\n\n  // All these options could be overriden and spec
                        ified directly in DOM using\ n // `data-parsley-` default DOM-API\n  // eg: `inp
                        uts` can be set in DOM using `
                        data - parsley - inputs = \"input, textarea\"`\n  // eg:
                        `data-parsley-stop-on-first-failing-constraint=\"false\"`\
                        n\ n
                        var Defaults = {
                                \
                                n // ### General\n\n    // Default data-namespace for DOM API\n    namespace
                                : 'data-parsley-',
                                \n\ n // Supported inputs by default\n    inputs: 'input, te
                                xtarea,
                                select ',\n\n    // Excluded inputs by default\n    excluded: '
                                input[type = button],
                                input[type = submit],
                                input[type = reset],
                                input[type = hidden]
                                ',\n\n    // 
                                Stop validating field on highest priority failing constraint\ n priorityEnable
                                d: true,
                                \n\ n // ### Field only\n\n    // identifier used to group together in
                                puts(e.g.radio buttons...)\ n multiple: null,
                                \n\ n // identifier (or array
                                of identifiers) used to validate only a select group of inputs\ n group: null,
                            \n\ n // ### UI\n    // Enable\\Disable error messages\n    uiEnabled: true,\
                        n\ n // Key events threshold before validation\n    validationThreshold: 3,\n\
                        n // Focused field on form validation error. 'first'|'last'|'none'\n    focus
                        : 'first',
                        \n\ n // event(s) that will trigger validation before first failure.
                        eg: `input`...\n trigger: false,
                        \n\ n // event(s) that will trigger valida
                        tion after first failure.\n triggerAfterFailure: 'input',
                        \n\ n // Class tha
                        t would be added on every failing validation Parsley field\ n errorClass: 'par
                        sley - error ',\n\n    // Same for success validation\n    successClass: '
                        parsley - s
                        uccess ',\n\n    // Return the `$element` that will receive these above success o
                        r error classes\ n // Could also be (and given directly from DOM) a valid sele
                        ctor like `'#div'`\
                        n classHandler: function(Field) {},
                        \n\ n // Return the 
                        `$element`
                        where errors will be appended\ n // Could also be (and given direct
                        ly from DOM) a valid selector like `'#div'`\
                    n errorsContainer: function(Fiel d) {}, \n\ n // ul elem that would receive errors' list\n    errorsWrapper: '<u
                    l class = \"parsley-errors-list\"></ul>',\n\n    // li elem that would receive err
                    or message\ n errorTemplate: '<li></li>'\
                    n
                };\ n\ n
                var Base = function() {
                    \
                    n
                    this.__id__ = Utils.generateID();\
                    n
                };\ n\ n Base.prototype = {
                    \
                    n asyncSu
                    pport: true, // Deprecated\n\n    _pipeAccordingToValidationResult: function () 
                    {
                        \
                        n
                        var pipe = () => {
                            \
                            n
                            var r = $.Deferred();\
                            n
                            if (true !==
                                this.validationResult)\ n r.reject();\
                            n
                            return r.resolve().promi
                            se();\
                            n
                        };\n
                        return [pipe, pipe];\n
                    },
                    \n\ n actualizeOptions: fun
                    ction() {
                        \
                        n Utils.attr(this.element, this.options.namespace, this.domOptio ns);\
                        n
                        if (this.parent && this.parent.actualizeOptions)\ n this.paren
                        t.actualizeOptions();\
                        n
                        return this;\
                        n
                    },
                    \n\ n _resetOptions: function(initOptions) {
                        \
                        n this.domOptions = Utils.objectCreate(this.parent.options);\
                        n this.options = Utils.objectCreate(this.domOptions);\
                        n // Shallow 
                        copy of ownProperties of initOptions: \n
                        for (var i in initOptions) {
                            \
                            n
                            if (initOptions.hasOwnProperty(i))\ n this.options[i] = initOptions[i];\
                            n
                        }\
                        n this.actualizeOptions();\
                        n
                    },
                    \n\ n _listeners: null,
                    \n\ n
                    // Register a callback for the given event name\n    // Callback is called w
                    ith context as the first argument and the `this`\
                    n // The context is the curr
                    ent parsley instance,
                    or window.Parsley
                    if global\ n // A return value of `fal
                    se` will interrupt the calls\n    on: function (name, fn) {\n      this._listene
rs = this._listeners || {};\n      var queue = this._listeners[name] = this._lis
teners[name] || [];\n      queue.push(fn);\n\n      return this;\n    },\n\n    
// Deprecated. Use `
                    on` instead\n    subscribe: function(name, fn) {\n      $.li
stenTo(this, name.toLowerCase(), fn);\n    },\n\n    // Unregister a callback (o
r all if none is given) for the given event name\n    off: function (name, fn) {
\n      var queue = this._listeners && this._listeners[name];\n      if (queue) 
{\n        if (!fn) {\n          delete this._listeners[name];\n        } else {
\n          for (var i = queue.length; i--; )\n            if (queue[i] === fn)\
n              queue.splice(i, 1);\n        }\n      }\n      return this;\n    
},\n\n    // Deprecated. Use `
                    off`\n    unsubscribe: function(name, fn) {\n     
 $.unsubscribeTo(this, name.toLowerCase());\n    },\n\n    // Trigger an event o
f the given name\n    // A return value of `
                    false` interrupts the callback chain
\n    // Returns false if execution was interrupted\n    trigger: function (name
, target, extraArg) {\n      target = target || this;\n      var queue = this._l
isteners && this._listeners[name];\n      var result;\n      var parentResult;\n
      if (queue) {\n        for (var i = queue.length; i--; ) {\n          resul
t = queue[i].call(target, target, extraArg);\n          if (result === false) re
turn result;\n        }\n      }\n      if (this.parent) {\n        return this.
parent.trigger(name, target, extraArg);\n      }\n      return true;\n    },\n\n
    asyncIsValid: function (group, force) {\n      Utils.warnOnce(\"asyncIsValid
 is deprecated; please use whenValid instead\");\n      return this.whenValid({g
roup, force});\n    },\n\n    _findRelated: function () {\n      return this.opt
ions.multiple ?\n        $(this.parent.element.querySelectorAll(` [$ {
                            this.options
                                .namespace
                        }
                        multiple = \"${this.options.multiple}\"]`))\n      : this.$element;\n  
                    }\
                    n
                };\ n\ n
                var convertArrayRequirement = function(string, length) {
                    \
                    n
                    var
                        m = string.match(/^\\s*\\[(.*)\\]\\s*$/);\
                    n
                    if (!m)\ n
                    throw 'Requiremen
                    t is not an array: \"' + string + '\"';\n    var values = m[1].split(',').map(Ut
                    ils.trimString);\ n
                if (values.length !== length)\ n
                throw 'Requirement ha
                s ' + values.length + '
                values when ' + length + '
                are needed ';\n    return valu
                es;\ n
            };\
            n\ n
            var convertExtraOptionRequirement = function(requirementSpec, str ing, extraOptionReader) {
                \
                n
                var main = null;\
                n
                var extra = {};\
                n
                for (v ar key in requirementSpec) {
                    \
                    n
                    if (key) {
                        \
                        n
                        var value = extraOptionR
                        eader(key);\
                        n
                        if ('string' === typeof value)\ n value = Utils.par
                        seRequirement(requirementSpec[key], value);\
                        n extra[key] = value;\
                        n
                    } else {
                        \
                        n main = Utils.parseRequirement(requirementSpec[key], string);\
                        n
                    }\
                    n
                }\
                n
                return [main, extra];\
                n
            };\
            n\ n // A Validator needs to imp
            lement the methods `validate`
            and `parseRequirements`\
            n\ n
            var Validator = funct
            ion(spec) {
                \
                n $.extend(true, this, spec);\
                n
            };\
            n\ n Validator.prototype = {
                \
                n // Returns `true` iff the given `value` is valid according the given requir
                ements.\n validate: function(value, requirementFirstArg) {
                    \
                    n
                    if (this.fn) { // Legacy style validator\n\n        if (arguments.length > 3)  // If more a
                        rgs then value, requirement, instance...\n requirementFirstArg = [].sli
                        ce.call(arguments, 1, -1); // Skip first arg (value) and last (instance), combi
                        ning the rest\ n
                        return this.fn(value, requirementFirstArg);\
                        n
                    }\
                    n\ n
                    if (Array.isArray(value)) {
                        \
                        n
                        if (!this.validateMultiple)\ n
                        throw 'Validator `' + this.name + '` does not handle multiple values';\
                        n
                        return this.validateMultiple(...arguments);\
                        n
                    } else {
                        \
                        n
                        let instan
                        ce = arguments[arguments.length - 1];\
                        n
                        if (this.validateDate && instance
                            ._isDateInput()) {
                            \
                            n arguments[0] = Utils.parse.date(arguments[0]);\
                            n
                            if (arguments[0] === null)\ n
                            return false;\
                            n
                            return
                            this.validateDate(...arguments);\
                            n
                        }\
                        n
                        if (this.validateNumber) {
                            \
                            n
                            if (isNaN(value))\ n
                            return false;\
                            n arguments[0] = parseFloat(arguments[0]);\
                            n
                            return this.validateNumber(...arguments);\
                            n
                        }\
                        n
                        if (this.validateString) {
                            \
                            n
                            return this.validateS
                            tring(...arguments);\
                            n
                        }\
                        n
                        throw 'Validator `' + this.name + '` on
                        ly handles multiple values ';\n      }\n    },\n\n    // Parses `requirements` in
                        to an array of arguments, \n // according to `this.requirementType`\n    parse
                        Requirements: function(requirements, extraOptionReader) {
                                \
                                n
                                if ('string' != = typeof requirements) {
                                    \
                                    n // Assume requirement already parsed\n        
                                        // but make sure we return an array\n        return Array.isArray(requirements) 
                                        ?
                                        requirements : [requirements];\
                                    n
                                }\
                                n
                                var type = this.requirementType;\
                                n
                                if (Array.isArray(type)) {
                                    \
                                    n
                                    var values = convertArrayRequiremen
                                    t(requirements, type.length);\
                                    n
                                    for (var i = 0; i < values.length; i++)\ n
                                    values[i] = Utils.parseRequirement(type[i], values[i]);\
                                    n retur
                                    n values;\
                                    n
                                } else if ($.isPlainObject(type)) {
                                    \
                                    n
                                    return convertExtr
                                    aOptionRequirement(type, requirements, extraOptionReader);\
                                    n
                                } else {
                                    \
                                    n
                                    return [Utils.parseRequirement(type, requirements)];\
                                    n
                                }\
                                n
                            }, \n /
                            / Defaults:\n    requirementType: 'string',\n\n    priority: 2\n\n  };\n\n  var 
                        ValidatorRegistry = function(validators, catalog) {
                            \
                            n this.__class__ = 'Vali
                            datorRegistry ';\n\n    // Default Parsley locale is en\n    this.locale = '
                            en ';\
n\n    this.init(validators || {}, catalog || {});\n  };\n\n  var typeTesters =  {
                                \
                                n email: /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\u
                                D7FF\ \uF900 - \\uFDCF\ \uFDF0 - \\uFFEF]) + (\\.([a - z] | \\d | [!#\\ $ % & '\\*\\+\\-\\/=\\?\\^
                                    _`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20
|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|
\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF
])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFD
F0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]
|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7
FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFD
CF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))
)\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-
\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|_|~|[\\u00A0-\\uD7FF\\uF900-
\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])
))$/i,\n\n    // Follow https://www.w3.org/TR/html5/infrastructure.html#floating
-point-numbers\n    number: /^-?(\\d*\\.)?\\d+(e[-+]?\\d+)?$/i,\n\n    integer: 
/^-?\\d+$/,\n\n    digits: /^\\d+$/,\n\n    alphanum: /^\\w+$/i,\n\n    date: {\
n      test: value => Utils.parse.date(value) !== null\n    },\n\n    url: new R
egExp(\n        \"^\" +\n          // protocol identifier\n          \"(?:(?:htt
ps?|ftp)://)?\" + // ** mod: make scheme optional\n          // user:pass authen
tication\n          \"(?:\\\\S+(?::\\\\S*)?@)?\" +\n          \"(?:\" +\n       
     // IP address exclusion\n            // private & local networks\n         
   // \"(?!(?:10|127)(?:\\\\.\\\\d{1,3}){3})\" +   // ** mod: allow local networ
ks\n            // \"(?!(?:169\\\\.254|192\\\\.168)(?:\\\\.\\\\d{1,3}){2})\" +  
// ** mod: allow local networks\n            // \"(?!172\\\\.(?:1[6-9]|2\\\\d|3[
0-1])(?:\\\\.\\\\d{1,3}){2})\" +  // ** mod: allow local networks\n            /
/ IP address dotted notation octets\n            // excludes loopback network 0.
0.0.0\n            // excludes reserved space >= 224.0.0.0\n            // exclu
des network & broacast addresses\n            // (first & last IP address of eac
h class)\n            \"(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])\" +\n    
        \"(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}\" +\n            \"(?
:\\\\.(?:[1-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))\" +\n          \"|\" +\n 
           // host name\n            \"(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z
\\\\u00a1-\\\\uffff0-9]+)\" +\n            // domain name\n            \"(?:\\\\
.(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)*\" +\n         
   // TLD identifier\n            \"(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,}))\" 
+\n          \")\" +\n          // port number\n          \"(?::\\\\d{2,5})?\" +
\n          // resource path\n          \"(?:/\\\\S*)?\" +\n        \"$\", 'i'\n
      )\n  };\n  typeTesters.range = typeTesters.number;\n\n  // See http://stac
koverflow.com/a/10454560/8279\n  var decimalPlaces = num => {\n    var match = (
'' + num).match(/(?:\\.(\\d+))?(?:[eE]([+-]?\\d+))?$/);\n    if (!match) { retur
n 0; }\n    return Math.max(\n         0,\n         // Number of digits right of
 decimal point.\n         (match[1] ? match[1].length : 0) -\n         // Adjust
 for scientific notation.\n         (match[2] ? +match[2] : 0));\n  };\n\n  // p
arseArguments('number', ['1', '2']) => [1, 2]\n  let ValidatorRegistry__parseArg
uments = (type, args) => args.map(Utils.parse[type]);\n  // operatorToValidator 
returns a validating function for an operator function, applied to the given typ
e\n  let ValidatorRegistry__operatorToValidator = (type, operator) => {\n    ret
urn (value, ...requirementsAndInput) => {\n      requirementsAndInput.pop(); // 
Get rid of `
                                    input` argument\n      return operator(value, ...ValidatorRegistry__
parseArguments(type, requirementsAndInput));\n    };\n  };\n\n  let ValidatorReg
istry__comparisonOperator = operator => ({\n    validateDate: ValidatorRegistry_
_operatorToValidator('date', operator),\n    validateNumber: ValidatorRegistry__
operatorToValidator('number', operator),\n    requirementType: operator.length <
= 2 ? 'string' : ['string', 'string'], // Support operators with a 1 or 2 requir
ement(s)\n    priority: 30\n  });\n\n  ValidatorRegistry.prototype = {\n    init
: function (validators, catalog) {\n      this.catalog = catalog;\n      // Copy
 prototype's validators:\n      this.validators = Object.assign({}, this.validat
ors);\n\n      for (var name in validators)\n        this.addValidator(name, val
idators[name].fn, validators[name].priority);\n\n      window.Parsley.trigger('p
arsley:validator:init');\n    },\n\n    // Set new messages locale if we have di
ctionary loaded in ParsleyConfig.i18n\n    setLocale: function (locale) {\n     
 if ('undefined' === typeof this.catalog[locale])\n        throw new Error(local
e + ' is not available in the catalog');\n\n      this.locale = locale;\n\n     
 return this;\n    },\n\n    // Add a new messages catalog for a given locale. S
et locale for this catalog if set === `
                                    true`\n    addCatalog: function (locale, 
messages, set) {\n      if ('object' === typeof messages)\n        this.catalog[
locale] = messages;\n\n      if (true === set)\n        return this.setLocale(lo
cale);\n\n      return this;\n    },\n\n    // Add a specific message for a give
n constraint in a given locale\n    addMessage: function (locale, name, message)
 {\n      if ('undefined' === typeof this.catalog[locale])\n        this.catalog
[locale] = {};\n\n      this.catalog[locale][name] = message;\n\n      return th
is;\n    },\n\n    // Add messages for a given locale\n    addMessages: function
 (locale, nameMessageObject) {\n      for (var name in nameMessageObject)\n     
   this.addMessage(locale, name, nameMessageObject[name]);\n\n      return this;
\n    },\n\n    // Add a new validator\n    //\n    //    addValidator('custom',
 {\n    //        requirementType: ['integer', 'integer'],\n    //        valida
teString: function(value, from, to) {},\n    //        priority: 22,\n    //    
    messages: {\n    //          en: \"Hey, that's no good\",\n    //          f
r: \"Aye aye, pas bon du tout\",\n    //        }\n    //    })\n    //\n    // 
Old API was addValidator(name, function, priority)\n    //\n    addValidator: fu
nction (name, arg1, arg2) {\n      if (this.validators[name])\n        Utils.war
n('Validator \"' + name + '\" is already defined.');\n      else if (Defaults.ha
sOwnProperty(name)) {\n        Utils.warn('\"' + name + '\" is a restricted keyw
ord and is not a valid validator name.');\n        return;\n      }\n      retur
n this._setValidator(...arguments);\n    },\n\n    hasValidator: function (name)
 {\n      return !!this.validators[name];\n    },\n\n    updateValidator: functi
on (name, arg1, arg2) {\n      if (!this.validators[name]) {\n        Utils.warn
('Validator \"' + name + '\" is not already defined.');\n        return this.add
Validator(...arguments);\n      }\n      return this._setValidator(...arguments)
;\n    },\n\n    removeValidator: function (name) {\n      if (!this.validators[
name])\n        Utils.warn('Validator \"' + name + '\" is not defined.');\n\n   
   delete this.validators[name];\n\n      return this;\n    },\n\n    _setValida
tor: function (name, validator, priority) {\n      if ('object' !== typeof valid
ator) {\n        // Old style validator, with `
                                    fn` and `
                                    priority`\n        valid
ator = {\n          fn: validator,\n          priority: priority\n        };\n  
    }\n      if (!validator.validate) {\n        validator = new Validator(valid
ator);\n      }\n      this.validators[name] = validator;\n\n      for (var loca
le in validator.messages || {})\n        this.addMessage(locale, name, validator
.messages[locale]);\n\n      return this;\n    },\n\n    getErrorMessage: functi
on (constraint) {\n      var message;\n\n      // Type constraints are a bit dif
ferent, we have to match their requirements too to find right error message\n   
   if ('type' === constraint.name) {\n        var typeMessages = this.catalog[th
is.locale][constraint.name] || {};\n        message = typeMessages[constraint.re
quirements];\n      } else\n        message = this.formatMessage(this.catalog[th
is.locale][constraint.name], constraint.requirements);\n\n      return message |
| this.catalog[this.locale].defaultMessage || this.catalog.en.defaultMessage;\n 
   },\n\n    // Kind of light `
                                    sprintf()` implementation\n    formatMessage: fun
ction (string, parameters) {\n      if ('object' === typeof parameters) {\n     
   for (var i in parameters)\n          string = this.formatMessage(string, para
meters[i]);\n\n        return string;\n      }\n\n      return 'string' === type
of string ? string.replace(/%s/i, parameters) : '';\n    },\n\n    // Here is th
e Parsley default validators list.\n    // A validator is an object with the fol
lowing key values:\n    //  - priority: an integer\n    //  - requirement: 'stri
ng' (default), 'integer', 'number', 'regexp' or an Array of these\n    //  - val
idateString, validateMultiple, validateNumber: functions returning `
                                    true`, `
                                    fals
                                    e` or a promise\n    // Alternatively, a validator can be a function that return
s such an object\n    //\n    validators: {\n      notblank: {\n        validate
String: function(value) {\n          return /\\S/.test(value);\n        },\n    
    priority: 2\n      },\n      required: {\n        validateMultiple: function
(values) {\n          return values.length > 0;\n        },\n        validateStr
ing: function(value) {\n          return /\\S/.test(value);\n        },\n       
 priority: 512\n      },\n      type: {\n        validateString: function(value,
 type, {step = 'any', base = 0} = {}) {\n          var tester = typeTesters[type
];\n          if (!tester) {\n            throw new Error('validator type `
                                    ' + t
                                    ype + '` is not supported');\ n
                            }\
                            n
                            if (!tester.test(value))\ n
                            return false;\ n
                            if ('number' === type) {
                                \
                                n
                                if (!/ ^
                                    any$ / i.test(step || '')) {
                                    \
                                    n
                                    var nb = Number(value);\
                                    n
                                    var decimals = Math.max(decimalPlaces(step), decimalPlaces(base));\
                                    n
                                    if (decimalPlaces(nb) > decimals) // Value can't have too many decimals\n   
                                        return false;\
                                    n // Be careful of rounding errors by us
                                    ing integers.\n
                                    var toInt = f => Math.round(f * Math.pow(10, decima ls));\
                                    n
                                    if ((toInt(nb) - toInt(base)) % toInt(step) != 0)\ n
                                    return false;\
                                    n
                                }\
                                n
                            }\
                            n
                            return true;\ n
                        }, \n requirementType: {
                            \
                            n '': 'string',
                            \n step: 'str
                            ing ',\n          base: '
                            number '\n        },\n        priority: 256\n      },\n  
                            pattern: {
                                \
                                n validateString: function(value, regexp) {
                                    \
                                    n ret
                                    urn regexp.test(value);\
                                    n
                                },
                                \n requirementType: 'regexp',
                                \n
                                priority: 64\ n
                            },
                            \n minlength: {
                                \
                                n validateString: function(v alue, requirement) {
                                    \
                                    n
                                    return value.length >= requirement;\
                                    n
                                },
                                \
                                n requirementType: 'integer',
                                \n priority: 30\ n
                            },
                            \n maxl
                            ength: {
                                \
                                n validateString: function(value, requirement) {
                                    \
                                    n ret
                                    urn value.length <= requirement;\
                                    n
                                },
                                \n requirementType: 'integer',
                                \n priority: 30\ n
                            },
                            \n length: {
                                \
                                n validateString: func
                                tion(value, min, max) {
                                    \
                                    n
                                    return value.length >= min && value.length < = max;\
                                    n
                                },
                                \n requirementType: ['integer', 'integer'],
                                \n pr
                                iority: 30\ n
                            },
                            \n mincheck: {
                                \
                                n validateMultiple: function(val ues, requirement) {
                                    \
                                    n
                                    return values.length >= requirement;\
                                    n
                                },
                                \
                                n requirementType: 'integer',
                                \n priority: 30\ n
                            },
                            \n maxc
                            heck: {
                                \
                                n validateMultiple: function(values, requirement) {
                                    \
                                    n r
                                    eturn values.length <= requirement;\
                                    n
                                },
                                \n requirementType: 'integ
                                er ',\n        priority: 30\n      },\n      check: {\n        validateMultiple: 

                                function(values, min, max) {
                                    \
                                    n
                                    return values.length >= min && values.l
                                    ength <= max;\
                                    n
                                },
                                \n requirementType: ['integer', 'integer'],
                                \n
                                priority: 30\ n
                            },
                            \n min: ValidatorRegistry__comparisonOperator((v alue, requirement) => value >= requirement),
                            \n max: ValidatorRegistry__comp
                            arisonOperator((value, requirement) => value <= requirement),
                            \n range: Vali
                            datorRegistry__comparisonOperator((value, min, max) => value >= min && value <=
                                max),
                            \n equalto: {
                                \
                                n validateString: function(value, refOrValue) {
                                    \
                                    n
                                    var $reference = $(refOrValue);\
                                    n
                                    if ($reference.length)\ n
                                    return value === $reference.val();\
                                    n
                                    else\ n
                                    return
                                    value === refOrValue;\
                                    n
                                },
                                \n priority: 256\ n
                            }\
                            n
                        }\
                        n
                    };\
                    n\ n
                    var UI = {};\
                    n\ n
                    var diffResults = function(newResult, oldResult, deep) {
                        \
                        n
                        var added = [];\
                        n
                        var kept = [];\
                        n\ n
                        for (var i = 0; i < newResult.l ength; i++) {
                            \
                            n
                            var found = false;\
                            n\ n
                            for (var j = 0; j < oldResult.l ength; j++)\ n
                            if (newResult[i].assert.name === oldResult[j].assert.name) {
                                \
                                n found = true;\
                                n
                                break;\
                                n
                            }\
                            n\ n
                            if (found)\ n
                            kept.push(newResult[i]);\
                            n
                            else\ n added.push(newResult[i]);\
                            n
                        }\
                        n\ n
                        return {
                            \
                            n kept: kept,
                            \n added: added,
                            \n removed: !dee
                            p ? diffResults(oldResult, newResult, true).added : []\ n
                        };\
                        n
                    };\
                    n\ n UI.For
                    m = {
                        \
                        n\ n _actualizeTriggers: function() {
                            \
                            n this.$element.on('submit.P
                                arsley ', evt => { this.onSubmitValidate(evt); });\n      this.$element.on('
                                click
                                .Parsley ', Utils._SubmitSelector, evt => { this.onSubmitButton(evt); });\n\n    
                                // UI could be disabled\n      if (false === this.options.uiEnabled)\n        
                                return;\ n\ n this.element.setAttribute('novalidate', '');\ n
                            }, \n\ n foc
                            us: function() {
                                \
                                n this._focusedField = null;\
                                n\ n
                                if (true === this.v alidationResult || 'none' === this.options.focus)\ n
                                return null;\
                                n\ n
                                for (var i = 0; i < this.fields.length; i++) {
                                    \
                                    n
                                    var field = this.fields[i];\
                                    n
                                    if (true !== field.validationResult && field.validationResult.leng th > 0 && 'undefined' === typeof field.options.noFocus) {
                                        \
                                        n this._focus
                                        edField = field.$element;\
                                        n
                                        if ('first' === this.options.focus)\ n
                                        break;\
                                        n
                                    }\
                                    n
                                }\
                                n\ n
                                if (null === this._focusedField)\ n
                                return null;\
                                n\ n
                                return this._focusedField.focus();\
                                n
                            }, \n\ n _des
                            troyUI: function() {
                                \
                                n // Reset all event listeners\n      this.$element.o
                                ff('.Parsley');\
                                n
                            }\
                            n\ n
                        };\n\ n UI.Field = {
                            \
                            n\ n _reflowUI: function() {
                                \
                                n this._buildUI();\
                                n\ n // If this field doesn't have an active UI don
                                    't bother doing something\n      if (!this._ui)\n        return;\n\n      // Dif
                                f between two validation results\ n
                                var diff = diffResults(this.validationRe sult, this._ui.lastValidationResult);\
                                n\ n // Then store current validation 
                                result
                                for next reflow\ n this._ui.lastValidationResult = this.validationRes
                                ult;\
                                n\ n // Handle valid / invalid / none field class\n      this._manageSt
                                atusClass();\
                                n\ n // Add, remove, updated errors messages\n      this._manag
                                eErrorsMessages(diff);\
                                n\ n // Triggers impl\n      this._actualizeTriggers(
                            );\n\ n // If field is not valid for the first time, bind keyup trigger to e
                            ase UX and quickly inform user\ n
                            if ((diff.kept.length || diff.added.length) && !this._failedOnce) {
                                \
                                n this._failedOnce = true;\
                                n this._actua
                                lizeTriggers();\
                                n
                            }\
                            n
                        },
                        \n\ n // Returns an array of field's error mes
                        sage(s)\ n getErrorsMessages: function() {
                            \
                            n // No error message, field 
                            is valid\ n
                            if (true === this.validationResult)\ n
                            return [];\
                            n\ n
                            var messages = [];\
                            n\ n
                            for (var i = 0; i < this.validationResult.length; i
                                ++)\ n messages.push(this.validationResult[i].errorMessage || \n th is._getErrorMessage(this.validationResult[i].assert));\
                            n\ n
                            return messages;\
                            n
                        },
                        \n\ n // It's a goal of Parsley that this method is no longer required
                        [#1073]\n    addError: function (name, {message, assert, updateClass = true
                        } = {}) {
                        \
                        n this._buildUI();\
                        n this._addError(name, {
                            message,
                            assert
                        });\
                        n\
                        n
                        if (updateClass)\ n this._errorClass();\
                        n
                    }, \n\ n // It's a go
                    al of Parsley that this method is no longer required[#1073]\n    updateError: f
unction (name, {message, assert, updateClass = true
                    } = {}) {
                    \
                    n this._buildU
                    I();\
                    n this._updateError(name, {
                        message,
                        assert
                    });\
                    n\ n
                    if (updateClass)\ n this._errorClass();\
                    n
                },
                \n\ n // It's a goal of Parsley that thi
                s method is no longer required[#1073]\n    removeError: function (name, {update
Class = true
                } = {}) {
                \
                n this._buildUI();\
                n this._removeError(name);\
                n\
                n // edge case possible here: remove a standard Parsley error that is still
                failing in this.validationResult\ n // but highly improbable cuz' manually 
                removing a well Parsley handled error makes no sense.\n
                if (updateClass)\ n
                this._manageStatusClass();\
                n
            }, \n\ n _manageStatusClass: function() {
                \
                n
                if (this.hasConstraints() && this.needsValidation() && true === this.v alidationResult)\ n this._successClass();\
                n
                else if (this.validationR esult.length > 0)\ n this._errorClass();\
                n
                else\ n this._resetC
                lass();\
                n
            }, \n\ n _manageErrorsMessages: function(diff) {
                \
                n
                if ('unde
                    fined ' !== typeof this.options.errorsMessagesDisabled)\n        return;\n\n     
                    // Case where we have errorMessage option that configure an unique field error 
                    message, regardless failing validators\ n
                    if ('undefined' !== typeof this.op tions.errorMessage) {
                        \
                        n
                        if ((diff.added.length || diff.kept.length)) {
                            \
                            n
                            this._insertErrorWrapper();\
                            n\ n
                            if (0 === this._ui.$errorsWrap per.find('.parsley-custom-error-message').length)\ n this._ui.$errorsW
                            rapper\ n.append(\n $(this.options.errorTemplate)\ n
                                .addClass('parsley-custom-error-message')\ n);\
                            n\ n
                            return this._ui.$errorsWrapper\ n.addClass('filled')\ n
                                .find('.parsley-custom-error-message')\ n.html(this.options.erro rMessage);\
                            n
                        }\
                        n\ n
                        return this._ui.$errorsWrapper\ n.remo
                        veClass('filled')\ n.find('.parsley-custom-error-message')\ n.
                        remove();\
                        n
                    }\
                    n\ n // Show, hide, update failing constraints messages\n
                    for (var i = 0; i < diff.removed.length; i++)\ n this._removeError(d iff.removed[i].assert.name);\ n\ n
                    for (i = 0; i < diff.added.length; i++)\ n
                    this._addError(diff.added[i].assert.name, {
                        message: diff.added[i].errorMe
                        ssage,
                        assert: diff.added[i].assert
                    });\ n\ n
                    for (i = 0; i < diff.kept.length; i++)\ n this._updateError(diff.kept[i].assert.name, {
                        message: diff.kept[
                            i].errorMessage,
                        assert: diff.kept[i].assert
                    });\ n
                }, \n\ n\ n _addError: func
                tion(name, {
                    message,
                    assert
                }) {
                    \
                    n this._insertErrorWrapper();\
                    n this.
                    _ui.$errorsWrapper\ n.addClass('filled')\ n.append(\n $(t his.options.errorTemplate)\ n.addClass('parsley-' + name)\ n.h tml(message || this._getErrorMessage(assert))\ n);\
                    n
                }, \n\ n _update
                Error: function(name, {
                    message,
                    assert
                }) {
                    \
                    n this._ui.$errorsWrapper\ n
                        .addClass('filled')\ n.find('.parsley-' + name)\ n.html(messag e || this._getErrorMessage(assert));\
                    n
                }, \n\ n _removeError: function(name) {
                    \
                    n this._ui.$errorsWrapper\ n.removeClass('filled')\ n.fin
                    d('.parsley-' + name)\ n.remove();\
                    n
                }, \n\ n _getErrorMessage: funct
                ion(constraint) {
                    \
                    n
                    var customConstraintErrorMessage = constraint.name + '
                    Message ';\n\n      if ('
                    undefined ' !== typeof this.options[customConstraintError
                    Message])\ n
            return window.Parsley.formatMessage(this.options[customConstr aintErrorMessage], constraint.requirements);\
            n\ n
            return window.Parsley.getE
            rrorMessage(constraint);\
            n
        }, \n\ n _buildUI: function() {
            \
            n // UI cou
            ld be already built or disabled\ n
            if (this._ui || false === this.options.ui Enabled)\ n
            return;\
            n\ n
            var _ui = {};\
            n\ n // Give field its Pars
            ley id in DOM\ n this.element.setAttribute(this.options.namespace + 'id', th is.__id__);\
            n\ n
            /** Generate important UI elements and store them in this *
             */
            \ n // $errorClassHandler is the $element that woul have parsley-error and
            parsley - success classes\ n _ui.$errorClassHandler = this._manageClassHandle
            r();\
            n\ n // $errorsWrapper is a div that would contain the various field er
            rors, it will be appended into $errorsContainer\ n _ui.errorsWrapperId = 'pa
            rsley - id - ' + (this.options.multiple ? '
            multiple - ' + this.options.multiple : this
                .__id__);\ n _ui.$errorsWrapper = $(this.options.errorsWrapper).attr('id', _ ui.errorsWrapperId);\ n\ n // ValidationResult UI storage to detect what have
        changed bwt two validations, and update DOM accordingly\ n _ui.lastValidati onResult = [];\ n _ui.validationInformationVisible = false;\ n\ n // Stor
        e it in this
        for later\ n this._ui = _ui;\ n
    },
    \n\ n // Determine which 
    element will have `parsley-error`
    and `parsley-success`
    classes\ n _manageClas
    sHandler: function() {
        \
        n // Class handled could also be determined by func
        tion given in Parsley options\ n
        if ('string' === typeof this.options.classH andler && $(this.options.classHandler).length)\ n
        return $(this.options.cl assHandler);\
        n\ n // Class handled could also be determined by function give
        n in Parsley options\ n
        var $handlerFunction = this.options.classHandler;\
        n\
        n // It might also be the function name of a global function\n      if ('st
        ring ' === typeof this.options.classHandler && '
        function ' === typeof window[this.
        options.classHandler])\ n $handlerFunction = window[this.options.classHand ler];\
n\ n
if ('function' === typeof $handlerFunction) {
    \
    n
    var $handl
    er = $handlerFunction.call(this, this);\
    n\ n // If this function returned 
    a valid existing DOM element, go
    for it\ n
    if ('undefined' !== typeof $han dler && $handler.length)\ n
    return $handler;\
    n
} else if ('object' ===
    typeof $handlerFunction && $handlerFunction instanceof jQuery && $handlerFun ction.length) {
    \
    n
    return $handlerFunction;\
    n
} else if ($handlerFunc tion) {
    \
    n Utils.warn('The class handler `' + $handlerFunction + '` does n
        ot exist in DOM nor as a global JS
        function ');\n      }\n\n      return this._in
        putHolder();\ n
    }, \n\ n _inputHolder: function() {
        \
        n // if simple eleme
        nt(input, texatrea, select...) it will perfectly host the classes and precede t
        he error container\ n
        if (!this.options.multiple || this.element.nodeName == = 'SELECT')\ n
        return this.$element;\
        n\ n // But if multiple element (
        radio, checkbox), that would be their parent\ n
    return this.$element.parent();\
    n
}, \n\ n _insertErrorWrapper: function() {
    \
    n
    var $errorsContainer = this.options.errorsContainer;\
    n\ n // Nothing to do if already inserted\n
    if (0 !== this._ui.$errorsWrapper.parent().length)\ n
    return this._u
    i.$errorsWrapper.parent();\
    n\ n
    if ('string' === typeof $errorsContainer) {
        \
        n
        if ($($errorsContainer).length)\ n
        return $($errorsContainer).a
        ppend(this._ui.$errorsWrapper);\
        n
        else if ('function' === typeof window[$ errorsContainer])\ n $errorsContainer = window[$errorsContainer];\
        n
        else\ n Utils.warn('The errors container `' + $errorsContainer + '` d
            oes not exist in DOM nor as a global JS
            function ');\n      }\n\n      if ('
            funct ion ' === typeof $errorsContainer)\n        $errorsContainer = $errorsContainer.c
            all(this, this);\ n\ n
            if ('object' === typeof $errorsContainer && $errorsCon tainer.length)\ n
            return $errorsContainer.append(this._ui.$errorsWrapper);\ n\ n
            return this._inputHolder().after(this._ui.$errorsWrapper);\ n
        }, \n\ n
        _actualizeTriggers: function() {
            \
            n
            var $toBind = this._findRelated();\
            n
            var trigger;\
            n\ n // Remove Parsley events already bound on this fiel
            d\ n $toBind.off('.Parsley');\
            n
            if (this._failedOnce)\ n $toBind.
            on(Utils.namespaceEvents(this.options.triggerAfterFailure, 'Parsley'), () => {
                \
                n
                this._validateIfNeeded();\
                n
            });\
            n
            else if (trigger = Utils
                .namespaceEvents(this.options.trigger, 'Parsley')) {
                \
                n $toBind.on(trigger, event => {
                    \
                    n this._validateIfNeeded(event);\
                    n
                });\
                n
            }\
            n
        }, \n\ n _validateIfNeeded: function(event) {
            \
            n // For keyup, keypress,
            keydown, input...events that could be a little bit obstrusive\ n // do not
            validate
            if val length < min threshold on first validation.Once field have bee
            n validated once and info\ n // about success or failure have been displayed
            , always validate with this trigger to reflect every yalidation change.\n i
            f(event && /key|input/.test(event.type))\ n
            if (!(this._ui && this._ui.va lidationInformationVisible) && this.getValue().length <= this.options.validation Threshold)\ n
            return;\
            n\ n
            if (this.options.debounce) {
                \
                n win
                dow.clearTimeout(this._debounced);\
                n this._debounced = window.setTimeout(
                    () => this.validate(), this.options.debounce);\
                n
            } else\ n this.valid
            ate();\
            n
        }, \n\ n _resetUI: function() {
            \
            n // Reset all event listener
            s\ n this._failedOnce = false;\
            n this._actualizeTriggers();\
            n\ n //
            Nothing to do
                if UI
            never initialized
            for this field\ n
            if ('undefined' ===
                typeof this._ui)\ n
            return;\
            n\ n // Reset all errors' li\n      this.
            _ui.$errorsWrapper\ n.removeClass('filled')\ n.children()\ n
                .remove();\
            n\ n // Reset validation class\n      this._resetClass();\n\n   
            // Reset validation flags and last validation result\n      this._ui.lastVali
            dationResult = [];\
            n this._ui.validationInformationVisible = false;\
            n
        }, \n\ n _destroyUI: function() {
            \
            n this._resetUI();\
            n\ n
            if ('undefine
                d ' !== typeof this._ui)\n        this._ui.$errorsWrapper.remove();\n\n      dele
                te this._ui;\ n
            }, \n\ n _successClass: function() {
                \
                n this._ui.validat
                ionInformationVisible = true;\
                n this._ui.$errorClassHandler.removeClass(thi s.options.errorClass).addClass(this.options.successClass);\
                n
            }, \n _errorCl
            ass: function() {
                \
                n this._ui.validationInformationVisible = true;\
                n t
                his._ui.$errorClassHandler.removeClass(this.options.successClass).addClass(this.options.errorClass);\
                n
            }, \n _resetClass: function() {
                \
                n this._ui.$er
                rorClassHandler.removeClass(this.options.successClass).removeClass(this.options.errorClass);\
                n
            }\
            n
        };\
        n\ n
        var Form = function(element, domOptions, options) {
            \
            n this.__class__ = 'Form';\
            n\ n this.element = element;\
            n this.$elem
            ent = $(element);\
            n this.domOptions = domOptions;\
            n this.options = options;\
            n this.parent = window.Parsley;\
            n\ n this.fields = [];\
            n this.validati
            onResult = null;\
            n
        };\
        n\ n
        var Form__statusMapping = {
            pending: null,
            resolved: true,
            rejected: false
        };\
        n\ n Form.prototype = {
            \
            n onSubmitValidate: function(event) {
                \
                n // This is a Parsley generated submit event, do not validate, d
                o not prevent, simply exit and keep normal behavior\ n
                if (true === event.pa rsley)\ n
                return;\
                n\ n // If we didn't come here through a submit butt
                on, use the first one in the form\ n
                var submitSource = this._submitSource |
                    |
                    this.$element.find(Utils._SubmitSelector)[0];\
                n this._submitSource = null;\
                n this.$element.find('.parsley-synthetic-submit-button').prop('disabled',
                    true);\
                n
                if (submitSource && null !== submitSource.getAttribute('formnoval
                        idate '))\n        return;\n\n      window.Parsley._remoteCache = {};\n\n      va
                        r promise = this.whenValidate({
                            event
                        });\ n\ n
                        if ('resolved' === promise.stat e() && false !== this._trigger('submit')) {
                            \
                            n // All good, let event go t
                            hrough.We make this distinction because browsers\ n // differ in their ha
                            ndling of `submit`
                            being called from inside a submit event[#1047]\n      } else
 {\n        // Rejected or pending: cancel this submit\n        event.stopImmedi
atePropagation();\n        event.preventDefault();\n        if ('pending' = == pr omise.state())\ n promise.done(() => {
                                this._submit(submitSource);
                            });\
                            n
                        }\
                        n
                    }, \n\ n onSubmitButton: function(event) {
                        \
                        n this._submitSour
                        ce = event.currentTarget;\
                        n
                    }, \n // internal\n    // _submit submits the f
                    orm, this time without going through the validations.\n // Care must be taken
                    to\ "fake\" the actual submit button being clicked.\n    _submit: function (sub
                    mitSource) {
                    \
                    n
                    if (false === this._trigger('submit'))\ n
                    return;\
                    n
                    // Add submit button's data\n      if (submitSource) {\n        var $syntheti
                    c = this.$element.find('.parsley-synthetic-submit-button').prop('disabled', fals e);\
                    n
                    if (0 === $synthetic.length)\ n $synthetic = $('<input clas
                        s = \"parsley-synthetic-submit-button\" type=\"hidden\">').appendTo(this.$element);\ n $synthetic.attr({
                            \
                            n name: submitSource.getAttribute('name'),
                            \n value: submitSource.getAttribute('value')\ n
                        });\ n
                    }\
                    n\ n
                    this.$element.trigger(Object.assign($.Event('submit'), {
                        parsley: true
                    }));\
                    n
                }, \n\ n // Performs validation on fields while triggering events.\n    // 
                @returns `true`
                if all validations succeeds, `false`\
                n // if a failure is imm
                ediately detected, or `null`\
                n // if dependant on a promise.\n    // Consider
                using `whenValidate`
                instead.\n validate: function(options) {
                    \
                    n
                    if (ar guments.length >= 1 && !$.isPlainObject(options)) {
                        \
                        n Utils.warnOnce('Cal
                            ling validate on a parsley form without passing arguments as an object is deprec ated.
                            ');\n        var [group, force, event] = arguments;\n        options = {gro
                            up, force, event
                        };\
                        n
                    }\
                    n
                    return Form__statusMapping[this.whenValidate(options).state()];\
                    n
                }, \n\ n whenValidate: function({
                    group,
                    force,
                    event
                } = {}) {
                    \
                    n this.submitEvent = event;\
                    n
                    if (event) {
                        \
                        n this.sub
                        mitEvent = Object.assign({}, event, {
                                preventDefault: () => {
                                    \
                                    n Utils.wa
                                    rnOnce(\"Using `this.submitEvent.preventDefault()` is deprecated; instead, call 
                                        `this.validationResult = false`\
                                        ");\n          this.validationResult = false;\n 
                                    }
                                });\ n
                        }\
                        n this.validationResult = true;\
                        n\ n // fire valid
                        ate event to eventually modify things before every validation\ n this._trigg
                        er('validate');\
                        n\ n // Refresh form DOM options and form's fields that coul
                        d have changed\ n this._refreshFields();\
                        n\ n
                        var promises = this._witho
                        utReactualizingFormOptions(() => {
                            \
                            n
                            return $.map(this.fields, field => f ield.whenValidate({
                                force,
                                group
                            }));\
                            n
                        });\
                        n\ n
                        return Utils.all(promise s)\ n.done(() => {
                            this._trigger('success');
                        })\ n.fail(() => {
                            \
                            n this.validationResult = false;\
                            n this.focus();\
                            n
                            this._trigger('error');\
                            n
                        })\ n.always(() => {
                                this._trigger('vali
                                    dated '); })\n        .pipe(...this._pipeAccordingToValidationResult());\n    },\
n\n    // Iterate over refreshed fields, and stop on first failure.\n    // Retu
                                    rns `true`
                                    if all fields are valid, `false`
                                    if a failure is detected\ n // or 
                                    `null`
                                    if the result depends on an unresolved promise.\n // Prefer using `whe
                                    nValid` instead.\n    isValid: function (options) {\n      if (arguments.length 
>= 1 && !$.isPlainObject(options)) {\n        Utils.warnOnce('Calling isValid on
 a parsley form without passing arguments as an object is deprecated.');\n      
  var [group, force] = arguments;\n        options = {group, force};\n      }\n 
     return Form__statusMapping[ this.whenValid(options).state() ];\n    },\n\n 
   // Iterate over refreshed fields and validate them.\n    // Returns a promise
.\n    // A validation that immediately fails will interrupt the validations.\n 
   whenValid: function ({group, force} = {}) {\n      this._refreshFields();\n\n
      var promises = this._withoutReactualizingFormOptions(() => {\n        retu
rn $.map(this.fields, field => field.whenValid({group, force}));\n      });\n   
   return Utils.all(promises);\n    },\n\n    refresh: function() {\n      this.
_refreshFields();\n      return this;\n    },\n\n    // Reset UI\n    reset: fun
ction () {\n      // Form case: emit a reset event for each field\n      for (va
r i = 0; i < this.fields.length; i++)\n        this.fields[i].reset();\n\n      
this._trigger('reset');\n    },\n\n    // Destroy Parsley instance (+ UI)\n    d
estroy: function () {\n      // Field case: emit destroy event to clean UI and t
hen destroy stored instance\n      this._destroyUI();\n\n      // Form case: des
troy all its fields and then destroy stored instance\n      for (var i = 0; i < 
this.fields.length; i++)\n        this.fields[i].destroy();\n\n      this.$eleme
nt.removeData('Parsley');\n      this._trigger('destroy');\n    },\n\n    _refre
shFields: function () {\n      return this.actualizeOptions()._bindFields();\n  
  },\n\n    _bindFields: function () {\n      var oldFields = this.fields;\n\n  
    this.fields = [];\n      this.fieldsMappedById = {};\n\n      this._withoutR
eactualizingFormOptions(() => {\n        this.$element\n        .find(this.optio
ns.inputs)\n        .not(this.options.excluded)\n        .each((_, element) => {
\n          var fieldInstance = new window.Parsley.Factory(element, {}, this);\n
\n          // Only add valid and not excluded `
                                    Field` and `
                                    FieldMultiple` child
ren\n          if (('Field' === fieldInstance.__class__ || 'FieldMultiple' === f
ieldInstance.__class__) && (true !== fieldInstance.options.excluded)) {\n       
     let uniqueId = fieldInstance.__class__ + '-' + fieldInstance.__id__;\n     
       if ('undefined' === typeof this.fieldsMappedById[uniqueId]) {\n          
    this.fieldsMappedById[uniqueId] = fieldInstance;\n              this.fields.
push(fieldInstance);\n            }\n          }\n        });\n\n        $.each(
Utils.difference(oldFields, this.fields), (_, field) => {\n          field.reset
();\n        });\n      });\n      return this;\n    },\n\n    // Internal only.
\n    // Looping on a form's fields to do validation or similar\n    // will tri
gger reactualizing options on all of them, which\n    // in turn will reactualiz
e the form's options.\n    // To avoid calling actualizeOptions so many times on
 the form\n    // for nothing, _withoutReactualizingFormOptions temporarily disa
bles\n    // the method actualizeOptions on this form while `
                                    fn` is called.\n   
 _withoutReactualizingFormOptions: function (fn) {\n      var oldActualizeOption
s = this.actualizeOptions;\n      this.actualizeOptions = function () { return t
his; };\n      var result = fn();\n      this.actualizeOptions = oldActualizeOpt
ions;\n      return result;\n    },\n\n    // Internal only.\n    // Shortcut to
 trigger an event\n    // Returns true iff event is not interrupted and default 
not prevented.\n    _trigger: function (eventName) {\n      return this.trigger(
'form:' + eventName);\n    }\n\n  };\n\n  const Constraint = function(parsleyFie
ld, name, requirements, priority, isDomConstraint) {\n    const validatorSpec = 
window.Parsley._validatorRegistry.validators[name];\n    const validator = new V
alidator(validatorSpec);\n    priority = priority || parsleyField.options[name +
 'Priority'] || validator.priority;\n    isDomConstraint = (true === isDomConstr
aint);\n\n    Object.assign(this, {\n      validator,\n      name,\n      requir
ements,\n      priority,\n      isDomConstraint\n    });\n    this._parseRequire
ments(parsleyField.options);\n  };\n\n  const capitalize = function(str) {\n    
const cap = str[0].toUpperCase();\n    return cap + str.slice(1);\n  };\n\n  Con
straint.prototype = {\n    validate: function(value, instance) {\n      return t
his.validator.validate(value, ...this.requirementList, instance);\n    },\n\n   
 _parseRequirements: function(options) {\n      this.requirementList = this.vali
dator.parseRequirements(this.requirements,\n        key => options[this.name + c
apitalize(key)]\n      );\n    }\n  };\n\n  var Field = function (field, domOpti
ons, options, parsleyFormInstance) {\n    this.__class__ = 'Field';\n\n    this.
element = field;\n    this.$element = $(field);\n\n    // Set parent if we have 
one\n    if ('undefined' !== typeof parsleyFormInstance) {\n      this.parent = 
parsleyFormInstance;\n    }\n\n    this.options = options;\n    this.domOptions 
= domOptions;\n\n    // Initialize some properties\n    this.constraints = [];\n
    this.constraintsByName = {};\n    this.validationResult = true;\n\n    // Bi
nd constraints\n    this._bindConstraints();\n  };\n\n  var parsley_field__statu
sMapping = {pending: null, resolved: true, rejected: false};\n\n  Field.prototyp
e = {\n    // # Public API\n    // Validate field and trigger some events for ma
inly `
                                    UI`\n    // @returns `
                                    true`, an array of the validators that failed, or\n 
   // `
                                    null` if validation is not finished. Prefer using whenValidate\n    valid
ate: function (options) {\n      if (arguments.length >= 1 && !$.isPlainObject(o
ptions)) {\n        Utils.warnOnce('Calling validate on a parsley field without 
passing arguments as an object is deprecated.');\n        options = {options};\n
      }\n      var promise = this.whenValidate(options);\n      if (!promise)  /
/ If excluded with `
                                    group` option\n        return true;\n      switch (promise.s
tate()) {\n        case 'pending': return null;\n        case 'resolved': return
 true;\n        case 'rejected': return this.validationResult;\n      }\n    },\
n\n    // Validate field and trigger some events for mainly `
                                    UI`\n    // @return
s a promise that succeeds only when all validations do\n    // or `
                                    undefined` if
 field is not in the given `
                                    group`.\n    whenValidate: function ({force, group} 
=  {}) {\n      // do not validate a field if not the same as given validation g
roup\n      this.refresh();\n      if (group && !this._isInGroup(group))\n      
  return;\n\n      this.value = this.getValue();\n\n      // Field Validate even
t. `
                                    this.value` could be altered for custom needs\n      this._trigger('validate
');\n\n      return this.whenValid({force, value: this.value, _refreshed: true})
\n        .always(() => { this._reflowUI(); })\n        .done(() =>   { this._tr
igger('success'); })\n        .fail(() =>   { this._trigger('error'); })\n      
  .always(() => { this._trigger('validated'); })\n        .pipe(...this._pipeAcc
ordingToValidationResult());\n    },\n\n    hasConstraints: function () {\n     
 return 0 !== this.constraints.length;\n    },\n\n    // An empty optional field
 does not need validation\n    needsValidation: function (value) {\n      if ('u
ndefined' === typeof value)\n        value = this.getValue();\n\n      // If a f
ield is empty and not required, it is valid\n      // Except if `
                                    data - parsley - va lidate -
                                    if -empty` explicitely added, useful for some custom validators\n      if 
(!value.length && !this._isRequired() && 'undefined' === typeof this.options.val
idateIfEmpty)\n        return false;\n\n      return true;\n    },\n\n    _isInG
roup: function (group) {\n      if (Array.isArray(this.options.group))\n        
return -1 !== $.inArray(group, this.options.group);\n      return this.options.g
roup === group;\n    },\n\n    // Just validate field. Do not trigger any event.
\n    // Returns `
                                    true` iff all constraints pass, `
                                    false` if there are failures,
\n    // or `
                                    null` if the result can not be determined yet (depends on a promise
)\n    // See also `
                                    whenValid`.\n    isValid: function (options) {\n      if (ar
guments.length >= 1 && !$.isPlainObject(options)) {\n        Utils.warnOnce('Cal
ling isValid on a parsley field without passing arguments as an object is deprec
ated.');\n        var [force, value] = arguments;\n        options = {force, val
ue};\n      }\n      var promise = this.whenValid(options);\n      if (!promise)
 // Excluded via `
                                    group`\n        return true;\n      return parsley_field__stat
usMapping[promise.state()];\n    },\n\n    // Just validate field. Do not trigge
r any event.\n    // @returns a promise that succeeds only when all validations 
do\n    // or `
                                    undefined` if the field is not in the given `
                                    group`.\n    // The 
argument `
                                    force` will force validation of empty fields.\n    // If a `
                                    value` is 
given, it will be validated instead of the value of the input.\n    whenValid: f
unction ({force = false, value, group, _refreshed} = {}) {\n      // Recompute o
ptions and rebind constraints to have latest changes\n      if (!_refreshed)\n  
      this.refresh();\n      // do not validate a field if not the same as given
 validation group\n      if (group && !this._isInGroup(group))\n        return;\
n\n      this.validationResult = true;\n\n      // A field without constraint is
 valid\n      if (!this.hasConstraints())\n        return $.when();\n\n      // 
Value could be passed as argument, needed to add more power to 'field:validate'\
n      if ('undefined' === typeof value || null === value)\n        value = this
.getValue();\n\n      if (!this.needsValidation(value) && true !== force)\n     
   return $.when();\n\n      var groupedConstraints = this._getGroupedConstraint
s();\n      var promises = [];\n      $.each(groupedConstraints, (_, constraints
) => {\n        // Process one group of constraints at a time, we validate the c
onstraints\n        // and combine the promises together.\n        var promise =
 Utils.all(\n          $.map(constraints, constraint => this._validateConstraint
(value, constraint))\n        );\n        promises.push(promise);\n        if (p
romise.state() === 'rejected')\n          return false; // Interrupt processing 
if a group has already failed\n      });\n      return Utils.all(promises);\n   
 },\n\n    // @returns a promise\n    _validateConstraint: function(value, const
raint) {\n      var result = constraint.validate(value, this);\n      // Map fal
se to a failed promise\n      if (false === result)\n        result = $.Deferred
().reject();\n      // Make sure we return a promise and that we record failures
\n      return Utils.all([result]).fail(errorMessage => {\n        if (!(this.va
lidationResult instanceof Array))\n          this.validationResult = [];\n      
  this.validationResult.push({\n          assert: constraint,\n          errorMe
ssage: 'string' === typeof errorMessage && errorMessage\n        });\n      });\
n    },\n\n    // @returns Parsley field computed value that could be overrided 
or configured in DOM\n    getValue: function () {\n      var value;\n\n      // 
Value could be overriden in DOM or with explicit options\n      if ('function' =
== typeof this.options.value)\n        value = this.options.value(this);\n      
else if ('undefined' !== typeof this.options.value)\n        value = this.option
s.value;\n      else\n        value = this.$element.val();\n\n      // Handle wr
ong DOM or configurations\n      if ('undefined' === typeof value || null === va
lue)\n        return '';\n\n      return this._handleWhitespace(value);\n    },\
n\n    // Reset UI\n    reset: function () {\n      this._resetUI();\n      retu
rn this._trigger('reset');\n    },\n\n    // Destroy Parsley instance (+ UI)\n  
  destroy: function () {\n      // Field case: emit destroy event to clean UI an
d then destroy stored instance\n      this._destroyUI();\n      this.$element.re
moveData('Parsley');\n      this.$element.removeData('FieldMultiple');\n      th
is._trigger('destroy');\n    },\n\n    // Actualize options and rebind constrain
ts\n    refresh: function () {\n      this._refreshConstraints();\n      return 
this;\n    },\n\n    _refreshConstraints: function () {\n      return this.actua
lizeOptions()._bindConstraints();\n    },\n\n    refreshConstraints: function() 
{\n      Utils.warnOnce(\"Parsley's refreshConstraints is deprecated. Please use
 refresh\");\n      return this.refresh();\n    },\n\n    /**\n    * Add a new c
onstraint to a field\n    *\n    * @param {String}   name\n    * @param {Mixed} 
   requirements      optional\n    * @param {Number}   priority          optiona
l\n    * @param {Boolean}  isDomConstraint   optional\n    */\n    addConstraint
: function (name, requirements, priority, isDomConstraint) {\n\n      if (window
.Parsley._validatorRegistry.validators[name]) {\n        var constraint = new Co
nstraint(this, name, requirements, priority, isDomConstraint);\n\n        // if 
constraint already exist, delete it and push new version\n        if ('undefined
' !== this.constraintsByName[constraint.name])\n          this.removeConstraint(
constraint.name);\n\n        this.constraints.push(constraint);\n        this.co
nstraintsByName[constraint.name] = constraint;\n      }\n\n      return this;\n 
   },\n\n    // Remove a constraint\n    removeConstraint: function (name) {\n  
    for (var i = 0; i < this.constraints.length; i++)\n        if (name === this
.constraints[i].name) {\n          this.constraints.splice(i, 1);\n          bre
ak;\n        }\n      delete this.constraintsByName[name];\n      return this;\n
    },\n\n    // Update a constraint (Remove + re-add)\n    updateConstraint: fu
nction (name, parameters, priority) {\n      return this.removeConstraint(name)\
n        .addConstraint(name, parameters, priority);\n    },\n\n    // # Interna
ls\n\n    // Internal only.\n    // Bind constraints from config + options + DOM
\n    _bindConstraints: function () {\n      var constraints = [];\n      var co
nstraintsByName = {};\n\n      // clean all existing DOM constraints to only kee
p javascript user constraints\n      for (var i = 0; i < this.constraints.length
; i++)\n        if (false === this.constraints[i].isDomConstraint) {\n          
constraints.push(this.constraints[i]);\n          constraintsByName[this.constra
ints[i].name] = this.constraints[i];\n        }\n\n      this.constraints = cons
traints;\n      this.constraintsByName = constraintsByName;\n\n      // then re-
add Parsley DOM-API constraints\n      for (var name in this.options)\n        t
his.addConstraint(name, this.options[name], undefined, true);\n\n      // finall
y, bind special HTML5 constraints\n      return this._bindHtml5Constraints();\n 
   },\n\n    // Internal only.\n    // Bind specific HTML5 constraints to be HTM
L5 compliant\n    _bindHtml5Constraints: function () {\n      // html5 required\
n      if (null !== this.element.getAttribute('required'))\n        this.addCons
traint('required', true, undefined, true);\n\n      // html5 pattern\n      if (
null !== this.element.getAttribute('pattern'))\n        this.addConstraint('patt
ern', this.element.getAttribute('pattern'), undefined, true);\n\n      // range\
n      let min = this.element.getAttribute('min');\n      let max = this.element
.getAttribute('max');\n      if (null !== min && null !== max)\n        this.add
Constraint('range', [min, max], undefined, true);\n\n      // HTML5 min\n      e
lse if (null !== min)\n        this.addConstraint('min', min, undefined, true);\
n\n      // HTML5 max\n      else if (null !== max)\n        this.addConstraint(
'max', max, undefined, true);\n\n\n      // length\n      if (null !== this.elem
ent.getAttribute('minlength') && null !== this.element.getAttribute('maxlength')
)\n        this.addConstraint('length', [this.element.getAttribute('minlength'),
 this.element.getAttribute('maxlength')], undefined, true);\n\n      // HTML5 mi
nlength\n      else if (null !== this.element.getAttribute('minlength'))\n      
  this.addConstraint('minlength', this.element.getAttribute('minlength'), undefi
ned, true);\n\n      // HTML5 maxlength\n      else if (null !== this.element.ge
tAttribute('maxlength'))\n        this.addConstraint('maxlength', this.element.g
etAttribute('maxlength'), undefined, true);\n\n\n      // html5 types\n      var
 type = Utils.getType(this.element);\n\n      // Small special case here for HTM
L5 number: integer validator if step attribute is undefined or an integer value,
 number otherwise\n      if ('number' === type) {\n        return this.addConstr
aint('type', ['number', {\n          step: this.element.getAttribute('step') || 
'1',\n          base: min || this.element.getAttribute('value')\n        }], und
efined, true);\n      // Regular other HTML5 supported types\n      } else if (/
^(email|url|range|date)$/i.test(type)) {\n        return this.addConstraint('typ
e', type, undefined, true);\n      }\n      return this;\n    },\n\n    // Inter
nal only.\n    // Field is required if have required constraint without `
                                    false` 
value\n    _isRequired: function () {\n      if ('undefined' === typeof this.con
straintsByName.required)\n        return false;\n\n      return false !== this.c
onstraintsByName.required.requirements;\n    },\n\n    // Internal only.\n    //
 Shortcut to trigger an event\n    _trigger: function (eventName) {\n      retur
n this.trigger('field:' + eventName);\n    },\n\n    // Internal only\n    // Ha
ndles whitespace in a value\n    // Use `
                                    data - parsley - whitespace = \"squish\"` to 
                                    auto squish input value\ n // Use `data-parsley-whitespace=\"trim\"` to auto t
                                    rim input value\ n _handleWhitespace: function(value) {
                                        \
                                        n
                                        if (true === t his.options.trimValue)\ n Utils.warnOnce('data-parsley-trim-value=\"true\"
                                            is deprecated, please use data - parsley - whitespace = \"trim\"');\n\n      if ('squ
                                            ish ' === this.options.whitespace)\n        value = value.replace(/\\s{2,}/g, '
                                            '
                                        );\
                                        n\ n
                                        if (('trim' === this.options.whitespace) || ('squish' === this.optio ns.whitespace) || (true === this.options.trimValue))\ n value = Utils.trim
                                        String(value);\
                                        n\ n
                                        return value;\
                                        n
                                    }, \n\ n _isDateInput: function() {
                                        \
                                        n
                                        var c = this.constraintsByName.type;\
                                        n
                                        return c && c.requirements == = 'date';\
                                        n
                                    }, \n\ n // Internal only.\n    // Returns the constraints, grou
                                    ped by descending priority.\n // The result is thus an array of arrays of con
                                    straints.\n _getGroupedConstraints: function() {
                                        \
                                        n
                                        if (false === this.o ptions.priorityEnabled)\ n
                                        return [this.constraints];\
                                        n\ n
                                        var grouped
                                        Constraints = [];\
                                        n
                                        var index = {};\
                                        n\ n // Create array unique of prio
                                        rities\ n
                                        for (var i = 0; i < this.constraints.length; i++) {
                                            \
                                            n
                                            var p = this.constraints[i].priority;\
                                            n
                                            if (!index[p])\ n groupedConst
                                            raints.push(index[p] = []);\
                                            n index[p].push(this.constraints[i]);\
                                            n
                                        }\
                                        n // Sort them by priority DESC\n      groupedConstraints.sort(function (
                                        a, b) {
                                        return b[0].priority - a[0].priority;
                                    });\
                                n\ n
                                return groupedConstra
                                ints;\
                                n
                            }\
                            n\ n
                        };\
                        n\ n
                        var parsley_field = Field;\
                        n\ n
                        var Multiple = functio
                        n() {
                            \
                            n this.__class__ = 'FieldMultiple';\
                            n
                        };\
                        n\ n Multiple.prototype = {
                            \
                            n // Add new `$element` sibling for multiple field\n    addElement: function 
                            ($element) {
                                \
                                n this.$elements.push($element);\
                                n\ n
                                return this;\
                                n
                            },
                            \n\ n // See `Field._refreshConstraints()`\n    _refreshConstraints: function 
                            () {
                                \
                                n
                                var fieldConstraints;\
                                n\ n this.constraints = [];\
                                n\ n // Se
                                lect multiple special treatment\ n
                                if (this.element.nodeName === 'SELECT') {
                                    \
                                    n this.actualizeOptions()._bindConstraints();\
                                    n\ n
                                    return this;\
                                    n
                                }\
                                n\ n // Gather all constraints for each input in the multiple group\n
                                for (var i = 0; i < this.$elements.length; i++) {
                                    \
                                    n\ n // Check if e
                                    lement have not been dynamically removed since last binding\ n
                                    if (!$('htm
                                            l ').has(this.$elements[i]).length) {\n          this.$elements.splice(i, 1);\n  
                                            continue;\ n
                                        }\
                                        n\ n fieldConstraints = this.$elements[i].dat a('FieldMultiple')._refreshConstraints().constraints;\ n\ n
                                        for (var j = 0; j < fieldConstraints.length; j++)\ n this.addConstraint(fieldConstraint s[j].name, fieldConstraints[j].requirements, fieldConstraints[j].priority, field Constraints[j].isDomConstraint);\ n
                                    }\
                                    n\ n
                                    return this;\
                                    n
                                }, \n\ n /
                                    / See `Field.getValue()`\n    getValue: function () {\n      / / Value could be o
                                verriden in DOM\ n
                                if ('function' === typeof this.options.value)\ n re
                                turn this.options.value(this);\
                                n
                                else if ('undefined' !== typeof this.optio ns.value)\ n
                                return this.options.value;\
                                n\ n // Radio input case\n    
                                if (this.element.nodeName === 'INPUT') {
                                    \
                                    n
                                    var type = Utils.getType(thi s.element);\
                                    n
                                    if (type === 'radio')\ n
                                    return this._findRelated()
                                        .filter(':checked').val() || '';\
                                    n\ n // checkbox input case\n        if (
                                    type === 'checkbox') {
                                    \
                                    n
                                    var values = [];\
                                    n\ n this._findRelate
                                    d().filter(':checked').each(function() {
                                        \
                                        n values.push($(this).val());\
                                        n
                                    });\
                                    n\ n
                                    return values;\
                                    n
                                }\
                                n
                            }\
                            n\ n // Se
                            lect multiple
                            case\ n
                            if (this.element.nodeName === 'SELECT' && null === thi s.$element.val())\ n
                            return [];\n\ n // Default case that should never
                            happen\ n
                            return this.$element.val();\n
                        }, \n\ n _init: function() {
                            \
                            n
                            this.$elements = [this.$element];\
                            n\ n
                            return this;\
                            n
                        }\
                        n
                    };\
                    n\ n
                    var Factory = function(element, options, parsleyFormInstance) {
                            \
                            n this.eleme
                            nt = element;\
                            n this.$element = $(element);\
                            n\ n // If the element has alre
                            ady been bound, returns its saved Parsley instance\ n
                            var savedparsleyFormInst
                            ance = this.$element.data('Parsley');\
                            n
                            if (savedparsleyFormInstance) {
                                \
                                n\ n
                                // If the saved instance has been bound without a Form parent and there is o
                                ne given in this call, add it\ n
                                if ('undefined' !== typeof parsleyFormInsta nce && savedparsleyFormInstance.parent === window.Parsley) {
                                    \
                                    n savedparsl
                                    eyFormInstance.parent = parsleyFormInstance;\
                                    n savedparsleyFormInstance._
                                    resetOptions(savedparsleyFormInstance.options);\
                                    n
                                }\
                                n\ n
                                if ('object' = ==
                                    typeof options) {
                                    \
                                    n Object.assign(savedparsleyFormInstance.options, op tions);\
                                    n
                                }\
                                n\ n
                                return savedparsleyFormInstance;\
                                n
                            }\
                            n\ n // Pars
                            ley must be instantiated with a DOM element or jQuery $element\ n
                            if (!this.$e lement.length)\ n
                            throw new Error('You must bind Parsley on an existing elem
                                ent.
                                ');\n\n    if ('
                                undefined ' !== typeof parsleyFormInstance && '
                                Form ' !== pars
                                leyFormInstance.__class__)\ n
                            throw new Error('Parent instance must be a For
                                m instance ');\n\n    this.parent = parsleyFormInstance || window.Parsley;\n    r
                                eturn this.init(options);\ n
                            };\
                            n\ n Factory.prototype = {
                                \
                                n init: function(
                                    options) {
                                    \
                                    n this.__class__ = 'Parsley';\
                                    n this.__version__ = '2.8.0';\
                                    n this.__id__ = Utils.generateID();\
                                    n\ n // Pre-compute options\n     
                                    this._resetOptions(options);\
                                    n\ n // A Form instance is obviously a `<form>
                                        ` element but also every node that is not an input and has the `
                                    data - parsley - val
                                    idate` attribute\n      if (this.element.nodeName === 'FORM' || (Utils.checkAttr
(this.element, this.options.namespace, 'validate') && !this.$element.is(this.opt
ions.inputs)))\n        return this.bind('parsleyForm');\n\n      // Every other
 element is bound as a `
                                    Field` or `
                                    FieldMultiple`\n      return this.isMultiple(
) ? this.handleMultiple() : this.bind('parsleyField');\n    },\n\n    isMultiple
: function () {\n      var type = Utils.getType(this.element);\n      return ((t
ype === 'radio' || type === 'checkbox') ||\n        (this.element.nodeName === '
SELECT' && null !== this.element.getAttribute('multiple')));\n    },\n\n    // M
ultiples fields are a real nightmare :(\n    // Maybe some refactoring would be 
appreciated here...\n    handleMultiple: function () {\n      var name;\n      v
ar multiple;\n      var parsleyMultipleInstance;\n\n      // Handle multiple nam
e\n      this.options.multiple = this.options.multiple ||\n        (name = this.
element.getAttribute('name')) ||\n        this.element.getAttribute('id');\n\n  
    // Special select multiple input\n      if (this.element.nodeName === 'SELEC
T' && null !== this.element.getAttribute('multiple')) {\n        this.options.mu
ltiple = this.options.multiple || this.__id__;\n        return this.bind('parsle
yFieldMultiple');\n\n      // Else for radio / checkboxes, we need a `
                                    name` or `
                                    data - parsley - multiple` to properly bind it\n      } else if (!this.options.multi
ple) {\n        Utils.warn('To be bound by Parsley, a radio, a checkbox and a mu
ltiple select input must have either a name or a multiple option.', this.$elemen
t);\n        return this;\n      }\n\n      // Remove special chars\n      this.
options.multiple = this.options.multiple.replace(/(:|\\.|\\[|\\]|\\{|\\}|\\$)/g,
 '');\n\n      // Add proper `
                                    data - parsley - multiple` to siblings if we have a va
lid multiple name\n      if (name) {\n        $('input[name=\"' + name + '\"]').
each((i, input) => {\n          var type = Utils.getType(input);\n          if (
(type === 'radio' || type === 'checkbox'))\n            input.setAttribute(this.
options.namespace + 'multiple', this.options.multiple);\n        });\n      }\n\
n      // Check here if we don't already have a related multiple instance saved\
n      var $previouslyRelated = this._findRelated();\n      for (var i = 0; i < 
$previouslyRelated.length; i++) {\n        parsleyMultipleInstance = $($previous
lyRelated.get(i)).data('Parsley');\n        if ('undefined' !== typeof parsleyMu
ltipleInstance) {\n\n          if (!this.$element.data('FieldMultiple')) {\n    
        parsleyMultipleInstance.addElement(this.$element);\n          }\n\n     
     break;\n        }\n      }\n\n      // Create a secret Field instance for e
very multiple field. It will be stored in `
                                    data('FieldMultiple')`\n      // And 
will be useful later to access classic `
                                    Field` stuff while being in a `
                                    FieldMult
                                    iple` instance\n      this.bind('parsleyField', true);\n\n      return parsleyMu
ltipleInstance || this.bind('parsleyFieldMultiple');\n    },\n\n    // Return pr
oper `
                                    Form`, `
                                    Field` or `
                                    FieldMultiple`\n    bind: function (type, doNotStore) {
\n      var parsleyInstance;\n\n      switch (type) {\n        case 'parsleyForm
':\n          parsleyInstance = $.extend(\n            new Form(this.element, th
is.domOptions, this.options),\n            new Base(),\n            window.Parsl
eyExtend\n          )._bindFields();\n          break;\n        case 'parsleyFie
ld':\n          parsleyInstance = $.extend(\n            new parsley_field(this.
element, this.domOptions, this.options, this.parent),\n            new Base(),\n
            window.ParsleyExtend\n          );\n          break;\n        case '
parsleyFieldMultiple':\n          parsleyInstance = $.extend(\n            new p
arsley_field(this.element, this.domOptions, this.options, this.parent),\n       
     new Multiple(),\n            new Base(),\n            window.ParsleyExtend\
n          )._init();\n          break;\n        default:\n          throw new E
rror(type + 'is not a supported Parsley type');\n      }\n\n      if (this.optio
ns.multiple)\n        Utils.setAttr(this.element, this.options.namespace, 'multi
ple', this.options.multiple);\n\n      if ('undefined' !== typeof doNotStore) {\
n        this.$element.data('FieldMultiple', parsleyInstance);\n\n        return
 parsleyInstance;\n      }\n\n      // Store the freshly bound instance in a DOM
 element for later access using jQuery `
                                    data()`\n      this.$element.data('Parsl
ey', parsleyInstance);\n\n      // Tell the world we have a new Form or Field in
stance!\n      parsleyInstance._actualizeTriggers();\n      parsleyInstance._tri
gger('init');\n\n      return parsleyInstance;\n    }\n  };\n\n  var vernums = $
.fn.jquery.split('.');\n  if (parseInt(vernums[0]) <= 1 && parseInt(vernums[1]) 
< 8) {\n    throw \"The loaded version of jQuery is too old. Please upgrade to 1
.8.x or better.\";\n  }\n  if (!vernums.forEach) {\n    Utils.warn('Parsley requ
ires ES5 to run properly. Please include https://github.com/es-shims/es5-shim');
\n  }\n  // Inherit `
                                    on`, `
                                    off` & `
                                    trigger` to Parsley:\n  var Parsley = Object.
assign(new Base(), {\n      element: document,\n      $element: $(document),\n  
    actualizeOptions: null,\n      _resetOptions: null,\n      Factory: Factory,
\n      version: '2.8.0'\n    });\n\n  // Supplement Field and Form with Base\n 
 // This way, the constructors will have access to those methods\n  Object.assig
n(parsley_field.prototype, UI.Field, Base.prototype);\n  Object.assign(Form.prot
otype, UI.Form, Base.prototype);\n  // Inherit actualizeOptions and _resetOption
s:\n  Object.assign(Factory.prototype, Base.prototype);\n\n  // ### jQuery API\n
  // `
                                    $('.elem').parsley(options)` or `
                                    $('.elem').psly(options)`\n  $.fn.parsley
 = $.fn.psly = function (options) {\n    if (this.length > 1) {\n      var insta
nces = [];\n\n      this.each(function () {\n        instances.push($(this).pars
ley(options));\n      });\n\n      return instances;\n    }\n\n    // Return und
efined if applied to non existing DOM element\n    if (this.length == 0) {\n    
  return;\n    }\n\n    return new Factory(this[0], options);\n  };\n\n  // ### 
Field and Form extension\n  // Ensure the extension is now defined if it wasn't 
previously\n  if ('undefined' === typeof window.ParsleyExtend)\n    window.Parsl
eyExtend = {};\n\n  // ### Parsley config\n  // Inherit from ParsleyDefault, and
 copy over any existing values\n  Parsley.options = Object.assign(Utils.objectCr
eate(Defaults), window.ParsleyConfig);\n  window.ParsleyConfig = Parsley.options
; // Old way of accessing global options\n\n  // ### Globals\n  window.Parsley =
 window.psly = Parsley;\n  Parsley.Utils = Utils;\n  window.ParsleyUtils = {};\n
  $.each(Utils, (key, value) => {\n    if ('function' === typeof value) {\n     
 window.ParsleyUtils[key] = (...args) => {\n        Utils.warnOnce('Accessing `
                                    w
                                    indow.ParsleyUtils` is deprecated. Use `
                                    window.Parsley.Utils` instead.');\n     
   return Utils[key](...args);\n      };\n    }\n  });\n\n  // ### Define method
s that forward to the registry, and deprecate all access except through window.P
arsley\n  var registry = window.Parsley._validatorRegistry = new ValidatorRegist
ry(window.ParsleyConfig.validators, window.ParsleyConfig.i18n);\n  window.Parsle
yValidator = {};\n  $.each('setLocale addCatalog addMessage addMessages getError
Message formatMessage addValidator updateValidator removeValidator hasValidator'
.split(' '), function (i, method) {\n    window.Parsley[method] = (...args) => r
egistry[method](...args);\n    window.ParsleyValidator[method] = function () {\n
      Utils.warnOnce(`
                                    Accessing the method '${method}'
                                    through Validator is depr
                                    ecated.Simply call 'window.Parsley.${method}(...)'
                                    `);\n      return window.Pars
ley[method](...arguments);\n    };\n  });\n\n  // ### UI\n  // Deprecated global
 object\n  window.Parsley.UI = UI;\n  window.ParsleyUI = {\n    removeError: fun
ction (instance, name, doNotUpdateClass) {\n      var updateClass = true !== doN
otUpdateClass;\n      Utils.warnOnce(`
                                    Accessing UI is deprecated.Call 'removeEr
                                    ror ' on the instance directly. Please comment in issue 1073 as to your need to c
                                    all this method.
                                    `);\n      return instance.removeError(name, {updateClass});\n  
  },\n    getErrorsMessages: function (instance) {\n      Utils.warnOnce(`
                                    Access
                                    ing UI is deprecated.Call 'getErrorsMessages'
                                    on the instance directly.
                                    `);\n   
   return instance.getErrorsMessages();\n    }\n  };\n  $.each('addError updateE
rror'.split(' '), function (i, method) {\n    window.ParsleyUI[method] = functio
n (instance, name, message, assert, doNotUpdateClass) {\n      var updateClass =
 true !== doNotUpdateClass;\n      Utils.warnOnce(`
                                    Accessing UI is deprecated.C
                                    all '${method}'
                                    on the instance directly.Please comment in issue 1073 as to you
                                    r need to call this method.
                                    `);\n      return instance[method](name, {message, as
sert, updateClass});\n    };\n  });\n\n  // ### PARSLEY auto-binding\n  // Preve
nt it by setting `
                                    ParsleyConfig.autoBind` to `
                                    false`\n  if (false !== window.Par
sleyConfig.autoBind) {\n    $(function () {\n      // Works only on `
                                    data - parsle
                                    y - validate`.\n      if ($('[data-parsley-validate]').length)\n        $('[data-p
arsley-validate]').parsley();\n    });\n  }\n\n  var o = $({});\n  var deprecate
d = function () {\n    Utils.warnOnce(\"Parsley's pubsub module is deprecated; u
se the 'on' and 'off' methods on parsley instances or window.Parsley\");\n  };\n
\n  // Returns an event handler that calls `
                                    fn` with the arguments it expects\n 
 function adapt(fn, context) {\n    // Store to allow unbinding\n    if (!fn.par
sleyAdaptedCallback) {\n      fn.parsleyAdaptedCallback = function () {\n       
 var args = Array.prototype.slice.call(arguments, 0);\n        args.unshift(this
);\n        fn.apply(context || o, args);\n      };\n    }\n    return fn.parsle
yAdaptedCallback;\n  }\n\n  var eventPrefix = 'parsley:';\n  // Converts 'parsle
y:form:validate' into 'form:validate'\n  function eventName(name) {\n    if (nam
e.lastIndexOf(eventPrefix, 0) === 0)\n      return name.substr(eventPrefix.lengt
h);\n    return name;\n  }\n\n  // $.listen is deprecated. Use Parsley.on instea
d.\n  $.listen = function (name, callback) {\n    var context;\n    deprecated()
;\n    if ('object' === typeof arguments[1] && 'function' === typeof arguments[2
]) {\n      context = arguments[1];\n      callback = arguments[2];\n    }\n\n  
  if ('function' !== typeof callback)\n      throw new Error('Wrong parameters')
;\n\n    window.Parsley.on(eventName(name), adapt(callback, context));\n  };\n\n
  $.listenTo = function (instance, name, fn) {\n    deprecated();\n    if (!(ins
tance instanceof parsley_field) && !(instance instanceof Form))\n      throw new
 Error('Must give Parsley instance');\n\n    if ('string' !== typeof name || 'fu
nction' !== typeof fn)\n      throw new Error('Wrong parameters');\n\n    instan
ce.on(eventName(name), adapt(fn));\n  };\n\n  $.unsubscribe = function (name, fn
) {\n    deprecated();\n    if ('string' !== typeof name || 'function' !== typeo
f fn)\n      throw new Error('Wrong arguments');\n    window.Parsley.off(eventNa
me(name), fn.parsleyAdaptedCallback);\n  };\n\n  $.unsubscribeTo = function (ins
tance, name) {\n    deprecated();\n    if (!(instance instanceof parsley_field) 
&& !(instance instanceof Form))\n      throw new Error('Must give Parsley instan
ce');\n    instance.off(eventName(name));\n  };\n\n  $.unsubscribeAll = function
 (name) {\n    deprecated();\n    window.Parsley.off(eventName(name));\n    $('f
orm,input,textarea,select').each(function () {\n      var instance = $(this).dat
a('Parsley');\n      if (instance) {\n        instance.off(eventName(name));\n  
    }\n    });\n  };\n\n  // $.emit is deprecated. Use jQuery events instead.\n 
 $.emit = function (name, instance) {\n    deprecated();\n    var instanceGiven 
= (instance instanceof parsley_field) || (instance instanceof Form);\n    var ar
gs = Array.prototype.slice.call(arguments, instanceGiven ? 2 : 1);\n    args.uns
hift(eventName(name));\n    if (!instanceGiven) {\n      instance = window.Parsl
ey;\n    }\n    instance.trigger(...args);\n  };\n\n  var pubsub = {};\n\n  $.ex
tend(true, Parsley, {\n    asyncValidators: {\n      'default': {\n        fn: f
unction (xhr) {\n          // By default, only status 2xx are deemed successful.
\n          // Note: we use status instead of state() because responses with sta
tus 200\n          // but invalid messages (e.g. an empty body for content type 
set to JSON) will\n          // result in state() === 'rejected'.\n          ret
urn xhr.status >= 200 && xhr.status < 300;\n        },\n        url: false\n    
  },\n      reverse: {\n        fn: function (xhr) {\n          // If reverse op
tion is set, a failing ajax request is considered successful\n          return x
hr.status < 200 || xhr.status >= 300;\n        },\n        url: false\n      }\n
    },\n\n    addAsyncValidator: function (name, fn, url, options) {\n      Pars
ley.asyncValidators[name] = {\n        fn: fn,\n        url: url || false,\n    
    options: options || {}\n      };\n\n      return this;\n    }\n\n  });\n\n  
Parsley.addValidator('remote', {\n    requirementType: {\n      '': 'string',\n 
     'validator': 'string',\n      'reverse': 'boolean',\n      'options': 'obje
ct'\n    },\n\n    validateString: function (value, url, options, instance) {\n 
     var data = {};\n      var ajaxOptions;\n      var csr;\n      var validator
 = options.validator || (true === options.reverse ? 'reverse' : 'default');\n\n 
     if ('undefined' === typeof Parsley.asyncValidators[validator])\n        thr
ow new Error('Calling an undefined async validator: `
                                    ' + validator + '
                                    `');\n\n  
    url = Parsley.asyncValidators[validator].url || url;\n\n      // Fill curren
t value\n      if (url.indexOf('{value}') > -1) {\n        url = url.replace('{v
alue}', encodeURIComponent(value));\n      } else {\n        data[instance.eleme
nt.getAttribute('name') || instance.element.getAttribute('id')] = value;\n      
}\n\n      // Merge options passed in from the function with the ones in the att
ribute\n      var remoteOptions = $.extend(true, options.options || {} , Parsley
.asyncValidators[validator].options);\n\n      // All `
                                    $.ajax(options)` could be
 overridden or extended directly from DOM in `
                                    data - parsley - remote - options`\n    
  ajaxOptions = $.extend(true, {}, {\n        url: url,\n        data: data,\n  
      type: 'GET'\n      }, remoteOptions);\n\n      // Generate store key based
 on ajax options\n      instance.trigger('field:ajaxoptions', instance, ajaxOpti
ons);\n\n      csr = $.param(ajaxOptions);\n\n      // Initialise querry cache\n
      if ('undefined' === typeof Parsley._remoteCache)\n        Parsley._remoteC
ache = {};\n\n      // Try to retrieve stored xhr\n      var xhr = Parsley._remo
teCache[csr] = Parsley._remoteCache[csr] || $.ajax(ajaxOptions);\n\n      var ha
ndleXhr = function () {\n        var result = Parsley.asyncValidators[validator]
.fn.call(instance, xhr, url, options);\n        if (!result) // Map falsy result
s to rejected promise\n          result = $.Deferred().reject();\n        return
 $.when(result);\n      };\n\n      return xhr.then(handleXhr, handleXhr);\n    
},\n\n    priority: -1\n  });\n\n  Parsley.on('form:submit', function () {\n    
Parsley._remoteCache = {};\n  });\n\n  Base.prototype.addAsyncValidator = functi
on () {\n    Utils.warnOnce('Accessing the method `
                                    addAsyncValidator` through an
 instance is deprecated. Simply call `
                                    Parsley.addAsyncValidator(...)`');\n    re
turn Parsley.addAsyncValidator(...arguments);\n  };\n\n  // This is included wit
h the Parsley library itself,\n  // thus there is no use in adding it to your pr
oject.\n  Parsley.addMessages('en', {\n    defaultMessage: \"This value seems to
 be invalid.\",\n    type: {\n      email:        \"This value should be a valid
 email.\",\n      url:          \"This value should be a valid url.\",\n      nu
mber:       \"This value should be a valid number.\",\n      integer:      \"Thi
s value should be a valid integer.\",\n      digits:       \"This value should b
e digits.\",\n      alphanum:     \"This value should be alphanumeric.\"\n    },
\n    notblank:       \"This value should not be blank.\",\n    required:       
\"This value is required.\",\n    pattern:        \"This value seems to be inval
id.\",\n    min:            \"This value should be greater than or equal to %s.\
",\n    max:            \"This value should be lower than or equal to %s.\",\n  
  range:          \"This value should be between %s and %s.\",\n    minlength:  
    \"This value is too short. It should have %s characters or more.\",\n    max
length:      \"This value is too long. It should have %s characters or fewer.\",
\n    length:         \"This value length is invalid. It should be between %s an
d %s characters long.\",\n    mincheck:       \"You must select at least %s choi
ces.\",\n    maxcheck:       \"You must select %s choices or fewer.\",\n    chec
k:          \"You must select between %s and %s choices.\",\n    equalto:       
 \"This value should be the same.\"\n  });\n\n  Parsley.setLocale('en');\n\n  /*
*\n   * inputevent - Alleviate browser bugs for input events\n   * https://githu
b.com/marcandre/inputevent\n   * @version v0.0.3 - (built Thu, Apr 14th 2016, 5:
58 pm)\n   * @author Marc-Andre Lafortune <github@marc-andre.ca>\n   * @license 
MIT\n   */\n\n  function InputEvent() {\n    let globals = window || global;\n\n
    // Slightly odd way construct our object. This way methods are force bound.\
n    // Used to test for duplicate library.\n    Object.assign(this, {\n\n      
// For browsers that do not support isTrusted, assumes event is native.\n      i
sNativeEvent: evt => {\n        return evt.originalEvent && evt.originalEvent.is
Trusted !== false;\n      },\n\n      fakeInputEvent: evt => {\n        if (this
.isNativeEvent(evt)) {\n          $(evt.target).trigger('input');\n        }\n  
    },\n\n      misbehaves: evt => {\n        if (this.isNativeEvent(evt)) {\n  
        this.behavesOk(evt);\n          $(document)\n            .on('change.inp
utevent', evt.data.selector, this.fakeInputEvent);\n          this.fakeInputEven
t(evt);\n        }\n      },\n\n      behavesOk: evt => {\n        if (this.isNa
tiveEvent(evt)) {\n          $(document) // Simply unbinds the testing handler\n
            .off('input.inputevent', evt.data.selector, this.behavesOk)\n       
     .off('change.inputevent', evt.data.selector, this.misbehaves);\n        }\n
      },\n\n      // Bind the testing handlers\n      install: () => {\n        
if (globals.inputEventPatched) {\n          return;\n        }\n        globals.
inputEventPatched = '0.0.3';\n        for (let selector of ['select', 'input[typ
e=\"checkbox\"]', 'input[type=\"radio\"]', 'input[type=\"file\"]']) {\n         
 $(document)\n            .on('input.inputevent', selector, {selector}, this.beh
avesOk)\n            .on('change.inputevent', selector, {selector}, this.misbeha
ves);\n        }\n      },\n\n      uninstall: () => {\n        delete globals.i
nputEventPatched;\n        $(document).off('.inputevent');\n      }\n\n    });\n
  };\n\n  var inputevent = new InputEvent();\n\n  inputevent.install();\n\n  var
 parsley = Parsley;\n\n  return parsley;\n\n}));\n","import $ from 'jquery';\nim
port Field from './field';\nimport Form from './form';\nimport Utils from './uti
ls';\n\nvar o = $({});\nvar deprecated = function () {\n  Utils.warnOnce(\"Parsl
ey's pubsub module is deprecated; use the 'on' and 'off' methods on parsley inst
ances or window.Parsley\");\n};\n\n// Returns an event handler that calls `
                                    fn` w
ith the arguments it expects\nfunction adapt(fn, context) {\n  // Store to allow
 unbinding\n  if (!fn.parsleyAdaptedCallback) {\n    fn.parsleyAdaptedCallback =
 function () {\n      var args = Array.prototype.slice.call(arguments, 0);\n    
  args.unshift(this);\n      fn.apply(context || o, args);\n    };\n  }\n  retur
n fn.parsleyAdaptedCallback;\n}\n\nvar eventPrefix = 'parsley:';\n// Converts 'p
arsley:form:validate' into 'form:validate'\nfunction eventName(name) {\n  if (na
me.lastIndexOf(eventPrefix, 0) === 0)\n    return name.substr(eventPrefix.length
);\n  return name;\n}\n\n// $.listen is deprecated. Use Parsley.on instead.\n$.l
isten = function (name, callback) {\n  var context;\n  deprecated();\n  if ('obj
ect' === typeof arguments[1] && 'function' === typeof arguments[2]) {\n    conte
xt = arguments[1];\n    callback = arguments[2];\n  }\n\n  if ('function' !== ty
peof callback)\n    throw new Error('Wrong parameters');\n\n  window.Parsley.on(
eventName(name), adapt(callback, context));\n};\n\n$.listenTo = function (instan
ce, name, fn) {\n  deprecated();\n  if (!(instance instanceof Field) && !(instan
ce instanceof Form))\n    throw new Error('Must give Parsley instance');\n\n  if
 ('string' !== typeof name || 'function' !== typeof fn)\n    throw new Error('Wr
ong parameters');\n\n  instance.on(eventName(name), adapt(fn));\n};\n\n$.unsubsc
ribe = function (name, fn) {\n  deprecated();\n  if ('string' !== typeof name ||
 'function' !== typeof fn)\n    throw new Error('Wrong arguments');\n  window.Pa
rsley.off(eventName(name), fn.parsleyAdaptedCallback);\n};\n\n$.unsubscribeTo = 
function (instance, name) {\n  deprecated();\n  if (!(instance instanceof Field)
 && !(instance instanceof Form))\n    throw new Error('Must give Parsley instanc
e');\n  instance.off(eventName(name));\n};\n\n$.unsubscribeAll = function (name)
 {\n  deprecated();\n  window.Parsley.off(eventName(name));\n  $('form,input,tex
tarea,select').each(function () {\n    var instance = $(this).data('Parsley');\n
    if (instance) {\n      instance.off(eventName(name));\n    }\n  });\n};\n\n/
/ $.emit is deprecated. Use jQuery events instead.\n$.emit = function (name, ins
tance) {\n  deprecated();\n  var instanceGiven = (instance instanceof Field) || 
(instance instanceof Form);\n  var args = Array.prototype.slice.call(arguments, 
instanceGiven ? 2 : 1);\n  args.unshift(eventName(name));\n  if (!instanceGiven)
 {\n    instance = window.Parsley;\n  }\n  instance.trigger(...args);\n};\n\nexp
ort default {};\n","/**\n * inputevent - Alleviate browser bugs for input events
\n * https://github.com/marcandre/inputevent\n * @version v0.0.3 - (built Thu, A
pr 14th 2016, 5:58 pm)\n * @author Marc-Andre Lafortune <github@marc-andre.ca>\n
 * @license MIT\n */\n\nimport $ from 'jquery';\n\nfunction InputEvent() {\n  le
t globals = window || global;\n\n  // Slightly odd way construct our object. Thi
s way methods are force bound.\n  // Used to test for duplicate library.\n  Obje
ct.assign(this, {\n\n    // For browsers that do not support isTrusted, assumes 
event is native.\n    isNativeEvent: evt => {\n      return evt.originalEvent &&
 evt.originalEvent.isTrusted !== false;\n    },\n\n    fakeInputEvent: evt => {\
n      if (this.isNativeEvent(evt)) {\n        $(evt.target).trigger('input');\n
      }\n    },\n\n    misbehaves: evt => {\n      if (this.isNativeEvent(evt)) 
{\n        this.behavesOk(evt);\n        $(document)\n          .on('change.inpu
tevent', evt.data.selector, this.fakeInputEvent);\n        this.fakeInputEvent(e
vt);\n      }\n    },\n\n    behavesOk: evt => {\n      if (this.isNativeEvent(e
vt)) {\n        $(document) // Simply unbinds the testing handler\n          .of
f('input.inputevent', evt.data.selector, this.behavesOk)\n          .off('change
.inputevent', evt.data.selector, this.misbehaves);\n      }\n    },\n\n    // Bi
nd the testing handlers\n    install: () => {\n      if (globals.inputEventPatch
ed) {\n        return;\n      }\n      globals.inputEventPatched = '0.0.3';\n   
   for (let selector of ['select', 'input[type=\"checkbox\"]', 'input[type=\"rad
io\"]', 'input[type=\"file\"]']) {\n        $(document)\n          .on('input.in
putevent', selector, {selector}, this.behavesOk)\n          .on('change.inputeve
nt', selector, {selector}, this.misbehaves);\n      }\n    },\n\n    uninstall: 
() => {\n      delete globals.inputEventPatched;\n      $(document).off('.inpute
vent');\n    }\n\n  });\n};\n\nexport default new InputEvent();\n","import $ fro
m 'jquery';\n\nvar globalID = 1;\nvar pastWarnings = {};\n\nvar Utils = {\n  // 
Parsley DOM-API\n  // returns object from dom attributes and values\n  attr: fun
ction (element, namespace, obj) {\n    var i;\n    var attribute;\n    var attri
butes;\n    var regex = new RegExp('^' + namespace, 'i');\n\n    if ('undefined'
 === typeof obj)\n      obj = {};\n    else {\n      // Clear all own properties
. This won't affect prototype's values\n      for (i in obj) {\n        if (obj.
hasOwnProperty(i))\n          delete obj[i];\n      }\n    }\n\n    if (!element
)\n      return obj;\n\n    attributes = element.attributes;\n    for (i = attri
butes.length; i--; ) {\n      attribute = attributes[i];\n\n      if (attribute 
&& attribute.specified && regex.test(attribute.name)) {\n        obj[this.cameli
ze(attribute.name.slice(namespace.length))] = this.deserializeValue(attribute.va
lue);\n      }\n    }\n\n    return obj;\n  },\n\n  checkAttr: function (element
, namespace, checkAttr) {\n    return element.hasAttribute(namespace + checkAttr
);\n  },\n\n  setAttr: function (element, namespace, attr, value) {\n    element
.setAttribute(this.dasherize(namespace + attr), String(value));\n  },\n\n  getTy
pe: function(element) {\n    return element.getAttribute('type') || 'text';\n  }
,\n\n  generateID: function () {\n    return '' + globalID++;\n  },\n\n  /** Thi
rd party functions **/\n  deserializeValue: function (value) {\n    var num;\n\n
    try {\n      return value ?\n        value == \"true\" ||\n        (value ==
 \"false\" ? false :\n        value == \"null\" ? null :\n        !isNaN(num = N
umber(value)) ? num :\n        /^[\\[\\{]/.test(value) ? JSON.parse(value) :\n  
      value)\n        : value;\n    } catch (e) { return value; }\n  },\n\n  // 
Zepto camelize function\n  camelize: function (str) {\n    return str.replace(/-
+(.)?/g, function (match, chr) {\n      return chr ? chr.toUpperCase() : '';\n  
  });\n  },\n\n  // Zepto dasherize function\n  dasherize: function (str) {\n   
 return str.replace(/::/g, '/')\n      .replace(/([A-Z]+)([A-Z][a-z])/g, '$1_$2'
)\n      .replace(/([a-z\\d])([A-Z])/g, '$1_$2')\n      .replace(/_/g, '-')\n   
   .toLowerCase();\n  },\n\n  warn: function () {\n    if (window.console && 'fu
nction' === typeof window.console.warn)\n      window.console.warn(...arguments)
;\n  },\n\n  warnOnce: function(msg) {\n    if (!pastWarnings[msg]) {\n      pas
tWarnings[msg] = true;\n      this.warn(...arguments);\n    }\n  },\n\n  _resetW
arnings: function () {\n    pastWarnings = {};\n  },\n\n  trimString: function(s
tring) {\n    return string.replace(/^\\s+|\\s+$/g, '');\n  },\n\n  parse: {\n  
  date: function(string) {\n      let parsed = string.match(/^(\\d{4,})-(\\d\\d)
-(\\d\\d)$/);\n      if (!parsed)\n        return null;\n      let [_, year, mon
th, day] = parsed.map(x => parseInt(x, 10));\n      let date = new Date(year, mo
nth - 1, day);\n      if (date.getFullYear() !== year || date.getMonth() + 1 !==
 month || date.getDate() !== day)\n        return null;\n      return date;\n   
 },\n    string: function(string) {\n      return string;\n    },\n    integer: 
function(string) {\n      if (isNaN(string))\n        return null;\n      return
 parseInt(string, 10);\n    },\n    number: function(string) {\n      if (isNaN(
string))\n        throw null;\n      return parseFloat(string);\n    },\n    'bo
olean': function _boolean(string) {\n      return !(/^\\s*false\\s*$/i.test(stri
ng));\n    },\n    object: function(string) {\n      return Utils.deserializeVal
ue(string);\n    },\n    regexp: function(regexp) {\n      var flags = '';\n\n  
    // Test if RegExp is literal, if not, nothing to be done, otherwise, we need
 to isolate flags and pattern\n      if (/^\\/.*\\/(?:[gimy]*)$/.test(regexp)) {
\n        // Replace the regexp literal string with the first match group: ([gim
y]*)\n        // If no flag is present, this will be a blank string\n        fla
gs = regexp.replace(/.*\\/([gimy]*)$/, '$1');\n        // Again, replace the reg
exp literal string with the first match group:\n        // everything excluding 
the opening and closing slashes and the flags\n        regexp = regexp.replace(n
ew RegExp('^/(.*?)/' + flags + '$'), '$1');\n      } else {\n        // Anchor r
egexp:\n        regexp = '^' + regexp + '$';\n      }\n      return new RegExp(r
egexp, flags);\n    }\n  },\n\n  parseRequirement: function(requirementType, str
ing) {\n    var converter = this.parse[requirementType || 'string'];\n    if (!c
onverter)\n      throw 'Unknown requirement specification: \"' + requirementType
 + '\"';\n    let converted = converter(string);\n    if (converted === null)\n 
     throw `
                                    Requirement is not a $ {
                                        requirementType
                                    }: \"${string}\"`;\n    return
                                    converted;\
                                    n
                                },
                                \n\ n namespaceEvents: function(events, namespace) {
                                    \
                                    n event
                                    s = this.trimString(events || '').split(/\\s+/);\
                                    n
                                    if (!events[0])\ n ret
                                    urn '';\
                                    n
                                    return $.map(events, evt => `${evt}.${namespace}`).join(' ');\
                                    n
                                },
                                \n\ n difference: function(array, remove) {
                                    \
                                    n // This is O(N^2), should be op
                                    timized\ n
                                    let result = [];\
                                    n $.each(array, (_, elem) => {
                                        \
                                        n
                                        if (remov e.indexOf(elem) == -1)\ n result.push(elem);\
                                        n
                                    });\
                                    n
                                    return result;\
                                    n
                                },
                                \n\ n // Alter-ego to native Promise.all, but for jQuery\n  all: function(p
                                romises) {
                                \
                                n // jQuery treats $.when() and $.when(singlePromise) differently;
                                let 's avoid that and add spurious elements\n    return $.when(...promises, 42, 
                                42);\
                            n
                        },
                        \n\ n // Object.create polyfill, see https://developer.mozilla.org/en-
                    US / docs / Web / JavaScript / Reference / Global_Objects / Object / create #Polyfill\ n object
                    Create: Object.create || (function() {
                            \
                            n
                            var Object = function() {};\
                            n r
                            eturn
                            function(prototype) {
                                \
                                n
                                if (arguments.length > 1) {
                                    \
                                    n
                                    throw E
                                    rror('Second argument not supported');\
                                    n
                                }\
                                n
                                if (typeof prototype != '
                                    object ') {\n        throw TypeError('
                                    Argument must be an object ');\n      }\n   
                                    Object.prototype = prototype;\ n
                                    var result = new Object();\ n Object
                                    .prototype = null;\ n
                                    return result;\ n
                                };\
                                n
                            })(), \n\ n _SubmitSelector:
                        'input[type=\"submit\"], button:submit'\
                        n
                    };\
                    n\ nexport
                    default Utils;\
                    n "," // All 
                    these options could be overriden and specified directly in DOM using\ n // `data-p
                    arsley - ` default DOM-API\n// eg: `
                    inputs` can be set in DOM using `
                    data - parsley -
                        inputs = \"input, textarea\"`\n// eg: `data-parsley-stop-on-first-failing-constrai
                    nt = \"false\"`\n\nvar Defaults = {\n  // ### General\n\n  // Default data-namespa
                    ce
                    for DOM API\ n namespace: 'data-parsley-', \n\ n // Supported inputs by defaul
                    t\ n inputs: 'input, textarea, select', \n\ n // Excluded inputs by default\n  ex
                    cluded: 'input[type=button], input[type=submit], input[type=reset], input[type=h
                    idden]
                ',\n\n  // Stop validating field on highest priority failing constraint\n 
                priorityEnabled: true, \n\ n // ### Field only\n\n  // identifier used to group 
                together inputs(e.g.radio buttons...)\ n multiple: null, \n\ n // identifier (o
                r array of identifiers) used to validate only a select group of inputs\ n group: null,
            \n\ n // ### UI\n  // Enable\\Disable error messages\n  uiEnabled: true,\n
            \ n // Key events threshold before validation\n  validationThreshold: 3,\n\n  //
            Focused field on form validation error.
            'first' | 'last' | 'none'\
            n focus: 'first',
            \n\ n // event(s) that will trigger validation before first failure. eg: `input
            `...\n  trigger: false,\n\n  // event(s) that will trigger validation after firs
t failure.\n  triggerAfterFailure: 'input',\n\n  // Class that would be added on
 every failing validation Parsley field\n  errorClass: 'parsley-error',\n\n  // 
Same for success validation\n  successClass: 'parsley-success',\n\n  // Return t
he `
            $element` that will receive these above success or error classes\n  // Could
 also be (and given directly from DOM) a valid selector like `
            '#div'
            `\n  classHa
ndler: function (Field) {},\n\n  // Return the `
            $element` where errors will be a
ppended\n  // Could also be (and given directly from DOM) a valid selector like 
`
            '#div'
            `\n  errorsContainer: function (Field) {},\n\n  // ul elem that would rec
eive errors' list\n  errorsWrapper: '<ul class=\"parsley-errors-list\"></ul>',\n
\n  // li elem that would receive error message\n  errorTemplate: '<li></li>'\n}
;\n\nexport default Defaults;\n","import $ from 'jquery';\nimport Utils from './
utils';\n\nvar Base = function () {\n  this.__id__ = Utils.generateID();\n};\n\n
Base.prototype = {\n  asyncSupport: true, // Deprecated\n\n  _pipeAccordingToVal
idationResult: function () {\n    var pipe = () => {\n      var r = $.Deferred()
;\n      if (true !== this.validationResult)\n        r.reject();\n      return 
r.resolve().promise();\n    };\n    return [pipe, pipe];\n  },\n\n  actualizeOpt
ions: function () {\n    Utils.attr(this.element, this.options.namespace, this.d
omOptions);\n    if (this.parent && this.parent.actualizeOptions)\n      this.pa
rent.actualizeOptions();\n    return this;\n  },\n\n  _resetOptions: function (i
nitOptions) {\n    this.domOptions = Utils.objectCreate(this.parent.options);\n 
   this.options = Utils.objectCreate(this.domOptions);\n    // Shallow copy of o
wnProperties of initOptions:\n    for (var i in initOptions) {\n      if (initOp
tions.hasOwnProperty(i))\n        this.options[i] = initOptions[i];\n    }\n    
this.actualizeOptions();\n  },\n\n  _listeners: null,\n\n  // Register a callbac
k for the given event name\n  // Callback is called with context as the first ar
gument and the `
            this`\n  // The context is the current parsley instance, or wind
ow.Parsley if global\n  // A return value of `
            false` will interrupt the calls\n 
 on: function (name, fn) {\n    this._listeners = this._listeners || {};\n    va
r queue = this._listeners[name] = this._listeners[name] || [];\n    queue.push(f
n);\n\n    return this;\n  },\n\n  // Deprecated. Use `
            on` instead\n  subscribe:
 function(name, fn) {\n    $.listenTo(this, name.toLowerCase(), fn);\n  },\n\n  
// Unregister a callback (or all if none is given) for the given event name\n  o
ff: function (name, fn) {\n    var queue = this._listeners && this._listeners[na
me];\n    if (queue) {\n      if (!fn) {\n        delete this._listeners[name];\
n      } else {\n        for (var i = queue.length; i--; )\n          if (queue[
i] === fn)\n            queue.splice(i, 1);\n      }\n    }\n    return this;\n 
 },\n\n  // Deprecated. Use `
            off`\n  unsubscribe: function(name, fn) {\n    $.un
subscribeTo(this, name.toLowerCase());\n  },\n\n  // Trigger an event of the giv
en name\n  // A return value of `
            false` interrupts the callback chain\n  // Retu
rns false if execution was interrupted\n  trigger: function (name, target, extra
Arg) {\n    target = target || this;\n    var queue = this._listeners && this._l
isteners[name];\n    var result;\n    var parentResult;\n    if (queue) {\n     
 for (var i = queue.length; i--; ) {\n        result = queue[i].call(target, tar
get, extraArg);\n        if (result === false) return result;\n      }\n    }\n 
   if (this.parent) {\n      return this.parent.trigger(name, target, extraArg);
\n    }\n    return true;\n  },\n\n  asyncIsValid: function (group, force) {\n  
  Utils.warnOnce(\"asyncIsValid is deprecated; please use whenValid instead\");\
n    return this.whenValid({group, force});\n  },\n\n  _findRelated: function ()
 {\n    return this.options.multiple ?\n      $(this.parent.element.querySelecto
rAll(` [$ {
                    this.options.namespace
                }
                multiple = \"${this.options.multiple}\"]`))\n    :
                this.$element;\n
            }\
            n
        };\
        n\ nexport
        default Base;\
        n ","
        import $ from 'jquery';\
        nim
        port Utils from './utils';\
        n\ nvar convertArrayRequirement = function(string, len gth) {
            \
            n
            var m = string.match(/^\\s*\\[(.*)\\]\\s*$/);\
            n
            if (!m)\ n
            throw 'R
            equirement is not an array: \"' + string + '\"';\n  var values = m[1].split(',')
                .map(Utils.trimString);\
            n
            if (values.length !== length)\ n
            throw 'Requirement
            has ' + values.length + '
            values when ' + length + '
            are needed ';\n  return val
            ues;\
            n
        };\
        n\ nvar convertExtraOptionRequirement = function(requirementSpec, string, extraOptionReader) {
            \
            n
            var main = null;\
            n
            var extra = {};\
            n
            for (var key in
                    requirementSpec) {
                \
                n
                if (key) {
                    \
                    n
                    var value = extraOptionReader(key);\
                    n
                    if ('string' === typeof value)\ n value = Utils.parseRequirement(req uirementSpec[key], value);\
                    n extra[key] = value;\
                    n
                } else {
                    \
                    n main
                        = Utils.parseRequirement(requirementSpec[key], string);\
                    n
                }\
                n
            }\
            n
            return [m
                ain, extra
            ];\
            n
        };\
        n\ n // A Validator needs to implement the methods `validate` and
            `parseRequirements`\
        n\ nvar Validator = function(spec) {
            \
            n $.extend(true, this,
                spec);\
            n
        };\
        n\ nValidator.prototype = {
            \
            n // Returns `true` iff the given `value
            ` is valid according the given requirements.\n  validate: function(value, requir
ementFirstArg) {\n    if (this.fn) { // Legacy style validator\n\n      if (argu
ments.length > 3)  // If more args then value, requirement, instance...\n       
 requirementFirstArg = [].slice.call(arguments, 1, -1);  // Skip first arg (valu
e) and last (instance), combining the rest\n      return this.fn(value, requirem
entFirstArg);\n    }\n\n    if (Array.isArray(value)) {\n      if (!this.validat
eMultiple)\n        throw 'Validator `
            ' + this.name + '
            ` does not handle multipl
e values';\n      return this.validateMultiple(...arguments);\n    } else {\n   
   let instance = arguments[arguments.length - 1];\n      if (this.validateDate 
&& instance._isDateInput()) {\n        arguments[0] = Utils.parse.date(arguments
[0]);\n        if (arguments[0] === null)\n          return false;\n        retu
rn this.validateDate(...arguments);\n      }\n      if (this.validateNumber) {\n
        if (isNaN(value))\n          return false;\n        arguments[0] = parse
Float(arguments[0]);\n        return this.validateNumber(...arguments);\n      }
\n      if (this.validateString) {\n        return this.validateString(...argume
nts);\n      }\n      throw 'Validator `
            ' + this.name + '
            ` only handles multiple
 values';\n    }\n  },\n\n  // Parses `
            requirements` into an array of arguments,
\n  // according to `
            this.requirementType`\n  parseRequirements: function(requir
ements, extraOptionReader) {\n    if ('string' !== typeof requirements) {\n     
 // Assume requirement already parsed\n      // but make sure we return an array
\n      return Array.isArray(requirements) ? requirements : [requirements];\n   
 }\n    var type = this.requirementType;\n    if (Array.isArray(type)) {\n      
var values = convertArrayRequirement(requirements, type.length);\n      for (var
 i = 0; i < values.length; i++)\n        values[i] = Utils.parseRequirement(type
[i], values[i]);\n      return values;\n    } else if ($.isPlainObject(type)) {\
n      return convertExtraOptionRequirement(type, requirements, extraOptionReade
r);\n    } else {\n      return [Utils.parseRequirement(type, requirements)];\n 
   }\n  },\n  // Defaults:\n  requirementType: 'string',\n\n  priority: 2\n\n};\
n\nexport default Validator;\n","import $ from 'jquery';\nimport Utils from './u
tils';\nimport Defaults from './defaults';\nimport Validator from './validator';
\n\nvar ValidatorRegistry = function (validators, catalog) {\n  this.__class__ =
 'ValidatorRegistry';\n\n  // Default Parsley locale is en\n  this.locale = 'en'
;\n\n  this.init(validators || {}, catalog || {});\n};\n\nvar typeTesters =  {\n
  email: /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_` {
                \\ |
            }~] | [\\u00A0 - \\uD7FF\\
            uF900 - \\uFDCF\ \uFDF0 - \\uFFEF
        ]) + (\\.([a - z] | \\d | [!#\\ $ % & '\\*\\+\\-\\/=\\?\\^_`{\\|
    }~] | [\\u00A0 - \\uD7FF\ \uF900 - \\uFDCF\ \uFDF0 - \\uFFEF]) + ) * ) | ((\\x22)((((\\x20 | \\x09) * (\\x0d\\ x0a)) ? (\\x20 | \\x09) + ) ? (([\\x01 - \\x08\\ x0b\\ x0c\\ x0e - \\x1f\\ x7f] | \\x21 | [\\x23 - \\x5b] | [\\x5d - \\x7e] | [\\u00A0 - \\uD7FF\ \uF900 - \\uFDCF\ \uFDF0 - \\uFFEF]) | (\\\\([\\x01 - \\x09\\ x0b\\ x0c\\ x0d - \\x7f] | [\\u00A0 - \\uD7FF\ \uF900 - \\uFDCF\ \uFDF0 - \\u
FFEF
])))) * (((\\x20 | \\x09) * (\\x0d\\ x0a)) ? (\\x20 | \\x09) + ) ? (\\x22))) @((([a - z] | \\d | [\\u00A0 - \\uD7FF\ \uF900 - \\uFDCF\ \uFDF0 - \\uFFEF]) | (([a - z] | \\d | [\\u00A0 - \\uD7FF\\ uF
        900 - \\uFDCF\ \uFDF0 - \\uFFEF
    ])([a - z] | \\d | - | _ | ~ | [\\u00A0 - \\uD7FF\ \uF900 - \\uFDCF\\ uF
        DF0 - \\uFFEF
    ]) * ([a - z] | \\d | [\\u00A0 - \\uD7FF\ \uF900 - \\uFDCF\ \uFDF0 - \\uFFEF])))\\.) +
    (([a - z] | [\\u00A0 - \\uD7FF\ \uF900 - \\uFDCF\ \uFDF0 - \\uFFEF]) | (([a - z] | [\\u00A0 - \\uD7F
        F\ \uF900 - \\uFDCF\ \uFDF0 - \\uFFEF
    ])([a - z] | \\d | - | _ | ~ | [\\u00A0 - \\uD7FF\ \uF900 - \\uFDC
        F\ \uFDF0 - \\uFFEF
    ]) * ([a - z] | [\\u00A0 - \\uD7FF\ \uF900 - \\uFDCF\ \uFDF0 - \\uFFEF]))) $ / i, \n\ n // Follow https://www.w3.org/TR/html5/infrastructure.html#floating-point-n
umbers\ n number: /^-?(\\d*\\.)?\\d+(e[-+]?\\d+)?$/i, \n\ n integer: /^-?\\d+$/, \
    n\ n digits: /^\\d+$/, \n\ n alphanum: /^\\w+$/i, \n\ n date: {
        \
        n test: value = >
            Utils.parse.date(value) !== null\ n
    }, \n\ n url: new RegExp(\n\ "^\" +\n 
        // protocol identifier\n        \"(?:(?:https?|ftp)://)?\" + // ** mod: m
        ake scheme optional\ n // user:pass authentication\n        \"(?:\\\\S+(?:
        : \\\\S * ) ? @) ? \" +\n        \"(?:\" +\n          // IP address exclusion\n        
// private & local networks\n          // \"(?!(?:10|127)(?:\\\\.\\\\d{1,3}){3
})\
" +   // ** mod: allow local networks\n          // \"(?!(?:169\\\\.254|192\\\\
.168)( ? : \\\\.\\\\d {
    1,
    3
}) {
    2
})\
" +  // ** mod: allow local networks\n          / /
\"(?!172\\\\.(?:1[6-9]|2\\\\d|3[0-1])(?:\\\\.\\\\d{1,3}){2})\" +  // ** mod: a
llow local networks\ n // IP address dotted notation octets\n          /
    /
    excludes loopback network 0.0 .0 .0\ n // excludes reserved space >= 224
.0 .0 .0\ n // excludes network & broacast addresses\n          // (first 
    &
    last IP address of each class)\ n\ "(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\
d | 22[0 - 3])\
" +\n          \"(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}\" +
\n\ "(?:\\\\.(?:[1-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))\" +\n  \
"|\" +\n          // host name\n          \"(?:(?:[a-z\\\\u00a1-\\\\uffff
0 - 9] - * ) * [a - z\\\ \u00a1 - \\\\uffff0 - 9] + )\
" +\n          // domain name\n          \
"( ? : \\\\.( ? : [a - z\\\ \u00a1 - \\\\uffff0 - 9] - * ) * [a - z\\\ \u00a1 - \\\\uffff0 - 9] + ) * \" +\n 
// TLD identifier\n          \"(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,})
)\
" +\n        \")\" +\n        // port number\n        \"(?::\\\\d{2,5})?\" +\n
// resource path\n        \"(?:/\\\\S*)?\" +\n      \"$\", 'i'\n    )\n}
;\
ntypeTesters.range = typeTesters.number;\
n\ n // See http://stackoverflow.com/a/
10454560 / 8279\ nvar decimalPlaces = num => {
    \
    n
    var match = ('' + num).match(/(?:\\.(\\d + )) ? ( ? : [eE]([+ -] ? \\d + )) ? $ / );\
n
if (!match) {
    return 0;
}\
n
return Math.
max(\n 0, \n // Number of digits right of decimal point.\n       (mat
    ch[1] ? match[1].length : 0) - \n // Adjust for scientific notation.\n     
(match[2] ? +match[2] : 0));\
n
};\
n\ n // parseArguments('number', ['1', '2']) =>
    [1, 2]\ nlet parseArguments = (type, args) => args.map(Utils.parse[type]);\
n // o
peratorToValidator returns a validating
function
for an operator
function, appli
ed to the given type\ nlet operatorToValidator = (type, operator) => {
    \
    n
    return (value, ...requirementsAndInput) => {
        \
        n requirementsAndInput.pop(); // Get ri
        d of `input`
        argument\ n
        return operator(value, ...parseArguments(type, requir ementsAndInput));\
        n
    };\
    n
};\
n\ nlet comparisonOperator = operator => ({
    \
    n valida
    teDate: operatorToValidator('date', operator),
    \n validateNumber: operatorToVali
    dator('number', operator),
    \n requirementType: operator.length <= 2 ? 'string' : ['string', 'string'], // Support operators with a 1 or 2 requirement(s)\n  prio
    rity: 30\ n
});\
n\ nValidatorRegistry.prototype = {
    \
    n init: function(validators,
        catalog) {
        \
        n this.catalog = catalog;\
        n // Copy prototype's validators:\n  
        this.validators = Object.assign({}, this.validators);\
        n\ n
        for (var name in
                validators)\ n this.addValidator(name, validators[name].fn, validators[name]
            .priority);\
        n\ n window.Parsley.trigger('parsley:validator:init');\
        n
    },
    \n\ n
    // Set new messages locale if we have dictionary loaded in ParsleyConfig.i18n\n 
    setLocale: function(locale) {
        \
        n
        if ('undefined' === typeof this.catalog[loc ale])\ n
        throw new Error(locale + ' is not available in the catalog');\
        n\ n
        this.locale = locale;\
        n\ n
        return this;\
        n
    },
    \n\ n // Add a new messages cat
    alog
    for a given locale.Set locale
    for this catalog
    if set === `true`\
    n addCat
    alog: function(locale, messages, set) {
        \
        n
        if ('object' === typeof messages)\
            n this.catalog[locale] = messages;\
        n\ n
        if (true === set)\ n
        return t
        his.setLocale(locale);\
        n\ n
        return this;\
        n
    },
    \n\ n // Add a specific message 
    for a given constraint in a given locale\ n addMessage: function(locale, name,
        message) {
        \
        n
        if ('undefined' === typeof this.catalog[locale])\ n this.cat
        alog[locale] = {};\
        n\ n this.catalog[locale][name] = message;\
        n\ n
        return th
        is;\
        n
    },
    \n\ n // Add messages for a given locale\n  addMessages: function (loca
    le,
    nameMessageObject) {
    \
    n
    for (var name in nameMessageObject)\ n this.ad
    dMessage(locale, name, nameMessageObject[name]);\
    n\ n
    return this;\
    n
}, \n\ n
// Add a new validator\n  //\n  //    addValidator('custom', {\n  //        requ
irementType: ['integer', 'integer'], \n //        validateString: function(value
    , from, to) {}, \n //        priority: 22,\n  //        messages: {\n  //       
en: \"Hey, that's no good\",\n  //          fr: \"Aye aye, pas bon du tout\",\
n //        }\n  //    })\n  //\n  // Old API was addValidator(name, function,
priority)\ n //\n  addValidator: function (name, arg1, arg2) {\n    if (this.va
lidators[name])\ n Utils.warn('Validator \"' + name + '\" is already defined
    .
    ');\n    else if (Defaults.hasOwnProperty(name)) {\n      Utils.warn('\
    "' + nam
    e + '\" is a restricted keyword and is not a valid validator name.');\
n ret
urn;\
n
}\
n
return this._setValidator(...arguments);\
n
}, \n\ n hasValidato
r: function(name) {
    \
    n
    return !!this.validators[name];\
    n
}, \n\ n updateValid
ator: function(name, arg1, arg2) {
    \
    n
    if (!this.validators[name]) {
        \
        n Ut
        ils.warn('Validator \"' + name + '\" is not already defined.');\
        n
        return th
        is.addValidator(...arguments);\
        n
    }\
    n
    return this._setValidator(...argument s);\
    n
}, \n\ n removeValidator: function(name) {
    \
    n
    if (!this.validators[name])\ n Utils.warn('Validator \"' + name + '\" is not defined.');\
    n\ n delet
    e this.validators[name];\
    n\ n
    return this;\
    n
}, \n\ n _setValidator: function(name, validator, priority) {
    \
    n
    if ('object' !== typeof validator) {
        \
        n /
            / Old style validator, with `fn` and `priority`\n      validator = {\n        fn: validator, \n priority: priority\ n
    };\
    n
}\
n
if (!validator.va lidate) {
    \
    n validator = new Validator(validator);\
    n
}\
n this.validato
rs[name] = validator;\
n\ n
for (var locale in validator.messages || {})\ n
this.addMessage(locale, name, validator.messages[locale]);\
n\ n
return this;\
n
}, \n\ n getErrorMessage: function(constraint) {
    \
    n
    var message;\
    n\ n // 
    Type constraints are a bit different, we have to match their requirements too to
    find right error message\ n
    if ('type' === constraint.name) {
        \
        n
        var type
        Messages = this.catalog[this.locale][constraint.name] || {};\
        n message = ty
        peMessages[constraint.requirements];\
        n
    } else\ n message = this.formatMes
    sage(this.catalog[this.locale][constraint.name], constraint.requirements);\
    n\ n
    return message || this.catalog[this.locale].defaultMessage || this.catalog.en.
    defaultMessage;\
    n
}, \n\ n // Kind of light `sprintf()` implementation\n  format
Message: function(string, parameters) {
    \
    n
    if ('object' === typeof parameters) {
        \
        n
        for (var i in parameters)\ n string = this.formatMessage(string, parameters[i]);\
        n\ n
        return string;\
        n
    }\
    n\ n
    return 'string' === type of string ? string.replace(/%s/i, parameters) : '';\
    n
}, \n\ n // Here is the Pa
rsley
default validators list.\n // A validator is an object with the following
key values: \n //  - priority: an integer\n  //  - requirement: 'string' (defau
lt), 'integer', 'number', 'regexp'
or an Array of these\ n //  - validateString,
validateMultiple, validateNumber: functions returning `true`, `false`
or a prom
ise\ n // Alternatively, a validator can be a function that returns such an obje
ct\ n //\n  validators: {\n    notblank: {\n      validateString: function(value
) {
    \
    n
    return /\\S/.test(value);\
    n
}, \n priority: 2\ n
}, \n
required: {
    \
    n validateMultiple: function(values) {
        \
        n
        return values.
        length > 0;\
        n
    },
    \n validateString: function(value) {
        \
        n
        return /\\
        S / .test(value);\
        n
    },
    \n priority: 512\ n
}, \n type: {
    \
    n val
    idateString: function(value, type, {
        step = 'any',
        base = 0
    } = {}) {
        \
        n
        var
            tester = typeTesters[type];\
        n
        if (!tester) {
            \
            n
            throw new Error(
                'validator type `' + type + '` is not supported');\
            n
        }\
        n
        if (!test er.test(value))\ n
        return false;\
        n
        if ('number' === type) {
            \
            n
            if (!/^any$/i.test(step || '')) {
                \
                n
                var nb = Number(value);\
                n
                var decimals = Math.max(decimalPlaces(step), decimalPlaces(base));\
                n
                if (decimalPlaces(nb) > decimals) // Value can't have too many decimal
                    s\ n
                return false;\
                n // Be careful of rounding errors by 
                using integers.\n
                var toInt = f => Math.round(f * Math.pow(10, decima ls));\
                n
                if ((toInt(nb) - toInt(base)) % toInt(step) != 0)\ n
                return false;\
                n
            }\
            n
        }\
        n
        return true;\
        n
    },
    \n
    requirementType: {
        \
        n '': 'string',
        \n step: 'string',
        \n bas
        e: 'number'\
        n
    },
    \n priority: 256\ n
}, \n pattern: {
    \
    n valida
    teString: function(value, regexp) {
        \
        n
        return regexp.test(value);\
        n
    },
    \n requirementType: 'regexp',
    \n priority: 64\ n
}, \n minlength: {
    \
    n validateString: function(value, requirement) {
        \
        n
        return value.l
        ength >= requirement;\
        n
    },
    \n requirementType: 'integer',
    \n priori
    ty: 30\ n
}, \n maxlength: {
    \
    n validateString: function(value, require ment) {
        \
        n
        return value.length <= requirement;\
        n
    },
    \n requiremen
    tType: 'integer',
    \n priority: 30\ n
}, \n length: {
    \
    n validateStri
    ng: function(value, min, max) {
        \
        n
        return value.length >= min && value.le
        ngth <= max;\
        n
    },
    \n requirementType: ['integer', 'integer'],
    \n pr
    iority: 30\ n
}, \n mincheck: {
    \
    n validateMultiple: function(values, r equirement) {
        \
        n
        return values.length >= requirement;\
        n
    },
    \n req
    uirementType: 'integer',
    \n priority: 30\ n
}, \n maxcheck: {
    \
    n val
    idateMultiple: function(values, requirement) {
        \
        n
        return values.length <=
            requirement;\
        n
    },
    \n requirementType: 'integer',
    \n priority: 30\ n
}, \n check: {
    \
    n validateMultiple: function(values, min, max) {
        \
        n
        return values.length >= min && values.length <= max;\
        n
    },
    \n requi
    rementType: ['integer', 'integer'],
    \n priority: 30\ n
}, \n min: compar
isonOperator((value, requirement) => value >= requirement), \n max: comparison
Operator((value, requirement) => value <= requirement), \n range: comparisonOp
erator((value, min, max) => value >= min && value <= max), \n equalto: {
    \
    n
    validateString: function(value, refOrValue) {
        \
        n
        var $reference = $(ref OrValue);\
        n
        if ($reference.length)\ n
        return value === $reference
            .val();\
        n
        else\ n
        return value === refOrValue;\
        n
    },
    \n p
    riority: 256\ n
}\
n
}\
n
};\
n\ nexport
default ValidatorRegistry;\
n ","
import $ f
rom 'jquery';\
nimport Utils from './utils';\
n\ nvar UI = {};\
n\ nvar diffResults =
    function(newResult, oldResult, deep) {
        \
        n
        var added = [];\
        n
        var kept = [];\
        n\
        n
        for (var i = 0; i < newResult.length; i++) {
            \
            n
            var found = false;\
            n\ n f
            or(var j = 0; j < oldResult.length; j++)\ n
            if (newResult[i].assert.name == = oldResult[j].assert.name) {
                \
                n found = true;\
                n
                break;\
                n
            }\
            n\
            n
            if (found)\ n kept.push(newResult[i]);\
            n
            else\ n added.push(newR esult[i]);\
            n
        }\
        n\ n
        return {
            \
            n kept: kept,
            \n added: added,
            \n removed:
                !deep ? diffResults(oldResult, newResult, true).added : []\ n
        };\
        n
    };\
n\ nUI.Form = {
    \
    n\ n _actualizeTriggers: function() {
        \
        n this.$element.on('submit.Parsley
            ', evt => { this.onSubmitValidate(evt); });\n    this.$element.on('
            click.Parsley ', Utils._SubmitSelector, evt => { this.onSubmitButton(evt); });\n\n    // UI co
            uld be disabled\ n
            if (false === this.options.uiEnabled)\ n
            return;\ n\ n this.element.setAttribute('novalidate', '');\ n
        }, \n\ n focus: function() {
            \
            n
            this._focusedField = null;\
            n\ n
            if (true === this.validationResult || 'none
                ' === this.options.focus)\n      return null;\n\n    for (var i = 0; i < this.fi
                elds.length; i++) {
                \
                n
                var field = this.fields[i];\
                n
                if (true !== field
                    .validationResult && field.validationResult.length > 0 && 'undefined' === typeof field.options.noFocus) {
                    \
                    n this._focusedField = field.$element;\
                    n
                    if ('first' === this.options.focus)\ n
                    break;\
                    n
                }\
                n
            }\
            n\ n
            if (null === this._focusedField)\ n
            return null;\
            n\ n
            return this._focusedFi
            eld.focus();\
            n
        }, \n\ n _destroyUI: function() {
            \
            n // Reset all event listen
            ers\ n this.$element.off('.Parsley');\
            n
        }\
        n\ n
    };\n\ nUI.Field = {
        \
        n\ n _reflowU
        I: function() {
            \
            n this._buildUI();\
            n\ n // If this field doesn't have an a
            ctive UI don 't bother doing something\n    if (!this._ui)\n      return;\n\n    
            // Diff between two validation results\n    var diff = diffResults(this.validati
            onResult, this._ui.lastValidationResult);\n\ n // Then store current validatio
        n result
        for next reflow\ n this._ui.lastValidationResult = this.validationRes
        ult;\n\ n // Handle valid / invalid / none field class\n    this._manageStatus
        Class();\n\ n // Add, remove, updated errors messages\n    this._manageErrorsM
        essages(diff);\n\ n // Triggers impl\n    this._actualizeTriggers();\n\n    //
        If field is not valid
        for the first time,
        bind keyup trigger to ease UX and qui
        ckly inform user\ n
        if ((diff.kept.length || diff.added.length) && !this._fail edOnce) {
            \
            n this._failedOnce = true;\
            n this._actualizeTriggers();\
            n
        }\
        n
    },
    \n\ n // Returns an array of field's error message(s)\n  getErrorsMessag
    es: function() {
        \
        n // No error message, field is valid\n    if (true === thi
        s.validationResult)\ n
    return [];\n\ n
    var messages = [];\n\ n
    for (var
            i = 0; i < this.validationResult.length; i++)\ n messages.push(this.validati onResult[i].errorMessage || \n this._getErrorMessage(this.validationResult[
        i].assert));\n\ n
    return messages;\n
}, \n\ n // It's a goal of Parsley that t
his method is no longer required[#1073]\n  addError: function (name, {message, 
assert, updateClass = true
} = {}) {
    \
    n this._buildUI();\
    n this._addError(na me, {
        message,
        assert
    });\
    n\ n
    if (updateClass)\ n this._errorClass();\
    n
}, \n\ n // It's a goal of Parsley that this method is no longer required [#1073]\n
updateError: function(name, {
    message,
    assert,
    updateClass = true
} = {}) {
    \
    n
    this._buildUI();\
    n this._updateError(name, {
        message,
        assert
    });\
    n\ n
    if (u pdateClass)\ n this._errorClass();\
    n
}, \n\ n // It's a goal of Parsley that
this method is no longer required[#1073]\n  removeError: function (name, {upda
teClass = true
} = {}) {
    \
    n this._buildUI();\
    n this._removeError(name);\
    n\ n
    // edge case possible here: remove a standard Parsley error that is still fai
    ling in this.validationResult\ n // but highly improbable cuz' manually removi
    ng a well Parsley handled error makes no sense.\n
    if (updateClass)\ n thi
    s._manageStatusClass();\
    n
}, \n\ n _manageStatusClass: function() {
    \
    n
    if (th is.hasConstraints() && this.needsValidation() && true === this.validationResult)\ n this._successClass();\
    n
    else if (this.validationResult.length > 0)\ n
    this._errorClass();\
    n
    else\ n this._resetClass();\
    n
}, \n\ n _manage
ErrorsMessages: function(diff) {
    \
    n
    if ('undefined' !== typeof this.options.e rrorsMessagesDisabled)\ n
    return;\
    n\ n // Case where we have errorMessage 
    option that configure an unique field error message, regardless failing validato
    rs\ n
    if ('undefined' !== typeof this.options.errorMessage) {
        \
        n
        if ((diff
                .added.length || diff.kept.length)) {
            \
            n this._insertErrorWrapper();\
            n\ n
            if (0 === this._ui.$errorsWrapper.find('.parsley-custom-error-message').le ngth)\ n this._ui.$errorsWrapper\ n.append(\n $(
                    this.options.errorTemplate)\ n.addClass('parsley-custom-error-messa
                    ge ')\n            );\n\n        return this._ui.$errorsWrapper\n          .addCl
                    ass('filled')\ n.find('.parsley-custom-error-message')\ n.html(this.options.errorMessage);\ n
                }\
                n\ n
                return this._ui.$errorsWrapper\ n
                    .removeClass('filled')\ n.find('.parsley-custom-error-message')\ n
                    .remove();\ n
            }\
            n\ n // Show, hide, update failing constraints messag
            es\ n
            for (var i = 0; i < diff.removed.length; i++)\ n this._removeError(d iff.removed[i].assert.name);\
            n\ n
            for (i = 0; i < diff.added.length; i++)\ n
            this._addError(diff.added[i].assert.name, {
                message: diff.added[i].errorMessag
                e,
                assert: diff.added[i].assert
            });\
            n\ n
            for (i = 0; i < diff.kept.length; i++)\ n this._updateError(diff.kept[i].assert.name, {
                message: diff.kept[i].error
                Message,
                assert: diff.kept[i].assert
            });\
            n
        }, \n\ n\ n _addError: function(name, {
            message,
            assert
        }) {
            \
            n this._insertErrorWrapper();\
            n this._ui.$errorsWrapp
            er\ n.addClass('filled')\ n.append(\n $(this.options.errorTempl ate)\ n.addClass('parsley-' + name)\ n.html(message || this._getEr rorMessage(assert))\ n);\
            n
        }, \n\ n _updateError: function(name, {
            message,
            assert
        }) {
            \
            n this._ui.$errorsWrapper\ n.addClass('filled')\ n.find('.parsley-' + name)\ n.html(message || this._getErrorMessage(assert));\
            n
        }, \n\ n _removeError: function(name) {
            \
            n this._ui.$errorsWrapper\ n.rem
            oveClass('filled')\ n.find('.parsley-' + name)\ n.remove();\
            n
        }, \n\ n
        _getErrorMessage: function(constraint) {
            \
            n
            var customConstraintErrorMessage = constraint.name + 'Message';\
            n\ n
            if ('undefined' !== typeof this.options[c ustomConstraintErrorMessage])\ n
            return window.Parsley.formatMessage(this.op tions[customConstraintErrorMessage], constraint.requirements);\
            n\ n
            return win
            dow.Parsley.getErrorMessage(constraint);\
            n
        }, \n\ n _buildUI: function() {
            \
            n
            // UI could be already built or disabled\n    if (this._ui || false === this.op
            tions.uiEnabled)\ n
        return;\
        n\ n
        var _ui = {};\
        n\ n // Give field its Pa
        rsley id in DOM\ n this.element.setAttribute(this.options.namespace + 'id', th is.__id__);\
        n\ n /** Generate important UI elements and store them in this **/ \ n // $errorClassHandler is the $element that woul have parsley-error and par
        sley - success classes\ n _ui.$errorClassHandler = this._manageClassHandler();\
        n\ n // $errorsWrapper is a div that would contain the various field errors, it
        will be appended into $errorsContainer\ n _ui.errorsWrapperId = 'parsley-id-' +
            (this.options.multiple ? 'multiple-' + this.options.multiple : this.__id__);\
        n _ui.$errorsWrapper = $(this.options.errorsWrapper).attr('id', _ui.errorsWra pperId);\
        n\ n // ValidationResult UI storage to detect what have changed bwt t
        wo validations, and update DOM accordingly\ n _ui.lastValidationResult = [];\
        n
        _ui.validationInformationVisible = false;\
        n\ n // Store it in this for lat
        er\ n this._ui = _ui;\
        n
    }, \n\ n // Determine which element will have `parsley
        -
        error` and `
    parsley - success` classes\n  _manageClassHandler: function () {\n   
 // Class handled could also be determined by function given in Parsley options\
n    if ('string' === typeof this.options.classHandler && $(this.options.classHa
ndler).length)\n      return $(this.options.classHandler);\n\n    // Class handl
ed could also be determined by function given in Parsley options\n    var $handl
erFunction = this.options.classHandler;\n\n    // It might also be the function 
name of a global function\n    if ('string' === typeof this.options.classHandler
 && 'function' === typeof window[this.options.classHandler])\n      $handlerFunc
tion = window[this.options.classHandler];\n\n    if ('function' === typeof $hand
lerFunction) {\n      var $handler = $handlerFunction.call(this, this);\n\n     
 // If this function returned a valid existing DOM element, go for it\n      if 
('undefined' !== typeof $handler && $handler.length)\n        return $handler;\n
    } else if ('object' === typeof $handlerFunction && $handlerFunction instance
of jQuery && $handlerFunction.length) {\n      return $handlerFunction;\n    } e
lse if ($handlerFunction) {\n      Utils.warn('The class handler `
    ' + $handlerFu
    nction + '` does not exist in DOM nor as a global JS function');\
n
}\
n\ n r
eturn this._inputHolder();\
n
}, \n\ n _inputHolder: function() {
    \
    n // if simp
    le element(input, texatrea, select...) it will perfectly host the classes and p
    recede the error container\ n
    if (!this.options.multiple || this.element.nodeN ame === 'SELECT')\ n
    return this.$element;\
    n\ n // But if multiple element
        (radio, checkbox), that would be their parent\ n
    return this.$element.parent();\
    n
}, \n\ n _insertErrorWrapper: function() {
    \
    n
    var $errorsContainer = thi
    s.options.errorsContainer;\
    n\ n // Nothing to do if already inserted\n    if (
    0 !== this._ui.$errorsWrapper.parent().length)\ n
return this._ui.$errorsWra
pper.parent();\
n\ n
if ('string' === typeof $errorsContainer) {
    \
    n
    if ($($ errorsContainer).length)\ n
    return $($errorsContainer).append(this._ui.$er rorsWrapper);\
    n
    else if ('function' === typeof window[$errorsContainer])\ n
    $errorsContainer = window[$errorsContainer];\
    n
    else\ n Utils.w
    arn('The errors container `' + $errorsContainer + '` does not exist in DOM nor a
        s a global JS
        function ');\n    }\n\n    if ('
        function ' === typeof $errorsContain
        er)\ n $errorsContainer = $errorsContainer.call(this, this);\
    n\ n
    if ('obj
        ect ' === typeof $errorsContainer && $errorsContainer.length)\n      return $erro
        rsContainer.append(this._ui.$errorsWrapper);\ n\ n
        return this._inputHolder().a
        fter(this._ui.$errorsWrapper);\ n
    }, \n\ n _actualizeTriggers: function() {
        \
        n
        var $toBind = this._findRelated();\
        n
        var trigger;\
        n\ n // Remove Parsley e
        vents already bound on this field\ n $toBind.off('.Parsley');\
        n
        if (this._f ailedOnce)\ n $toBind.on(Utils.namespaceEvents(this.options.triggerAfterFail ure, 'Parsley'), () => {
            \
            n this._validateIfNeeded();\
            n
        });\
        n
        else
        if (trigger = Utils.namespaceEvents(this.options.trigger, 'Parsley')) {
            \
            n
            $toBind.on(trigger, event => {
                \
                n this._validateIfNeeded(event);\
                n
            });\
            n
        }\
        n
    }, \n\ n _validateIfNeeded: function(event) {
        \
        n // For keyup, key
        press, keydown, input...events that could be a little bit obstrusive\ n // do
        not validate
        if val length < min threshold on first validation.Once field have
        been validated once and info\ n // about success or failure have been display
        ed, always validate with this trigger to reflect every yalidation change.\n i
        f(event && /key|input/.test(event.type))\ n
        if (!(this._ui && this._ui.vali dationInformationVisible) && this.getValue().length <= this.options.validationTh reshold)\ n
        return;\
        n\ n
        if (this.options.debounce) {
            \
            n window.clea
            rTimeout(this._debounced);\
            n this._debounced = window.setTimeout(() => this
                .validate(), this.options.debounce);\
            n
        } else\ n this.validate();\
        n
    }, \n\ n _resetUI: function() {
        \
        n // Reset all event listeners\n    this._failedO
        nce = false;\
        n this._actualizeTriggers();\
        n\ n // Nothing to do if UI never
        initialized
        for this field\ n
        if ('undefined' === typeof this._ui)\ n ret
        urn;\
        n\ n // Reset all errors' li\n    this._ui.$errorsWrapper\n      .removeC
        lass('filled')\ n.children()\ n.remove();\
        n\ n // Reset validation c
        lass\ n this._resetClass();\
        n\ n // Reset validation flags and last validati
        on result\ n this._ui.lastValidationResult = [];\
        n this._ui.validationInfor
        mationVisible = false;\
        n
    }, \n\ n _destroyUI: function() {
        \
        n this._resetUI();\
        n\ n
        if ('undefined' !== typeof this._ui)\ n this._ui.$errorsWrapper.rem
        ove();\
        n\ n delete this._ui;\
        n
    }, \n\ n _successClass: function() {
        \
        n this
            ._ui.validationInformationVisible = true;\
        n this._ui.$errorClassHandler.remov
        eClass(this.options.errorClass).addClass(this.options.successClass);\
        n
    }, \n _e
    rrorClass: function() {
        \
        n this._ui.validationInformationVisible = true;\
        n
        this._ui.$errorClassHandler.removeClass(this.options.successClass).addClass(thi s.options.errorClass);\
        n
    }, \n _resetClass: function() {
        \
        n this._ui.$errorC
        lassHandler.removeClass(this.options.successClass).removeClass(this.options.erro rClass);\
        n
    }\
    n
};\
n\ nexport
default UI;\
n ","
import $ from 'jquery';\
nimport Base
from './base';\
nimport Utils from './utils';\
n\ nvar Form = function(element, d omOptions, options) {
    \
    n this.__class__ = 'Form';\
    n\ n this.element = element;\
    n
    this.$element = $(element);\
    n this.domOptions = domOptions;\
    n this.options =
        options;\
    n this.parent = window.Parsley;\
    n\ n this.fields = [];\
    n this.valida
    tionResult = null;\
    n
};\
n\ nvar statusMapping = {
    pending: null,
    resolved: true,
    re
    jected: false
};\
n\ nForm.prototype = {
    \
    n onSubmitValidate: function(event) {
        \
        n
        // This is a Parsley generated submit event, do not validate, do not prevent,
        simply exit and keep normal behavior\ n
        if (true === event.parsley)\ n re
        turn;\
        n\ n // If we didn't come here through a submit button, use the first on
        e in the form\ n
        var submitSource = this._submitSource || this.$element.find(U tils._SubmitSelector)[0];\
        n this._submitSource = null;\
        n this.$element.fin
        d('.parsley-synthetic-submit-button').prop('disabled', true);\
        n
        if (submitSou rce && null !== submitSource.getAttribute('formnovalidate'))\ n
        return;\
        n\ n
        window.Parsley._remoteCache = {};\
        n\ n
        var promise = this.whenValidate({
            eve
            nt
        });\
        n\ n
        if ('resolved' === promise.state() && false !== this._trigger('subm
                it ')) {\n      // All good, let event go through. We make this distinction becau
                se browsers\ n // differ in their handling of `submit` being called from ins
                ide a submit event[#1047]\n    } else {\n      // Rejected or pending: cancel t
his submit\n      event.stopImmediatePropagation();\n      event.preventDefault(
);\n      if ('pending' = == promise.state())\ n promise.done(() => {
                    this.
                    _submit(submitSource);
                });\ n
            }\
            n
        }, \n\ n onSubmitButton: function(event) {
            \
            n
            this._submitSource = event.currentTarget;\
            n
        }, \n // internal\n  // _submit
        submits the form, this time without going through the validations.\n // Care m
        ust be taken to\ "fake\" the actual submit button being clicked.\n  _submit: fun
        ction(submitSource) {
            \
            n
            if (false === this._trigger('submit'))\ n
            return;\
            n // Add submit button's data\n    if (submitSource) {\n      var $syntheti
            c = this.$element.find('.parsley-synthetic-submit-button').prop('disabled', fals e);\
            n
            if (0 === $synthetic.length)\ n $synthetic = $('<input class=\"
                parsley - synthetic - submit - button\ " type=\"hidden\">').appendTo(this.$element);\n 
                $synthetic.attr({
                    \
                    n name: submitSource.getAttribute('name'),
                    \n
                    value: submitSource.getAttribute('value')\ n
                });\ n
            }\
            n\ n this.$eleme
            nt.trigger(Object.assign($.Event('submit'), {
                parsley: true
            }));\
            n
        }, \n\ n // Per
        forms validation on fields
        while triggering events.\n // @returns `true` if all
        validations succeeds, `false`\
        n // if a failure is immediately detected, or `n
        ull`\n  // if dependant on a promise.\n  // Consider using `
        whenValidate` instea
d.\n  validate: function (options) {\n    if (arguments.length >= 1 && !$.isPlai
nObject(options)) {\n      Utils.warnOnce('Calling validate on a parsley form wi
thout passing arguments as an object is deprecated.');\n      var [group, force,
 event] = arguments;\n      options = {group, force, event};\n    }\n    return 
statusMapping[ this.whenValidate(options).state() ];\n  },\n\n  whenValidate: fu
nction ({group, force, event} = {}) {\n    this.submitEvent = event;\n    if (ev
ent) {\n      this.submitEvent = Object.assign({}, event, {preventDefault: () =>
 {\n        Utils.warnOnce(\"Using `
        this.submitEvent.preventDefault()` is deprec
ated; instead, call `
        this.validationResult = false`\");\n        this.validation
Result = false;\n      }});\n    }\n    this.validationResult = true;\n\n    // 
fire validate event to eventually modify things before every validation\n    thi
s._trigger('validate');\n\n    // Refresh form DOM options and form's fields tha
t could have changed\n    this._refreshFields();\n\n    var promises = this._wit
houtReactualizingFormOptions(() => {\n      return $.map(this.fields, field => f
ield.whenValidate({force, group}));\n    });\n\n    return Utils.all(promises)\n
      .done(  () => { this._trigger('success'); })\n      .fail(  () => {\n     
   this.validationResult = false;\n        this.focus();\n        this._trigger(
'error');\n      })\n      .always(() => { this._trigger('validated'); })\n     
 .pipe(...this._pipeAccordingToValidationResult());\n  },\n\n  // Iterate over r
efreshed fields, and stop on first failure.\n  // Returns `
        true` if all fields a
re valid, `
        false` if a failure is detected\n  // or `
        null` if the result depends
 on an unresolved promise.\n  // Prefer using `
        whenValid` instead.\n  isValid: f
unction (options) {\n    if (arguments.length >= 1 && !$.isPlainObject(options))
 {\n      Utils.warnOnce('Calling isValid on a parsley form without passing argu
ments as an object is deprecated.');\n      var [group, force] = arguments;\n   
   options = {group, force};\n    }\n    return statusMapping[ this.whenValid(op
tions).state() ];\n  },\n\n  // Iterate over refreshed fields and validate them.
\n  // Returns a promise.\n  // A validation that immediately fails will interru
pt the validations.\n  whenValid: function ({group, force} = {}) {\n    this._re
freshFields();\n\n    var promises = this._withoutReactualizingFormOptions(() =>
 {\n      return $.map(this.fields, field => field.whenValid({group, force}));\n
    });\n    return Utils.all(promises);\n  },\n\n  refresh: function() {\n    t
his._refreshFields();\n    return this;\n  },\n\n  // Reset UI\n  reset: functio
n () {\n    // Form case: emit a reset event for each field\n    for (var i = 0;
 i < this.fields.length; i++)\n      this.fields[i].reset();\n\n    this._trigge
r('reset');\n  },\n\n  // Destroy Parsley instance (+ UI)\n  destroy: function (
) {\n    // Field case: emit destroy event to clean UI and then destroy stored i
nstance\n    this._destroyUI();\n\n    // Form case: destroy all its fields and 
then destroy stored instance\n    for (var i = 0; i < this.fields.length; i++)\n
      this.fields[i].destroy();\n\n    this.$element.removeData('Parsley');\n   
 this._trigger('destroy');\n  },\n\n  _refreshFields: function () {\n    return 
this.actualizeOptions()._bindFields();\n  },\n\n  _bindFields: function () {\n  
  var oldFields = this.fields;\n\n    this.fields = [];\n    this.fieldsMappedBy
Id = {};\n\n    this._withoutReactualizingFormOptions(() => {\n      this.$eleme
nt\n      .find(this.options.inputs)\n      .not(this.options.excluded)\n      .
each((_, element) => {\n        var fieldInstance = new window.Parsley.Factory(e
lement, {}, this);\n\n        // Only add valid and not excluded `
        Field` and `
        Fi
        eldMultiple` children\n        if (('Field' === fieldInstance.__class__ || 'Fiel
dMultiple' === fieldInstance.__class__) && (true !== fieldInstance.options.exclu
ded)) {\n          let uniqueId = fieldInstance.__class__ + '-' + fieldInstance.
__id__;\n          if ('undefined' === typeof this.fieldsMappedById[uniqueId]) {
\n            this.fieldsMappedById[uniqueId] = fieldInstance;\n            this
.fields.push(fieldInstance);\n          }\n        }\n      });\n\n      $.each(
Utils.difference(oldFields, this.fields), (_, field) => {\n        field.reset()
;\n      });\n    });\n    return this;\n  },\n\n  // Internal only.\n  // Loopi
ng on a form's fields to do validation or similar\n  // will trigger reactualizi
ng options on all of them, which\n  // in turn will reactualize the form's optio
ns.\n  // To avoid calling actualizeOptions so many times on the form\n  // for 
nothing, _withoutReactualizingFormOptions temporarily disables\n  // the method 
actualizeOptions on this form while `
        fn` is called.\n  _withoutReactualizingForm
Options: function (fn) {\n    var oldActualizeOptions = this.actualizeOptions;\n
    this.actualizeOptions = function () { return this; };\n    var result = fn()
;\n    this.actualizeOptions = oldActualizeOptions;\n    return result;\n  },\n\
n  // Internal only.\n  // Shortcut to trigger an event\n  // Returns true iff e
vent is not interrupted and default not prevented.\n  _trigger: function (eventN
ame) {\n    return this.trigger('form:' + eventName);\n  }\n\n};\n\nexport defau
lt Form;\n","import Utils from './utils';\nimport Validator from './validator';\
n\nconst Constraint = function(parsleyField, name, requirements, priority, isDom
Constraint) {\n  const validatorSpec = window.Parsley._validatorRegistry.validat
ors[name];\n  const validator = new Validator(validatorSpec);\n  priority = prio
rity || parsleyField.options[name + 'Priority'] || validator.priority;\n  isDomC
onstraint = (true === isDomConstraint);\n\n  Object.assign(this, {\n    validato
r,\n    name,\n    requirements,\n    priority,\n    isDomConstraint\n  });\n  t
his._parseRequirements(parsleyField.options);\n};\n\nconst capitalize = function
(str) {\n  const cap = str[0].toUpperCase();\n  return cap + str.slice(1);\n};\n
\nConstraint.prototype = {\n  validate: function(value, instance) {\n    return 
this.validator.validate(value, ...this.requirementList, instance);\n  },\n\n  _p
arseRequirements: function(options) {\n    this.requirementList = this.validator
.parseRequirements(this.requirements,\n      key => options[this.name + capitali
ze(key)]\n    );\n  }\n};\n\nexport default Constraint;\n","import $ from 'jquer
y';\nimport Constraint from './constraint';\nimport UI from './ui';\nimport Util
s from './utils';\n\nvar Field = function (field, domOptions, options, parsleyFo
rmInstance) {\n  this.__class__ = 'Field';\n\n  this.element = field;\n  this.$e
lement = $(field);\n\n  // Set parent if we have one\n  if ('undefined' !== type
of parsleyFormInstance) {\n    this.parent = parsleyFormInstance;\n  }\n\n  this
.options = options;\n  this.domOptions = domOptions;\n\n  // Initialize some pro
perties\n  this.constraints = [];\n  this.constraintsByName = {};\n  this.valida
tionResult = true;\n\n  // Bind constraints\n  this._bindConstraints();\n};\n\nv
ar statusMapping = {pending: null, resolved: true, rejected: false};\n\nField.pr
ototype = {\n  // # Public API\n  // Validate field and trigger some events for 
mainly `
        UI`\n  // @returns `
        true`, an array of the validators that failed, or\n 
 // `
        null` if validation is not finished. Prefer using whenValidate\n  validate:
 function (options) {\n    if (arguments.length >= 1 && !$.isPlainObject(options
)) {\n      Utils.warnOnce('Calling validate on a parsley field without passing 
arguments as an object is deprecated.');\n      options = {options};\n    }\n   
 var promise = this.whenValidate(options);\n    if (!promise)  // If excluded wi
th `
        group` option\n      return true;\n    switch (promise.state()) {\n      cas
e 'pending': return null;\n      case 'resolved': return true;\n      case 'reje
cted': return this.validationResult;\n    }\n  },\n\n  // Validate field and tri
gger some events for mainly `
        UI`\n  // @returns a promise that succeeds only whe
n all validations do\n  // or `
        undefined` if field is not in the given `
        group`.\
n  whenValidate: function ({force, group} =  {}) {\n    // do not validate a fie
ld if not the same as given validation group\n    this.refresh();\n    if (group
 && !this._isInGroup(group))\n      return;\n\n    this.value = this.getValue();
\n\n    // Field Validate event. `
        this.value` could be altered for custom needs\
n    this._trigger('validate');\n\n    return this.whenValid({force, value: this
.value, _refreshed: true})\n      .always(() => { this._reflowUI(); })\n      .d
one(() =>   { this._trigger('success'); })\n      .fail(() =>   { this._trigger(
'error'); })\n      .always(() => { this._trigger('validated'); })\n      .pipe(
...this._pipeAccordingToValidationResult());\n  },\n\n  hasConstraints: function
 () {\n    return 0 !== this.constraints.length;\n  },\n\n  // An empty optional
 field does not need validation\n  needsValidation: function (value) {\n    if (
'undefined' === typeof value)\n      value = this.getValue();\n\n    // If a fie
ld is empty and not required, it is valid\n    // Except if `
        data - parsley - valida
        te -
            if - empty` explicitely added, useful for some custom validators\n    if (!valu
e.length && !this._isRequired() && 'undefined' === typeof this.options.validateI
fEmpty)\n      return false;\n\n    return true;\n  },\n\n  _isInGroup: function
 (group) {\n    if (Array.isArray(this.options.group))\n      return -1 !== $.in
Array(group, this.options.group);\n    return this.options.group === group;\n  }
,\n\n  // Just validate field. Do not trigger any event.\n  // Returns `
        true` if
f all constraints pass, `
        false` if there are failures,\n  // or `
        null` if the re
sult can not be determined yet (depends on a promise)\n  // See also `
        whenValid`
.\n  isValid: function (options) {\n    if (arguments.length >= 1 && !$.isPlainO
bject(options)) {\n      Utils.warnOnce('Calling isValid on a parsley field with
out passing arguments as an object is deprecated.');\n      var [force, value] =
 arguments;\n      options = {force, value};\n    }\n    var promise = this.when
Valid(options);\n    if (!promise) // Excluded via `
        group`\n      return true;\n
    return statusMapping[promise.state()];\n  },\n\n  // Just validate field. Do
 not trigger any event.\n  // @returns a promise that succeeds only when all val
idations do\n  // or `
        undefined` if the field is not in the given `
        group`.\n  //
 The argument `
        force` will force validation of empty fields.\n  // If a `
        value` 
is given, it will be validated instead of the value of the input.\n  whenValid: 
function ({force = false, value, group, _refreshed} = {}) {\n    // Recompute op
tions and rebind constraints to have latest changes\n    if (!_refreshed)\n     
 this.refresh();\n    // do not validate a field if not the same as given valida
tion group\n    if (group && !this._isInGroup(group))\n      return;\n\n    this
.validationResult = true;\n\n    // A field without constraint is valid\n    if 
(!this.hasConstraints())\n      return $.when();\n\n    // Value could be passed
 as argument, needed to add more power to 'field:validate'\n    if ('undefined' 
=== typeof value || null === value)\n      value = this.getValue();\n\n    if (!
this.needsValidation(value) && true !== force)\n      return $.when();\n\n    va
r groupedConstraints = this._getGroupedConstraints();\n    var promises = [];\n 
   $.each(groupedConstraints, (_, constraints) => {\n      // Process one group 
of constraints at a time, we validate the constraints\n      // and combine the 
promises together.\n      var promise = Utils.all(\n        $.map(constraints, c
onstraint => this._validateConstraint(value, constraint))\n      );\n      promi
ses.push(promise);\n      if (promise.state() === 'rejected')\n        return fa
lse; // Interrupt processing if a group has already failed\n    });\n    return 
Utils.all(promises);\n  },\n\n  // @returns a promise\n  _validateConstraint: fu
nction(value, constraint) {\n    var result = constraint.validate(value, this);\
n    // Map false to a failed promise\n    if (false === result)\n      result =
 $.Deferred().reject();\n    // Make sure we return a promise and that we record
 failures\n    return Utils.all([result]).fail(errorMessage => {\n      if (!(th
is.validationResult instanceof Array))\n        this.validationResult = [];\n   
   this.validationResult.push({\n        assert: constraint,\n        errorMessa
ge: 'string' === typeof errorMessage && errorMessage\n      });\n    });\n  },\n
\n  // @returns Parsley field computed value that could be overrided or configur
ed in DOM\n  getValue: function () {\n    var value;\n\n    // Value could be ov
erriden in DOM or with explicit options\n    if ('function' === typeof this.opti
ons.value)\n      value = this.options.value(this);\n    else if ('undefined' !=
= typeof this.options.value)\n      value = this.options.value;\n    else\n     
 value = this.$element.val();\n\n    // Handle wrong DOM or configurations\n    
if ('undefined' === typeof value || null === value)\n      return '';\n\n    ret
urn this._handleWhitespace(value);\n  },\n\n  // Reset UI\n  reset: function () 
{\n    this._resetUI();\n    return this._trigger('reset');\n  },\n\n  // Destro
y Parsley instance (+ UI)\n  destroy: function () {\n    // Field case: emit des
troy event to clean UI and then destroy stored instance\n    this._destroyUI();\
n    this.$element.removeData('Parsley');\n    this.$element.removeData('FieldMu
ltiple');\n    this._trigger('destroy');\n  },\n\n  // Actualize options and reb
ind constraints\n  refresh: function () {\n    this._refreshConstraints();\n    
return this;\n  },\n\n  _refreshConstraints: function () {\n    return this.actu
alizeOptions()._bindConstraints();\n  },\n\n  refreshConstraints: function() {\n
    Utils.warnOnce(\"Parsley's refreshConstraints is deprecated. Please use refr
esh\");\n    return this.refresh();\n  },\n\n  /**\n  * Add a new constraint to 
a field\n  *\n  * @param {String}   name\n  * @param {Mixed}    requirements    
  optional\n  * @param {Number}   priority          optional\n  * @param {Boolea
n}  isDomConstraint   optional\n  */\n  addConstraint: function (name, requireme
nts, priority, isDomConstraint) {\n\n    if (window.Parsley._validatorRegistry.v
alidators[name]) {\n      var constraint = new Constraint(this, name, requiremen
ts, priority, isDomConstraint);\n\n      // if constraint already exist, delete 
it and push new version\n      if ('undefined' !== this.constraintsByName[constr
aint.name])\n        this.removeConstraint(constraint.name);\n\n      this.const
raints.push(constraint);\n      this.constraintsByName[constraint.name] = constr
aint;\n    }\n\n    return this;\n  },\n\n  // Remove a constraint\n  removeCons
traint: function (name) {\n    for (var i = 0; i < this.constraints.length; i++)
\n      if (name === this.constraints[i].name) {\n        this.constraints.splic
e(i, 1);\n        break;\n      }\n    delete this.constraintsByName[name];\n   
 return this;\n  },\n\n  // Update a constraint (Remove + re-add)\n  updateConst
raint: function (name, parameters, priority) {\n    return this.removeConstraint
(name)\n      .addConstraint(name, parameters, priority);\n  },\n\n  // # Intern
als\n\n  // Internal only.\n  // Bind constraints from config + options + DOM\n 
 _bindConstraints: function () {\n    var constraints = [];\n    var constraints
ByName = {};\n\n    // clean all existing DOM constraints to only keep javascrip
t user constraints\n    for (var i = 0; i < this.constraints.length; i++)\n     
 if (false === this.constraints[i].isDomConstraint) {\n        constraints.push(
this.constraints[i]);\n        constraintsByName[this.constraints[i].name] = thi
s.constraints[i];\n      }\n\n    this.constraints = constraints;\n    this.cons
traintsByName = constraintsByName;\n\n    // then re-add Parsley DOM-API constra
ints\n    for (var name in this.options)\n      this.addConstraint(name, this.op
tions[name], undefined, true);\n\n    // finally, bind special HTML5 constraints
\n    return this._bindHtml5Constraints();\n  },\n\n  // Internal only.\n  // Bi
nd specific HTML5 constraints to be HTML5 compliant\n  _bindHtml5Constraints: fu
nction () {\n    // html5 required\n    if (null !== this.element.getAttribute('
required'))\n      this.addConstraint('required', true, undefined, true);\n\n   
 // html5 pattern\n    if (null !== this.element.getAttribute('pattern'))\n     
 this.addConstraint('pattern', this.element.getAttribute('pattern'), undefined, 
true);\n\n    // range\n    let min = this.element.getAttribute('min');\n    let
 max = this.element.getAttribute('max');\n    if (null !== min && null !== max)\
n      this.addConstraint('range', [min, max], undefined, true);\n\n    // HTML5
 min\n    else if (null !== min)\n      this.addConstraint('min', min, undefined
, true);\n\n    // HTML5 max\n    else if (null !== max)\n      this.addConstrai
nt('max', max, undefined, true);\n\n\n    // length\n    if (null !== this.eleme
nt.getAttribute('minlength') && null !== this.element.getAttribute('maxlength'))
\n      this.addConstraint('length', [this.element.getAttribute('minlength'), th
is.element.getAttribute('maxlength')], undefined, true);\n\n    // HTML5 minleng
th\n    else if (null !== this.element.getAttribute('minlength'))\n      this.ad
dConstraint('minlength', this.element.getAttribute('minlength'), undefined, true
);\n\n    // HTML5 maxlength\n    else if (null !== this.element.getAttribute('m
axlength'))\n      this.addConstraint('maxlength', this.element.getAttribute('ma
xlength'), undefined, true);\n\n\n    // html5 types\n    var type = Utils.getTy
pe(this.element);\n\n    // Small special case here for HTML5 number: integer va
lidator if step attribute is undefined or an integer value, number otherwise\n  
  if ('number' === type) {\n      return this.addConstraint('type', ['number', {
\n        step: this.element.getAttribute('step') || '1',\n        base: min || 
this.element.getAttribute('value')\n      }], undefined, true);\n    // Regular 
other HTML5 supported types\n    } else if (/^(email|url|range|date)$/i.test(typ
e)) {\n      return this.addConstraint('type', type, undefined, true);\n    }\n 
   return this;\n  },\n\n  // Internal only.\n  // Field is required if have req
uired constraint without `
        false` value\n  _isRequired: function () {\n    if ('u
ndefined' === typeof this.constraintsByName.required)\n      return false;\n\n  
  return false !== this.constraintsByName.required.requirements;\n  },\n\n  // I
nternal only.\n  // Shortcut to trigger an event\n  _trigger: function (eventNam
e) {\n    return this.trigger('field:' + eventName);\n  },\n\n  // Internal only
\n  // Handles whitespace in a value\n  // Use `
        data - parsley - whitespace = \"squish\
        "` to auto squish input value\n  // Use `data-parsley-whitespace=\"trim\"` to a
        uto trim input value\ n _handleWhitespace: function(value) {
            \
            n
            if (true ===
                this.options.trimValue)\ n Utils.warnOnce('data-parsley-trim-value=\"true\" 
                is deprecated, please use data - parsley - whitespace = \"trim\"');\n\n    if ('squish
                ' === this.options.whitespace)\n      value = value.replace(/\\s{2,}/g, '
                ');\n\
n    if (('
                trim ' === this.options.whitespace) || ('
                squish ' === this.options.whit
                espace) || (true === this.options.trimValue))\ n value = Utils.trimString(va lue);\
        n\ n
        return value;\
        n
    },
    \n\ n _isDateInput: function() {
        \
        n
        var c = th
        is.constraintsByName.type;\
        n
        return c && c.requirements === 'date';\
        n
    },
    \n\ n
    // Internal only.\n  // Returns the constraints, grouped by descending priorit
    y.\n // The result is thus an array of arrays of constraints.\n  _getGroupedCon
    straints: function() {
        \
        n
        if (false === this.options.priorityEnabled)\ n
        return [this.constraints];\
        n\ n
        var groupedConstraints = [];\
        n
        var index = {};\
        n\ n // Create array unique of priorities\n    for (var i = 0; i < this.co
        nstraints.length;
        i++) {
        \
        n
        var p = this.constraints[i].priority;\
        n
        if (!index[p])\ n groupedConstraints.push(index[p] = []);\
        n index[p].pus
        h(this.constraints[i]);\
        n
    }\
    n // Sort them by priority DESC\n    groupedCo
    nstraints.sort(function(a, b) {
        return b[0].priority - a[0].priority;
    });\n\ n
    return groupedConstraints;\n
}\
n\ n
};\
n\ nexport
default Field;\
n ","
import $ fr
om 'jquery';\
nimport Utils from './utils';\
n\ nvar Multiple = function() {
    \
    n th
    is.__class__ = 'FieldMultiple';\
    n
};\
n\ nMultiple.prototype = {
        \
        n // Add new `$el
        ement` sibling for multiple field\n  addElement: function ($element) {\n    this
.$elements.push($element);\n\n    return this;\n  },\n\n  // See `
        Field._refresh
        Constraints()`\n  _refreshConstraints: function () {\n    var fieldConstraints;\
n\n    this.constraints = [];\n\n    // Select multiple special treatment\n    i
f (this.element.nodeName === 'SELECT') {\n      this.actualizeOptions()._bindCon
straints();\n\n      return this;\n    }\n\n    // Gather all constraints for ea
ch input in the multiple group\n    for (var i = 0; i < this.$elements.length; i
++) {\n\n      // Check if element have not been dynamically removed since last 
binding\n      if (!$('html').has(this.$elements[i]).length) {\n        this.$el
ements.splice(i, 1);\n        continue;\n      }\n\n      fieldConstraints = thi
s.$elements[i].data('FieldMultiple')._refreshConstraints().constraints;\n\n     
 for (var j = 0; j < fieldConstraints.length; j++)\n        this.addConstraint(f
ieldConstraints[j].name, fieldConstraints[j].requirements, fieldConstraints[j].p
riority, fieldConstraints[j].isDomConstraint);\n    }\n\n    return this;\n  },\
n\n  // See `
        Field.getValue()`\n  getValue: function () {\n    // Value could be
 overriden in DOM\n    if ('function' === typeof this.options.value)\n      retu
rn this.options.value(this);\n    else if ('undefined' !== typeof this.options.v
alue)\n      return this.options.value;\n\n    // Radio input case\n    if (this
.element.nodeName === 'INPUT') {\n      var type = Utils.getType(this.element);\
n      if (type === 'radio')\n        return this._findRelated().filter(':checke
d').val() || '';\n\n      // checkbox input case\n      if (type === 'checkbox')
 {\n        var values = [];\n\n        this._findRelated().filter(':checked').e
ach(function () {\n          values.push($(this).val());\n        });\n\n       
 return values;\n      }\n    }\n\n    // Select multiple case\n    if (this.ele
ment.nodeName === 'SELECT' && null === this.$element.val())\n      return [];\n\
n    // Default case that should never happen\n    return this.$element.val();\n
  },\n\n  _init: function () {\n    this.$elements = [this.$element];\n\n    ret
urn this;\n  }\n};\n\nexport default Multiple;\n","import $ from 'jquery';\nimpo
rt Utils from './utils';\nimport Base from './base';\nimport Form from './form';
\nimport Field from './field';\nimport Multiple from './multiple';\n\nvar Factor
y = function (element, options, parsleyFormInstance) {\n  this.element = element
;\n  this.$element = $(element);\n\n  // If the element has already been bound, 
returns its saved Parsley instance\n  var savedparsleyFormInstance = this.$eleme
nt.data('Parsley');\n  if (savedparsleyFormInstance) {\n\n    // If the saved in
stance has been bound without a Form parent and there is one given in this call,
 add it\n    if ('undefined' !== typeof parsleyFormInstance && savedparsleyFormI
nstance.parent === window.Parsley) {\n      savedparsleyFormInstance.parent = pa
rsleyFormInstance;\n      savedparsleyFormInstance._resetOptions(savedparsleyFor
mInstance.options);\n    }\n\n    if ('object' === typeof options) {\n      Obje
ct.assign(savedparsleyFormInstance.options, options);\n    }\n\n    return saved
parsleyFormInstance;\n  }\n\n  // Parsley must be instantiated with a DOM elemen
t or jQuery $element\n  if (!this.$element.length)\n    throw new Error('You mus
t bind Parsley on an existing element.');\n\n  if ('undefined' !== typeof parsle
yFormInstance && 'Form' !== parsleyFormInstance.__class__)\n    throw new Error(
'Parent instance must be a Form instance');\n\n  this.parent = parsleyFormInstan
ce || window.Parsley;\n  return this.init(options);\n};\n\nFactory.prototype = {
\n  init: function (options) {\n    this.__class__ = 'Parsley';\n    this.__vers
ion__ = '@@version';\n    this.__id__ = Utils.generateID();\n\n    // Pre-comput
e options\n    this._resetOptions(options);\n\n    // A Form instance is obvious
ly a ` < form > ` element but also every node that is not an input and has the `
        data -
        parsley - validate` attribute\n    if (this.element.nodeName === 'FORM' || (Utils
.checkAttr(this.element, this.options.namespace, 'validate') && !this.$element.i
s(this.options.inputs)))\n      return this.bind('parsleyForm');\n\n    // Every
 other element is bound as a `
        Field` or `
        FieldMultiple`\n    return this.isMulti
ple() ? this.handleMultiple() : this.bind('parsleyField');\n  },\n\n  isMultiple
: function () {\n    var type = Utils.getType(this.element);\n    return ((type 
=== 'radio' || type === 'checkbox') ||\n      (this.element.nodeName === 'SELECT
' && null !== this.element.getAttribute('multiple')));\n  },\n\n  // Multiples f
ields are a real nightmare :(\n  // Maybe some refactoring would be appreciated 
here...\n  handleMultiple: function () {\n    var name;\n    var multiple;\n    
var parsleyMultipleInstance;\n\n    // Handle multiple name\n    this.options.mu
ltiple = this.options.multiple ||\n      (name = this.element.getAttribute('name
')) ||\n      this.element.getAttribute('id');\n\n    // Special select multiple
 input\n    if (this.element.nodeName === 'SELECT' && null !== this.element.getA
ttribute('multiple')) {\n      this.options.multiple = this.options.multiple || 
this.__id__;\n      return this.bind('parsleyFieldMultiple');\n\n    // Else for
 radio / checkboxes, we need a `
        name` or `
        data - parsley - multiple` to properly bin
d it\n    } else if (!this.options.multiple) {\n      Utils.warn('To be bound by
 Parsley, a radio, a checkbox and a multiple select input must have either a nam
e or a multiple option.', this.$element);\n      return this;\n    }\n\n    // R
emove special chars\n    this.options.multiple = this.options.multiple.replace(/
(:|\\.|\\[|\\]|\\{|\\}|\\$)/g, '');\n\n    // Add proper `
        data - parsley - multiple`
 to siblings if we have a valid multiple name\n    if (name) {\n      $('input[n
ame=\"' + name + '\"]').each((i, input) => {\n        var type = Utils.getType(i
nput);\n        if ((type === 'radio' || type === 'checkbox'))\n          input.
setAttribute(this.options.namespace + 'multiple', this.options.multiple);\n     
 });\n    }\n\n    // Check here if we don't already have a related multiple ins
tance saved\n    var $previouslyRelated = this._findRelated();\n    for (var i =
 0; i < $previouslyRelated.length; i++) {\n      parsleyMultipleInstance = $($pr
eviouslyRelated.get(i)).data('Parsley');\n      if ('undefined' !== typeof parsl
eyMultipleInstance) {\n\n        if (!this.$element.data('FieldMultiple')) {\n  
        parsleyMultipleInstance.addElement(this.$element);\n        }\n\n       
 break;\n      }\n    }\n\n    // Create a secret Field instance for every multi
ple field. It will be stored in `
        data('FieldMultiple')`\n    // And will be usef
ul later to access classic `
        Field` stuff while being in a `
        FieldMultiple` instan
ce\n    this.bind('parsleyField', true);\n\n    return parsleyMultipleInstance |
| this.bind('parsleyFieldMultiple');\n  },\n\n  // Return proper `
        Form`, `
        Field`
 or `
        FieldMultiple`\n  bind: function (type, doNotStore) {\n    var parsleyInsta
nce;\n\n    switch (type) {\n      case 'parsleyForm':\n        parsleyInstance 
= $.extend(\n          new Form(this.element, this.domOptions, this.options),\n 
         new Base(),\n          window.ParsleyExtend\n        )._bindFields();\n
        break;\n      case 'parsleyField':\n        parsleyInstance = $.extend(\
n          new Field(this.element, this.domOptions, this.options, this.parent),\
n          new Base(),\n          window.ParsleyExtend\n        );\n        brea
k;\n      case 'parsleyFieldMultiple':\n        parsleyInstance = $.extend(\n   
       new Field(this.element, this.domOptions, this.options, this.parent),\n   
       new Multiple(),\n          new Base(),\n          window.ParsleyExtend\n 
       )._init();\n        break;\n      default:\n        throw new Error(type 
+ 'is not a supported Parsley type');\n    }\n\n    if (this.options.multiple)\n
      Utils.setAttr(this.element, this.options.namespace, 'multiple', this.optio
ns.multiple);\n\n    if ('undefined' !== typeof doNotStore) {\n      this.$eleme
nt.data('FieldMultiple', parsleyInstance);\n\n      return parsleyInstance;\n   
 }\n\n    // Store the freshly bound instance in a DOM element for later access 
using jQuery `
        data()`\n    this.$element.data('Parsley', parsleyInstance);\n\n  
  // Tell the world we have a new Form or Field instance!\n    parsleyInstance._
actualizeTriggers();\n    parsleyInstance._trigger('init');\n\n    return parsle
yInstance;\n  }\n};\n\nexport default Factory;\n","import $ from 'jquery';\nimpo
rt Utils from './utils';\nimport Defaults from './defaults';\nimport Base from '
./base';\nimport ValidatorRegistry from './validator_registry';\nimport UI from 
'./ui';\nimport Form from './form';\nimport Field from './field';\nimport Multip
le from './multiple';\nimport Factory from './factory';\n\nvar vernums = $.fn.jq
uery.split('.');\nif (parseInt(vernums[0]) <= 1 && parseInt(vernums[1]) < 8) {\n
  throw \"The loaded version of jQuery is too old. Please upgrade to 1.8.x or be
tter.\";\n}\nif (!vernums.forEach) {\n  Utils.warn('Parsley requires ES5 to run 
properly. Please include https://github.com/es-shims/es5-shim');\n}\n// Inherit 
`
        on`, `
        off` & `
        trigger` to Parsley:\nvar Parsley = Object.assign(new Base(), {\n
    element: document,\n    $element: $(document),\n    actualizeOptions: null,\
n    _resetOptions: null,\n    Factory: Factory,\n    version: '@@version'\n  })
;\n\n// Supplement Field and Form with Base\n// This way, the constructors will 
have access to those methods\nObject.assign(Field.prototype, UI.Field, Base.prot
otype);\nObject.assign(Form.prototype, UI.Form, Base.prototype);\n// Inherit act
ualizeOptions and _resetOptions:\nObject.assign(Factory.prototype, Base.prototyp
e);\n\n// ### jQuery API\n// `
        $('.elem').parsley(options)` or `
        $('.elem').psly(o ptions)`\n$.fn.parsley = $.fn.psly = function (options) {\n  if (this.length > 1
) {\n    var instances = [];\n\n    this.each(function () {\n      instances.pus
h($(this).parsley(options));\n    });\n\n    return instances;\n  }\n\n  // Retu
rn undefined if applied to non existing DOM element\n  if (this.length == 0) {\n
    return;\n  }\n\n  return new Factory(this[0], options);\n};\n\n// ### Field 
and Form extension\n// Ensure the extension is now defined if it wasn't previous
ly\nif ('undefined' === typeof window.ParsleyExtend)\n  window.ParsleyExtend = {
};\n\n// ### Parsley config\n// Inherit from ParsleyDefault, and copy over any e
xisting values\nParsley.options = Object.assign(Utils.objectCreate(Defaults), wi
ndow.ParsleyConfig);\nwindow.ParsleyConfig = Parsley.options; // Old way of acce
ssing global options\n\n// ### Globals\nwindow.Parsley = window.psly = Parsley;\
nParsley.Utils = Utils;\nwindow.ParsleyUtils = {};\n$.each(Utils, (key, value) =
> {\n  if ('function' === typeof value) {\n    window.ParsleyUtils[key] = (...ar
gs) => {\n      Utils.warnOnce('Accessing `
        window.ParsleyUtils` is deprecated. U
se `
        window.Parsley.Utils` instead.');\n      return Utils[key](...args);\n    };
\n  }\n});\n\n// ### Define methods that forward to the registry, and deprecate 
all access except through window.Parsley\nvar registry = window.Parsley._validat
orRegistry = new ValidatorRegistry(window.ParsleyConfig.validators, window.Parsl
eyConfig.i18n);\nwindow.ParsleyValidator = {};\n$.each('setLocale addCatalog add
Message addMessages getErrorMessage formatMessage addValidator updateValidator r
emoveValidator hasValidator'.split(' '), function (i, method) {\n  window.Parsle
y[method] = (...args) => registry[method](...args);\n  window.ParsleyValidator[m
ethod] = function () {\n    Utils.warnOnce(`
        Accessing the method '${method}'
        thr
        ough Validator is deprecated.Simply call 'window.Parsley.${method}(...)'
        `);\n  
  return window.Parsley[method](...arguments);\n  };\n});\n\n// ### UI\n// Depre
cated global object\nwindow.Parsley.UI = UI;\nwindow.ParsleyUI = {\n  removeErro
r: function (instance, name, doNotUpdateClass) {\n    var updateClass = true !==
 doNotUpdateClass;\n    Utils.warnOnce(`
        Accessing UI is deprecated.Call 'remove
        Error ' on the instance directly. Please comment in issue 1073 as to your need to
        call this method.
        `);\n    return instance.removeError(name, {updateClass});\n  
},\n  getErrorsMessages: function (instance) {\n    Utils.warnOnce(`
        Accessing UI
        is deprecated.Call 'getErrorsMessages'
        on the instance directly.
        `);\n    retur
n instance.getErrorsMessages();\n  }\n};\n$.each('addError updateError'.split(' 
'), function (i, method) {\n  window.ParsleyUI[method] = function (instance, nam
e, message, assert, doNotUpdateClass) {\n    var updateClass = true !== doNotUpd
ateClass;\n    Utils.warnOnce(`
        Accessing UI is deprecated.Call '${method}'
        on t
        he instance directly.Please comment in issue 1073 as to your need to call this
        method.
        `);\n    return instance[method](name, {message, assert, updateClass});\n
  };\n});\n\n// ### PARSLEY auto-binding\n// Prevent it by setting `
        ParsleyConfi
        g.autoBind` to `
        false`\nif (false !== window.ParsleyConfig.autoBind) {\n  $(func
tion () {\n    // Works only on `
        data - parsley - validate`.\n    if ($('[data-parsl
ey-validate]').length)\n      $('[data-parsley-validate]').parsley();\n  });\n}\
n\nexport default Parsley;\n","import $ from 'jquery';\nimport Utils from './uti
ls';\nimport Base from './base';\n\nimport Parsley from './main';\n\n$.extend(tr
ue, Parsley, {\n  asyncValidators: {\n    'default': {\n      fn: function (xhr)
 {\n        // By default, only status 2xx are deemed successful.\n        // No
te: we use status instead of state() because responses with status 200\n        
// but invalid messages (e.g. an empty body for content type set to JSON) will\n
        // result in state() === 'rejected'.\n        return xhr.status >= 200 &
& xhr.status < 300;\n      },\n      url: false\n    },\n    reverse: {\n      f
n: function (xhr) {\n        // If reverse option is set, a failing ajax request
 is considered successful\n        return xhr.status < 200 || xhr.status >= 300;
\n      },\n      url: false\n    }\n  },\n\n  addAsyncValidator: function (name
, fn, url, options) {\n    Parsley.asyncValidators[name] = {\n      fn: fn,\n   
   url: url || false,\n      options: options || {}\n    };\n\n    return this;\
n  }\n\n});\n\nParsley.addValidator('remote', {\n  requirementType: {\n    '': '
string',\n    'validator': 'string',\n    'reverse': 'boolean',\n    'options': 
'object'\n  },\n\n  validateString: function (value, url, options, instance) {\n
    var data = {};\n    var ajaxOptions;\n    var csr;\n    var validator = opti
ons.validator || (true === options.reverse ? 'reverse' : 'default');\n\n    if (
'undefined' === typeof Parsley.asyncValidators[validator])\n      throw new Erro
r('Calling an undefined async validator: `
        ' + validator + '
        `');\n\n    url = Par
sley.asyncValidators[validator].url || url;\n\n    // Fill current value\n    if
 (url.indexOf('{value}') > -1) {\n      url = url.replace('{value}', encodeURICo
mponent(value));\n    } else {\n      data[instance.element.getAttribute('name')
 || instance.element.getAttribute('id')] = value;\n    }\n\n    // Merge options
 passed in from the function with the ones in the attribute\n    var remoteOptio
ns = $.extend(true, options.options || {} , Parsley.asyncValidators[validator].o
ptions);\n\n    // All `
        $.ajax(options)` could be overridden or extended directl
y from DOM in `
        data - parsley - remote - options`\n    ajaxOptions = $.extend(true, {}
, {\n      url: url,\n      data: data,\n      type: 'GET'\n    }, remoteOptions
);\n\n    // Generate store key based on ajax options\n    instance.trigger('fie
ld:ajaxoptions', instance, ajaxOptions);\n\n    csr = $.param(ajaxOptions);\n\n 
   // Initialise querry cache\n    if ('undefined' === typeof Parsley._remoteCac
he)\n      Parsley._remoteCache = {};\n\n    // Try to retrieve stored xhr\n    
var xhr = Parsley._remoteCache[csr] = Parsley._remoteCache[csr] || $.ajax(ajaxOp
tions);\n\n    var handleXhr = function () {\n      var result = Parsley.asyncVa
lidators[validator].fn.call(instance, xhr, url, options);\n      if (!result) //
 Map falsy results to rejected promise\n        result = $.Deferred().reject();\
n      return $.when(result);\n    };\n\n    return xhr.then(handleXhr, handleXh
r);\n  },\n\n  priority: -1\n});\n\nParsley.on('form:submit', function () {\n  P
arsley._remoteCache = {};\n});\n\nBase.prototype.addAsyncValidator = function ()
 {\n  Utils.warnOnce('Accessing the method `
        addAsyncValidator` through an instan
ce is deprecated. Simply call `
        Parsley.addAsyncValidator(...)`');\n  return Pars
ley.addAsyncValidator(...arguments);\n};\n","// This is included with the Parsle
y library itself,\n// thus there is no use in adding it to your project.\nimport
 Parsley from '../parsley/main';\n\nParsley.addMessages('en', {\n  defaultMessag
e: \"This value seems to be invalid.\",\n  type: {\n    email:        \"This val
ue should be a valid email.\",\n    url:          \"This value should be a valid
 url.\",\n    number:       \"This value should be a valid number.\",\n    integ
er:      \"This value should be a valid integer.\",\n    digits:       \"This va
lue should be digits.\",\n    alphanum:     \"This value should be alphanumeric.
\"\n  },\n  notblank:       \"This value should not be blank.\",\n  required:   
    \"This value is required.\",\n  pattern:        \"This value seems to be inv
alid.\",\n  min:            \"This value should be greater than or equal to %s.\
",\n  max:            \"This value should be lower than or equal to %s.\",\n  ra
nge:          \"This value should be between %s and %s.\",\n  minlength:      \"
This value is too short. It should have %s characters or more.\",\n  maxlength: 
     \"This value is too long. It should have %s characters or fewer.\",\n  leng
th:         \"This value length is invalid. It should be between %s and %s chara
cters long.\",\n  mincheck:       \"You must select at least %s choices.\",\n  m
axcheck:       \"You must select %s choices or fewer.\",\n  check:          \"Yo
u must select between %s and %s choices.\",\n  equalto:        \"This value shou
ld be the same.\"\n});\n\nParsley.setLocale('en');\n","import $ from 'jquery';\n
import Parsley from './parsley/main';\nimport './parsley/pubsub';\nimport './par
sley/remote';\nimport './i18n/en';\nimport inputevent from './vendor/inputevent'
;\n\ninputevent.install();\n\nexport default Parsley;\n"]}